{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\OneDrive\\\\Desktop\\\\new\\\\frontend\\\\src\\\\components\\\\charts\\\\CountryMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport * as topojson from 'topojson-client';\nimport api from '../../services/api';\nimport CardContainer from '../common/CardContainer';\nimport Loader from '../common/Loader';\nimport NoDataMessage from '../common/NoDataMessage';\nimport { formatNumber, createTooltip, debounce } from '../../utils/helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CountryMap = ({\n  metric = 'intensity'\n}) => {\n  _s();\n  const [data, setData] = useState([]);\n  const [worldData, setWorldData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const svgRef = useRef(null);\n  const containerRef = useRef(null);\n  const tooltipRef = useRef(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        const [topNData, worldTopoJSON] = await Promise.all([api.getTopN(metric, 'country', 50), fetch('https://unpkg.com/world-atlas@2.0.2/countries-110m.json').then(res => res.json())]);\n        setData(topNData);\n        setWorldData(worldTopoJSON);\n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching map data:', err);\n        setError('Failed to load map data');\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [metric]);\n  useEffect(() => {\n    if (data.length > 0 && worldData && !loading) {\n      drawMap();\n\n      // Add resize listener\n      const handleResize = debounce(() => {\n        drawMap();\n      }, 300);\n      window.addEventListener('resize', handleResize);\n      return () => window.removeEventListener('resize', handleResize);\n    }\n  }, [data, worldData, loading]);\n  const drawMap = () => {\n    if (!svgRef.current || !containerRef.current || !worldData) return;\n\n    // Clear previous chart\n    d3.select(svgRef.current).selectAll('*').remove();\n\n    // Set dimensions\n    const containerWidth = containerRef.current.clientWidth;\n    const containerHeight = Math.min(500, containerWidth * 0.6);\n    const margin = {\n      top: 20,\n      right: 20,\n      bottom: 20,\n      left: 20\n    };\n    const width = containerWidth - margin.left - margin.right;\n    const height = containerHeight - margin.top - margin.bottom;\n\n    // Create SVG\n    const svg = d3.select(svgRef.current).attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n\n    // Create tooltip if not already created\n    if (!tooltipRef.current) {\n      tooltipRef.current = createTooltip(d3);\n    }\n\n    // Create map projection\n    const projection = d3.geoNaturalEarth1().fitSize([width, height], topojson.feature(worldData, worldData.objects.countries));\n\n    // Create path generator\n    const path = d3.geoPath().projection(projection);\n\n    // Extract countries data\n    const countries = topojson.feature(worldData, worldData.objects.countries).features;\n\n    // Map country names to ISO codes (this is a simplified map, you might need a more complete mapping)\n    const countryNameToFeature = {};\n    countries.forEach(feature => {\n      // Get country name from the properties\n      const countryName = feature.properties.name;\n      countryNameToFeature[countryName.toLowerCase()] = feature;\n    });\n\n    // Create color scale based on metric value\n    const colorScale = d3.scaleSequential(d3.interpolateBlues).domain([0, d3.max(data, d => d.value)]);\n\n    // Create a map for faster data lookup\n    const dataByCountry = {};\n    data.forEach(d => {\n      dataByCountry[d.name.toLowerCase()] = d;\n    });\n\n    // Draw countries\n    svg.selectAll('.country').data(countries).enter().append('path').attr('class', 'country').attr('d', path).attr('fill', d => {\n      const countryData = dataByCountry[d.properties.name.toLowerCase()];\n      return countryData ? colorScale(countryData.value) : '#d0d0d0';\n    }).on('mouseover', function (event, d) {\n      const countryData = dataByCountry[d.properties.name.toLowerCase()];\n      d3.select(this).classed('selected', true);\n      tooltipRef.current.style('opacity', 1).html(`\n            <strong>Country:</strong> ${d.properties.name}<br>\n            ${countryData ? `<strong>${metric.charAt(0).toUpperCase() + metric.slice(1)}:</strong> ${formatNumber(countryData.value)}<br>\n                 <strong>Count:</strong> ${countryData.count} records` : '<i>No data available</i>'}\n          `).style('left', event.pageX + 10 + 'px').style('top', event.pageY - 20 + 'px');\n    }).on('mouseout', function () {\n      d3.select(this).classed('selected', false);\n      tooltipRef.current.style('opacity', 0);\n    }).on('click', function (event, d) {\n      const countryName = d.properties.name;\n      // Optionally navigate to country insights\n      // window.location.href = `/country-insights?country=${encodeURIComponent(countryName)}`;\n    });\n\n    // Add legend\n    const legendWidth = 200;\n    const legendHeight = 10;\n    const legendPosition = {\n      x: width - legendWidth - 10,\n      y: height - 30\n    };\n\n    // Create gradient for legend\n    const defs = svg.append('defs');\n    const linearGradient = defs.append('linearGradient').attr('id', 'map-color-gradient');\n    linearGradient.selectAll('stop').data([{\n      offset: '0%',\n      color: colorScale(0)\n    }, {\n      offset: '100%',\n      color: colorScale(d3.max(data, d => d.value))\n    }]).enter().append('stop').attr('offset', d => d.offset).attr('stop-color', d => d.color);\n\n    // Draw legend rectangle\n    svg.append('rect').attr('x', legendPosition.x).attr('y', legendPosition.y).attr('width', legendWidth).attr('height', legendHeight).style('fill', 'url(#map-color-gradient)');\n\n    // Add legend labels\n    svg.append('text').attr('x', legendPosition.x).attr('y', legendPosition.y - 5).attr('fill', 'var(--dark-text)').attr('text-anchor', 'start').attr('font-size', '10px').text('Low');\n    svg.append('text').attr('x', legendPosition.x + legendWidth).attr('y', legendPosition.y - 5).attr('fill', 'var(--dark-text)').attr('text-anchor', 'end').attr('font-size', '10px').text('High');\n    svg.append('text').attr('x', legendPosition.x + legendWidth / 2).attr('y', legendPosition.y + 25).attr('fill', 'var(--dark-text)').attr('text-anchor', 'middle').attr('font-size', '10px').text(`${metric.charAt(0).toUpperCase() + metric.slice(1)} by Country`);\n  };\n  const renderActionButtons = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-actions\",\n    children: /*#__PURE__*/_jsxDEV(\"select\", {\n      className: \"chart-select\",\n      value: metric,\n      onChange: e => window.location.href = `?metric=${e.target.value}`,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"intensity\",\n        children: \"Intensity\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"likelihood\",\n        children: \"Likelihood\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"relevance\",\n        children: \"Relevance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(CardContainer, {\n    title: \"Global Distribution\",\n    actionButtons: renderActionButtons(),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: containerRef,\n      style: {\n        width: '100%',\n        minHeight: '400px'\n      },\n      children: loading ? /*#__PURE__*/_jsxDEV(Loader, {\n        message: \"Loading map data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this) : error ? /*#__PURE__*/_jsxDEV(NoDataMessage, {\n        message: error,\n        icon: \"\\u26A0\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 11\n      }, this) : data.length === 0 ? /*#__PURE__*/_jsxDEV(NoDataMessage, {\n        message: \"No country data available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        className: \"chart-svg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 5\n  }, this);\n};\n_s(CountryMap, \"pPX+6JyYGejEt8l8jMuG4iOGEoE=\");\n_c = CountryMap;\nexport default CountryMap;\nvar _c;\n$RefreshReg$(_c, \"CountryMap\");","map":{"version":3,"names":["React","useState","useEffect","useRef","d3","topojson","api","CardContainer","Loader","NoDataMessage","formatNumber","createTooltip","debounce","jsxDEV","_jsxDEV","CountryMap","metric","_s","data","setData","worldData","setWorldData","loading","setLoading","error","setError","svgRef","containerRef","tooltipRef","fetchData","topNData","worldTopoJSON","Promise","all","getTopN","fetch","then","res","json","err","console","length","drawMap","handleResize","window","addEventListener","removeEventListener","current","select","selectAll","remove","containerWidth","clientWidth","containerHeight","Math","min","margin","top","right","bottom","left","width","height","svg","attr","append","projection","geoNaturalEarth1","fitSize","feature","objects","countries","path","geoPath","features","countryNameToFeature","forEach","countryName","properties","name","toLowerCase","colorScale","scaleSequential","interpolateBlues","domain","max","d","value","dataByCountry","enter","countryData","on","event","classed","style","html","charAt","toUpperCase","slice","count","pageX","pageY","legendWidth","legendHeight","legendPosition","x","y","defs","linearGradient","offset","color","text","renderActionButtons","className","children","onChange","e","location","href","target","fileName","_jsxFileName","lineNumber","columnNumber","title","actionButtons","ref","minHeight","message","icon","_c","$RefreshReg$"],"sources":["C:/Users/Dell/OneDrive/Desktop/new/frontend/src/components/charts/CountryMap.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport * as d3 from 'd3';\r\nimport * as topojson from 'topojson-client';\r\nimport api from '../../services/api';\r\nimport CardContainer from '../common/CardContainer';\r\nimport Loader from '../common/Loader';\r\nimport NoDataMessage from '../common/NoDataMessage';\r\nimport { formatNumber, createTooltip, debounce } from '../../utils/helpers';\r\n\r\nconst CountryMap = ({ metric = 'intensity' }) => {\r\n  const [data, setData] = useState([]);\r\n  const [worldData, setWorldData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const svgRef = useRef(null);\r\n  const containerRef = useRef(null);\r\n  const tooltipRef = useRef(null);\r\n  \r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const [topNData, worldTopoJSON] = await Promise.all([\r\n          api.getTopN(metric, 'country', 50),\r\n          fetch('https://unpkg.com/world-atlas@2.0.2/countries-110m.json').then(res => res.json())\r\n        ]);\r\n        \r\n        setData(topNData);\r\n        setWorldData(worldTopoJSON);\r\n        setLoading(false);\r\n      } catch (err) {\r\n        console.error('Error fetching map data:', err);\r\n        setError('Failed to load map data');\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [metric]);\r\n\r\n  useEffect(() => {\r\n    if (data.length > 0 && worldData && !loading) {\r\n      drawMap();\r\n      \r\n      // Add resize listener\r\n      const handleResize = debounce(() => {\r\n        drawMap();\r\n      }, 300);\r\n      \r\n      window.addEventListener('resize', handleResize);\r\n      return () => window.removeEventListener('resize', handleResize);\r\n    }\r\n  }, [data, worldData, loading]);\r\n\r\n  const drawMap = () => {\r\n    if (!svgRef.current || !containerRef.current || !worldData) return;\r\n\r\n    // Clear previous chart\r\n    d3.select(svgRef.current).selectAll('*').remove();\r\n\r\n    // Set dimensions\r\n    const containerWidth = containerRef.current.clientWidth;\r\n    const containerHeight = Math.min(500, containerWidth * 0.6);\r\n    const margin = { top: 20, right: 20, bottom: 20, left: 20 };\r\n    const width = containerWidth - margin.left - margin.right;\r\n    const height = containerHeight - margin.top - margin.bottom;\r\n\r\n    // Create SVG\r\n    const svg = d3.select(svgRef.current)\r\n      .attr('width', width + margin.left + margin.right)\r\n      .attr('height', height + margin.top + margin.bottom)\r\n      .append('g')\r\n      .attr('transform', `translate(${margin.left},${margin.top})`);\r\n\r\n    // Create tooltip if not already created\r\n    if (!tooltipRef.current) {\r\n      tooltipRef.current = createTooltip(d3);\r\n    }\r\n\r\n    // Create map projection\r\n    const projection = d3.geoNaturalEarth1()\r\n      .fitSize([width, height], topojson.feature(worldData, worldData.objects.countries));\r\n\r\n    // Create path generator\r\n    const path = d3.geoPath().projection(projection);\r\n\r\n    // Extract countries data\r\n    const countries = topojson.feature(worldData, worldData.objects.countries).features;\r\n\r\n    // Map country names to ISO codes (this is a simplified map, you might need a more complete mapping)\r\n    const countryNameToFeature = {};\r\n    countries.forEach(feature => {\r\n      // Get country name from the properties\r\n      const countryName = feature.properties.name;\r\n      countryNameToFeature[countryName.toLowerCase()] = feature;\r\n    });\r\n\r\n    // Create color scale based on metric value\r\n    const colorScale = d3.scaleSequential(d3.interpolateBlues)\r\n      .domain([0, d3.max(data, d => d.value)]);\r\n\r\n    // Create a map for faster data lookup\r\n    const dataByCountry = {};\r\n    data.forEach(d => {\r\n      dataByCountry[d.name.toLowerCase()] = d;\r\n    });\r\n\r\n    // Draw countries\r\n    svg.selectAll('.country')\r\n      .data(countries)\r\n      .enter()\r\n      .append('path')\r\n      .attr('class', 'country')\r\n      .attr('d', path)\r\n      .attr('fill', d => {\r\n        const countryData = dataByCountry[d.properties.name.toLowerCase()];\r\n        return countryData ? colorScale(countryData.value) : '#d0d0d0';\r\n      })\r\n      .on('mouseover', function(event, d) {\r\n        const countryData = dataByCountry[d.properties.name.toLowerCase()];\r\n        \r\n        d3.select(this)\r\n          .classed('selected', true);\r\n        \r\n        tooltipRef.current\r\n          .style('opacity', 1)\r\n          .html(`\r\n            <strong>Country:</strong> ${d.properties.name}<br>\r\n            ${countryData \r\n              ? `<strong>${metric.charAt(0).toUpperCase() + metric.slice(1)}:</strong> ${formatNumber(countryData.value)}<br>\r\n                 <strong>Count:</strong> ${countryData.count} records`\r\n              : '<i>No data available</i>'}\r\n          `)\r\n          .style('left', (event.pageX + 10) + 'px')\r\n          .style('top', (event.pageY - 20) + 'px');\r\n      })\r\n      .on('mouseout', function() {\r\n        d3.select(this).classed('selected', false);\r\n        tooltipRef.current.style('opacity', 0);\r\n      })\r\n      .on('click', function(event, d) {\r\n        const countryName = d.properties.name;\r\n        // Optionally navigate to country insights\r\n        // window.location.href = `/country-insights?country=${encodeURIComponent(countryName)}`;\r\n      });\r\n\r\n    // Add legend\r\n    const legendWidth = 200;\r\n    const legendHeight = 10;\r\n    const legendPosition = {\r\n      x: width - legendWidth - 10,\r\n      y: height - 30\r\n    };\r\n\r\n    // Create gradient for legend\r\n    const defs = svg.append('defs');\r\n    const linearGradient = defs.append('linearGradient')\r\n      .attr('id', 'map-color-gradient');\r\n\r\n    linearGradient.selectAll('stop')\r\n      .data([\r\n        {offset: '0%', color: colorScale(0)},\r\n        {offset: '100%', color: colorScale(d3.max(data, d => d.value))}\r\n      ])\r\n      .enter().append('stop')\r\n      .attr('offset', d => d.offset)\r\n      .attr('stop-color', d => d.color);\r\n\r\n    // Draw legend rectangle\r\n    svg.append('rect')\r\n      .attr('x', legendPosition.x)\r\n      .attr('y', legendPosition.y)\r\n      .attr('width', legendWidth)\r\n      .attr('height', legendHeight)\r\n      .style('fill', 'url(#map-color-gradient)');\r\n\r\n    // Add legend labels\r\n    svg.append('text')\r\n      .attr('x', legendPosition.x)\r\n      .attr('y', legendPosition.y - 5)\r\n      .attr('fill', 'var(--dark-text)')\r\n      .attr('text-anchor', 'start')\r\n      .attr('font-size', '10px')\r\n      .text('Low');\r\n\r\n    svg.append('text')\r\n      .attr('x', legendPosition.x + legendWidth)\r\n      .attr('y', legendPosition.y - 5)\r\n      .attr('fill', 'var(--dark-text)')\r\n      .attr('text-anchor', 'end')\r\n      .attr('font-size', '10px')\r\n      .text('High');\r\n\r\n    svg.append('text')\r\n      .attr('x', legendPosition.x + legendWidth / 2)\r\n      .attr('y', legendPosition.y + 25)\r\n      .attr('fill', 'var(--dark-text)')\r\n      .attr('text-anchor', 'middle')\r\n      .attr('font-size', '10px')\r\n      .text(`${metric.charAt(0).toUpperCase() + metric.slice(1)} by Country`);\r\n  };\r\n\r\n  const renderActionButtons = () => (\r\n    <div className=\"chart-actions\">\r\n      <select\r\n        className=\"chart-select\"\r\n        value={metric}\r\n        onChange={(e) => window.location.href = `?metric=${e.target.value}`}\r\n      >\r\n        <option value=\"intensity\">Intensity</option>\r\n        <option value=\"likelihood\">Likelihood</option>\r\n        <option value=\"relevance\">Relevance</option>\r\n      </select>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <CardContainer \r\n      title=\"Global Distribution\" \r\n      actionButtons={renderActionButtons()}\r\n    >\r\n      <div ref={containerRef} style={{ width: '100%', minHeight: '400px' }}>\r\n        {loading ? (\r\n          <Loader message=\"Loading map data...\" />\r\n        ) : error ? (\r\n          <NoDataMessage message={error} icon=\"⚠️\" />\r\n        ) : data.length === 0 ? (\r\n          <NoDataMessage message=\"No country data available\" />\r\n        ) : (\r\n          <svg ref={svgRef} className=\"chart-svg\"></svg>\r\n        )}\r\n      </div>\r\n    </CardContainer>\r\n  );\r\n};\r\n\r\nexport default CountryMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}