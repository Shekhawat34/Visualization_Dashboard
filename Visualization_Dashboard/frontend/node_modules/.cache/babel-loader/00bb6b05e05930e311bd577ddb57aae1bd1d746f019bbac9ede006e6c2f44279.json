{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\OneDrive\\\\Desktop\\\\new\\\\frontend\\\\src\\\\components\\\\charts\\\\SectorChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from 'd3';\nimport api from '../../services/api';\nimport CardContainer from '../common/CardContainer';\nimport Loader from '../common/Loader';\nimport NoDataMessage from '../common/NoDataMessage';\nimport { createTooltip, cleanData, formatNumber, debounce } from '../../utils/helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SectorChart = ({\n  fullSize = false\n}) => {\n  _s();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [metric, setMetric] = useState('intensity');\n  const [sortCriteria, setSortCriteria] = useState('count');\n  const [sectors, setSectors] = useState([]);\n  const [selectedSector, setSelectedSector] = useState('all');\n  const svgRef = useRef(null);\n  const containerRef = useRef(null);\n  const tooltipRef = useRef(null);\n\n  // Fetch available sectors for the filter\n  useEffect(() => {\n    const fetchSectorOptions = async () => {\n      try {\n        const filtersData = await api.getFilters();\n        setSectors(['all', ...filtersData.sectors]);\n      } catch (err) {\n        console.error('Error fetching sector options:', err);\n      }\n    };\n    fetchSectorOptions();\n  }, []);\n  useEffect(() => {\n    const fetchSectorData = async () => {\n      try {\n        setLoading(true);\n        // Create filter object based on selectedSector\n        const filters = {};\n        // NOTE: We're NOT filtering here because we want the /sectors endpoint\n        // to return all sector aggregations, then we'll filter on the client side\n\n        const sectorData = await api.getSectors(filters);\n\n        // If a specific sector is selected, filter the data\n        if (selectedSector !== 'all') {\n          const filteredData = sectorData.filter(item => item.sector === selectedSector);\n          setData(filteredData);\n        } else {\n          setData(sectorData);\n        }\n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching sector data:', err);\n        setError('Failed to load sector data');\n        setLoading(false);\n      }\n    };\n    fetchSectorData();\n  }, [selectedSector]);\n  useEffect(() => {\n    if (data && data.length > 0 && !loading) {\n      renderChart();\n    }\n  }, [data, loading, metric, sortCriteria]);\n  useEffect(() => {\n    // Add resize listener\n    const handleResize = debounce(() => {\n      if (data && data.length > 0 && !loading) {\n        renderChart();\n      }\n    }, 300);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [data, loading, metric, sortCriteria]);\n  const renderChart = () => {\n    if (!svgRef.current || !containerRef.current) return;\n\n    // Clear previous chart\n    d3.select(svgRef.current).selectAll('*').remove();\n\n    // Create tooltip if not already created\n    if (!tooltipRef.current) {\n      tooltipRef.current = createTooltip(d3);\n    }\n    const containerWidth = containerRef.current.clientWidth;\n    const margin = {\n      top: 20,\n      right: 30,\n      bottom: 40,\n      left: 70\n    };\n    const width = containerWidth - margin.left - margin.right;\n    const height = (fullSize ? 450 : 350) - margin.top - margin.bottom;\n\n    // Process and sort data\n    const cleanedData = cleanData(data, ['sector', 'count', 'intensity', 'likelihood', 'relevance']);\n    let sortedData = [...cleanedData];\n    if (sortCriteria === 'count') {\n      sortedData.sort((a, b) => b.count - a.count);\n    } else {\n      sortedData.sort((a, b) => b[metric] - a[metric]);\n    }\n\n    // Take top 10 sectors if there are more\n    const displayData = sortedData.slice(0, 10);\n\n    // Create SVG\n    const svg = d3.select(svgRef.current).attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', `translate(${margin.left}, ${margin.top})`);\n\n    // Create scales\n    const x = d3.scaleBand().domain(displayData.map(d => d.sector)).range([0, width]).padding(0.3);\n    const y = d3.scaleLinear().domain([0, d3.max(displayData, d => sortCriteria === 'count' ? d.count : d[metric]) * 1.1]).nice().range([height, 0]);\n\n    // Create gradient for bars\n    const defs = svg.append('defs');\n    const gradient = defs.append('linearGradient').attr('id', 'sector-bar-gradient').attr('x1', '0%').attr('y1', '0%').attr('x2', '0%').attr('y2', '100%');\n    gradient.append('stop').attr('offset', '0%').attr('stop-color', '#4364E8').attr('stop-opacity', 1);\n    gradient.append('stop').attr('offset', '100%').attr('stop-color', '#6FB1FC').attr('stop-opacity', 0.7);\n\n    // Create simplified y-axis (only start and end values)\n    const yAxis = svg.append('g').attr('class', 'axis y-axis').call(d3.axisLeft(y).tickValues([0, d3.max(displayData, d => sortCriteria === 'count' ? d.count : d[metric])]).tickFormat(d => formatNumber(d)));\n\n    // Create x-axis without labels\n    const xAxis = svg.append('g').attr('class', 'axis x-axis').attr('transform', `translate(0, ${height})`).call(d3.axisBottom(x).tickSize(0).tickFormat(\"\"));\n\n    // Add Y axis label\n    svg.append('text').attr('transform', 'rotate(-90)').attr('y', -margin.left + 20).attr('x', -height / 2).attr('dy', '1em').attr('text-anchor', 'middle').attr('class', 'axis-label').text(sortCriteria === 'count' ? 'Number of Events' : `Avg. ${metric.charAt(0).toUpperCase() + metric.slice(1)}`);\n\n    // Add X axis label\n    svg.append('text').attr('y', height + margin.bottom - 5).attr('x', width / 2).attr('text-anchor', 'middle').attr('class', 'axis-label').text('Sectors');\n\n    // Draw bars with transition\n    const bars = svg.selectAll('.bar').data(displayData).enter().append('rect').attr('class', 'bar').attr('x', d => x(d.sector)).attr('width', x.bandwidth()).attr('y', height) // Start from bottom\n    .attr('height', 0) // Initial height 0 for transition\n    .attr('fill', 'url(#sector-bar-gradient)').attr('rx', 3) // Rounded corners\n    .attr('ry', 3);\n\n    // Create the animate-in transition\n    bars.transition().duration(800).delay((d, i) => i * 50).ease(d3.easeElastic.period(0.4)).attr('y', d => y(sortCriteria === 'count' ? d.count : d[metric])).attr('height', d => height - y(sortCriteria === 'count' ? d.count : d[metric]));\n\n    // Add bar value labels\n    svg.selectAll('.bar-label').data(displayData).enter().append('text').attr('class', 'bar-label').attr('x', d => x(d.sector) + x.bandwidth() / 2).attr('y', d => y(sortCriteria === 'count' ? d.count : d[metric]) - 5).attr('text-anchor', 'middle').attr('opacity', 0) // Start invisible for transition\n    .text(d => formatNumber(sortCriteria === 'count' ? d.count : d[metric])).transition().duration(800).delay((d, i) => i * 50 + 400) // Slight delay after bars\n    .attr('opacity', 1);\n\n    // Add interactivity\n    bars.on('mouseover', function (event, d) {\n      // Highlight the bar\n      d3.select(this).transition().duration(300).attr('fill', '#FFA726').attr('width', x.bandwidth() * 1.05).attr('x', x(d.sector) - x.bandwidth() * 0.025);\n\n      // Show sector name on hover\n      svg.append('text').attr('class', 'hover-label').attr('x', x(d.sector) + x.bandwidth() / 2).attr('y', height + 30).attr('text-anchor', 'middle').attr('font-weight', 'bold').text(d.sector);\n\n      // Show tooltip\n      tooltipRef.current.transition().duration(200).style('opacity', 0.95);\n      let tooltipContent = `\n        <div class=\"tooltip-title\">${d.sector}</div>\n        <div class=\"tooltip-row\"><span>Count:</span> <span>${formatNumber(d.count)}</span></div>\n      `;\n      if (d.intensity) {\n        tooltipContent += `<div class=\"tooltip-row\"><span>Intensity:</span> <span>${formatNumber(d.intensity)}</span></div>`;\n      }\n      if (d.likelihood) {\n        tooltipContent += `<div class=\"tooltip-row\"><span>Likelihood:</span> <span>${formatNumber(d.likelihood)}</span></div>`;\n      }\n      if (d.relevance) {\n        tooltipContent += `<div class=\"tooltip-row\"><span>Relevance:</span> <span>${formatNumber(d.relevance)}</span></div>`;\n      }\n      tooltipRef.current.html(tooltipContent).style('left', event.pageX + 10 + 'px').style('top', event.pageY - 28 + 'px');\n    }).on('mouseout', function () {\n      // Restore bar style\n      d3.select(this).transition().duration(300).attr('fill', 'url(#sector-bar-gradient)').attr('width', x.bandwidth()).attr('x', d => x(d.sector));\n\n      // Remove hover label\n      svg.selectAll('.hover-label').remove();\n\n      // Hide tooltip\n      tooltipRef.current.transition().duration(500).style('opacity', 0);\n    }).on('click', function (event, d) {\n      // Same behavior as hover for click events\n      // This ensures mobile users can see the sector names\n      svg.selectAll('.hover-label').remove();\n      svg.append('text').attr('class', 'hover-label').attr('x', x(d.sector) + x.bandwidth() / 2).attr('y', height + 30).attr('text-anchor', 'middle').attr('font-weight', 'bold').text(d.sector);\n    });\n  };\n  const handleMetricChange = newMetric => {\n    d3.selectAll('.bar').transition().duration(500).attr('y', d => d3.select(svgRef.current).node().clientHeight - 100).attr('height', 0).on('end', () => {\n      setMetric(newMetric);\n      setSortCriteria(newMetric);\n    });\n  };\n  const handleSortChange = criteria => {\n    setSortCriteria(criteria);\n  };\n  const handleSectorChange = event => {\n    setSelectedSector(event.target.value);\n  };\n  const actionButtons = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-actions\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sector-filter\",\n      children: /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedSector,\n        onChange: handleSectorChange,\n        className: \"filter-select\",\n        children: sectors.map(sector => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: sector,\n          children: sector === 'all' ? 'All Sectors' : sector\n        }, sector, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"metrics-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `chart-action-btn ${metric === 'intensity' ? 'active' : ''}`,\n        onClick: () => handleMetricChange('intensity'),\n        children: \"Intensity\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `chart-action-btn ${metric === 'likelihood' ? 'active' : ''}`,\n        onClick: () => handleMetricChange('likelihood'),\n        children: \"Likelihood\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `chart-action-btn ${metric === 'relevance' ? 'active' : ''}`,\n        onClick: () => handleMetricChange('relevance'),\n        children: \"Relevance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `chart-action-btn ${sortCriteria === 'count' ? 'active' : ''}`,\n        onClick: () => handleSortChange('count'),\n        children: \"Count\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"refresh-btn\",\n      onClick: () => {\n        setLoading(true);\n        const filters = {};\n        if (selectedSector !== 'all') {\n          filters.sector = selectedSector;\n        }\n        api.getSectors(filters).then(data => {\n          setData(data);\n          setLoading(false);\n        }).catch(err => {\n          setError('Failed to reload data');\n          setLoading(false);\n        });\n      },\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"refresh-icon\",\n        children: \"\\u21BB\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 329,\n    columnNumber: 5\n  }, this);\n\n  // Adding CSS for the chart and filter\n  const chartStyles = `\n    .axis path,\n    .axis line {\n      stroke: #cccccc;\n    }\n    \n    .axis text {\n      fill: #666666;\n    }\n    \n    .bar-label {\n      fill: #333333;\n      font-size: 12px;\n    }\n    \n    .hover-label {\n      fill: #333333;\n      font-size: 14px;\n    }\n    \n    .axis-label {\n      fill: #555555;\n      font-size: 13px;\n    }\n    \n    .chart-actions {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      margin-bottom: 15px;\n    }\n    \n    .filter-select {\n      padding: 8px 12px;\n      border-radius: 4px;\n      border: 1px solid #ccc;\n      background-color: white;\n      font-size: 14px;\n      min-width: 160px;\n      margin-right: 10px;\n    }\n    \n    .sector-filter {\n      display: flex;\n      align-items: center;\n    }\n  `;\n  return /*#__PURE__*/_jsxDEV(CardContainer, {\n    title: \"Sector Distribution\",\n    actionButtons: actionButtons,\n    children: [/*#__PURE__*/_jsxDEV(\"style\", {\n      children: chartStyles\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: containerRef,\n      className: \"chart-container\",\n      style: {\n        width: '100%',\n        height: fullSize ? '450px' : '350px'\n      },\n      children: loading ? /*#__PURE__*/_jsxDEV(Loader, {\n        message: \"Loading sector data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 11\n      }, this) : error ? /*#__PURE__*/_jsxDEV(NoDataMessage, {\n        message: error,\n        icon: \"\\u26A0\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 11\n      }, this) : !data || data.length === 0 ? /*#__PURE__*/_jsxDEV(NoDataMessage, {\n        message: \"No sector data available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        className: \"chart-svg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 438,\n    columnNumber: 5\n  }, this);\n};\n_s(SectorChart, \"LbIc+sRI+8BHL2N6LaJCHPgTNTs=\");\n_c = SectorChart;\nexport default SectorChart;\nvar _c;\n$RefreshReg$(_c, \"SectorChart\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","api","CardContainer","Loader","NoDataMessage","createTooltip","cleanData","formatNumber","debounce","jsxDEV","_jsxDEV","SectorChart","fullSize","_s","data","setData","loading","setLoading","error","setError","metric","setMetric","sortCriteria","setSortCriteria","sectors","setSectors","selectedSector","setSelectedSector","svgRef","containerRef","tooltipRef","fetchSectorOptions","filtersData","getFilters","err","console","fetchSectorData","filters","sectorData","getSectors","filteredData","filter","item","sector","length","renderChart","handleResize","window","addEventListener","removeEventListener","current","select","selectAll","remove","containerWidth","clientWidth","margin","top","right","bottom","left","width","height","cleanedData","sortedData","sort","a","b","count","displayData","slice","svg","attr","append","x","scaleBand","domain","map","d","range","padding","y","scaleLinear","max","nice","defs","gradient","yAxis","call","axisLeft","tickValues","tickFormat","xAxis","axisBottom","tickSize","text","charAt","toUpperCase","bars","enter","bandwidth","transition","duration","delay","i","ease","easeElastic","period","on","event","style","tooltipContent","intensity","likelihood","relevance","html","pageX","pageY","handleMetricChange","newMetric","node","clientHeight","handleSortChange","criteria","handleSectorChange","target","value","actionButtons","className","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","then","catch","chartStyles","title","ref","message","icon","_c","$RefreshReg$"],"sources":["C:/Users/Dell/OneDrive/Desktop/new/frontend/src/components/charts/SectorChart.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport * as d3 from 'd3';\r\nimport api from '../../services/api';\r\nimport CardContainer from '../common/CardContainer';\r\nimport Loader from '../common/Loader';\r\nimport NoDataMessage from '../common/NoDataMessage';\r\nimport { createTooltip, cleanData, formatNumber, debounce } from '../../utils/helpers';\r\n\r\nconst SectorChart = ({ fullSize = false }) => {\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [metric, setMetric] = useState('intensity');\r\n  const [sortCriteria, setSortCriteria] = useState('count');\r\n  const [sectors, setSectors] = useState([]);\r\n  const [selectedSector, setSelectedSector] = useState('all');\r\n  const svgRef = useRef(null);\r\n  const containerRef = useRef(null);\r\n  const tooltipRef = useRef(null);\r\n  \r\n  // Fetch available sectors for the filter\r\n  useEffect(() => {\r\n    const fetchSectorOptions = async () => {\r\n      try {\r\n        const filtersData = await api.getFilters();\r\n        setSectors(['all', ...filtersData.sectors]);\r\n      } catch (err) {\r\n        console.error('Error fetching sector options:', err);\r\n      }\r\n    };\r\n    \r\n    fetchSectorOptions();\r\n  }, []);\r\n  \r\n  useEffect(() => {\r\n    const fetchSectorData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        // Create filter object based on selectedSector\r\n        const filters = {};\r\n        // NOTE: We're NOT filtering here because we want the /sectors endpoint\r\n        // to return all sector aggregations, then we'll filter on the client side\r\n        \r\n        const sectorData = await api.getSectors(filters);\r\n        \r\n        // If a specific sector is selected, filter the data\r\n        if (selectedSector !== 'all') {\r\n          const filteredData = sectorData.filter(item => item.sector === selectedSector);\r\n          setData(filteredData);\r\n        } else {\r\n          setData(sectorData);\r\n        }\r\n        \r\n        setLoading(false);\r\n      } catch (err) {\r\n        console.error('Error fetching sector data:', err);\r\n        setError('Failed to load sector data');\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchSectorData();\r\n  }, [selectedSector]);\r\n  \r\n  useEffect(() => {\r\n    if (data && data.length > 0 && !loading) {\r\n      renderChart();\r\n    }\r\n  }, [data, loading, metric, sortCriteria]);\r\n  \r\n  useEffect(() => {\r\n    // Add resize listener\r\n    const handleResize = debounce(() => {\r\n      if (data && data.length > 0 && !loading) {\r\n        renderChart();\r\n      }\r\n    }, 300);\r\n    \r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, [data, loading, metric, sortCriteria]);\r\n  \r\n  const renderChart = () => {\r\n    if (!svgRef.current || !containerRef.current) return;\r\n    \r\n    // Clear previous chart\r\n    d3.select(svgRef.current).selectAll('*').remove();\r\n    \r\n    // Create tooltip if not already created\r\n    if (!tooltipRef.current) {\r\n      tooltipRef.current = createTooltip(d3);\r\n    }\r\n    \r\n    const containerWidth = containerRef.current.clientWidth;\r\n    const margin = { top: 20, right: 30, bottom: 40, left: 70 };\r\n    const width = containerWidth - margin.left - margin.right;\r\n    const height = (fullSize ? 450 : 350) - margin.top - margin.bottom;\r\n    \r\n    // Process and sort data\r\n    const cleanedData = cleanData(data, ['sector', 'count', 'intensity', 'likelihood', 'relevance']);\r\n    let sortedData = [...cleanedData];\r\n    \r\n    if (sortCriteria === 'count') {\r\n      sortedData.sort((a, b) => b.count - a.count);\r\n    } else {\r\n      sortedData.sort((a, b) => b[metric] - a[metric]);\r\n    }\r\n    \r\n    // Take top 10 sectors if there are more\r\n    const displayData = sortedData.slice(0, 10);\r\n    \r\n    // Create SVG\r\n    const svg = d3.select(svgRef.current)\r\n      .attr('width', width + margin.left + margin.right)\r\n      .attr('height', height + margin.top + margin.bottom)\r\n      .append('g')\r\n      .attr('transform', `translate(${margin.left}, ${margin.top})`);\r\n    \r\n    // Create scales\r\n    const x = d3.scaleBand()\r\n      .domain(displayData.map(d => d.sector))\r\n      .range([0, width])\r\n      .padding(0.3);\r\n    \r\n    const y = d3.scaleLinear()\r\n      .domain([0, d3.max(displayData, d => \r\n        sortCriteria === 'count' ? d.count : d[metric]\r\n      ) * 1.1])\r\n      .nice()\r\n      .range([height, 0]);\r\n    \r\n    // Create gradient for bars\r\n    const defs = svg.append('defs');\r\n    \r\n    const gradient = defs.append('linearGradient')\r\n      .attr('id', 'sector-bar-gradient')\r\n      .attr('x1', '0%')\r\n      .attr('y1', '0%')\r\n      .attr('x2', '0%')\r\n      .attr('y2', '100%');\r\n      \r\n    gradient.append('stop')\r\n      .attr('offset', '0%')\r\n      .attr('stop-color', '#4364E8')\r\n      .attr('stop-opacity', 1);\r\n      \r\n    gradient.append('stop')\r\n      .attr('offset', '100%')\r\n      .attr('stop-color', '#6FB1FC')\r\n      .attr('stop-opacity', 0.7);\r\n    \r\n    // Create simplified y-axis (only start and end values)\r\n    const yAxis = svg.append('g')\r\n      .attr('class', 'axis y-axis')\r\n      .call(\r\n        d3.axisLeft(y)\r\n          .tickValues([0, d3.max(displayData, d => sortCriteria === 'count' ? d.count : d[metric])])\r\n          .tickFormat(d => formatNumber(d))\r\n      );\r\n    \r\n    // Create x-axis without labels\r\n    const xAxis = svg.append('g')\r\n      .attr('class', 'axis x-axis')\r\n      .attr('transform', `translate(0, ${height})`)\r\n      .call(\r\n        d3.axisBottom(x)\r\n          .tickSize(0)\r\n          .tickFormat(\"\")\r\n      );\r\n    \r\n    // Add Y axis label\r\n    svg.append('text')\r\n      .attr('transform', 'rotate(-90)')\r\n      .attr('y', -margin.left + 20)\r\n      .attr('x', -height / 2)\r\n      .attr('dy', '1em')\r\n      .attr('text-anchor', 'middle')\r\n      .attr('class', 'axis-label')\r\n      .text(sortCriteria === 'count' ? 'Number of Events' : \r\n        `Avg. ${metric.charAt(0).toUpperCase() + metric.slice(1)}`);\r\n    \r\n    // Add X axis label\r\n    svg.append('text')\r\n      .attr('y', height + margin.bottom - 5)\r\n      .attr('x', width / 2)\r\n      .attr('text-anchor', 'middle')\r\n      .attr('class', 'axis-label')\r\n      .text('Sectors');\r\n    \r\n    // Draw bars with transition\r\n    const bars = svg.selectAll('.bar')\r\n      .data(displayData)\r\n      .enter()\r\n      .append('rect')\r\n      .attr('class', 'bar')\r\n      .attr('x', d => x(d.sector))\r\n      .attr('width', x.bandwidth())\r\n      .attr('y', height) // Start from bottom\r\n      .attr('height', 0) // Initial height 0 for transition\r\n      .attr('fill', 'url(#sector-bar-gradient)')\r\n      .attr('rx', 3) // Rounded corners\r\n      .attr('ry', 3);\r\n    \r\n    // Create the animate-in transition\r\n    bars.transition()\r\n      .duration(800)\r\n      .delay((d, i) => i * 50)\r\n      .ease(d3.easeElastic.period(0.4))\r\n      .attr('y', d => y(sortCriteria === 'count' ? d.count : d[metric]))\r\n      .attr('height', d => height - y(sortCriteria === 'count' ? d.count : d[metric]));\r\n    \r\n    // Add bar value labels\r\n    svg.selectAll('.bar-label')\r\n      .data(displayData)\r\n      .enter()\r\n      .append('text')\r\n      .attr('class', 'bar-label')\r\n      .attr('x', d => x(d.sector) + x.bandwidth() / 2)\r\n      .attr('y', d => y(sortCriteria === 'count' ? d.count : d[metric]) - 5)\r\n      .attr('text-anchor', 'middle')\r\n      .attr('opacity', 0) // Start invisible for transition\r\n      .text(d => formatNumber(sortCriteria === 'count' ? d.count : d[metric]))\r\n      .transition()\r\n      .duration(800)\r\n      .delay((d, i) => i * 50 + 400) // Slight delay after bars\r\n      .attr('opacity', 1);\r\n    \r\n    // Add interactivity\r\n    bars.on('mouseover', function(event, d) {\r\n      // Highlight the bar\r\n      d3.select(this)\r\n        .transition()\r\n        .duration(300)\r\n        .attr('fill', '#FFA726')\r\n        .attr('width', x.bandwidth() * 1.05)\r\n        .attr('x', x(d.sector) - (x.bandwidth() * 0.025));\r\n      \r\n      // Show sector name on hover\r\n      svg.append('text')\r\n        .attr('class', 'hover-label')\r\n        .attr('x', x(d.sector) + x.bandwidth() / 2)\r\n        .attr('y', height + 30)\r\n        .attr('text-anchor', 'middle')\r\n        .attr('font-weight', 'bold')\r\n        .text(d.sector);\r\n      \r\n      // Show tooltip\r\n      tooltipRef.current\r\n        .transition()\r\n        .duration(200)\r\n        .style('opacity', 0.95);\r\n      \r\n      let tooltipContent = `\r\n        <div class=\"tooltip-title\">${d.sector}</div>\r\n        <div class=\"tooltip-row\"><span>Count:</span> <span>${formatNumber(d.count)}</span></div>\r\n      `;\r\n      \r\n      if (d.intensity) {\r\n        tooltipContent += `<div class=\"tooltip-row\"><span>Intensity:</span> <span>${formatNumber(d.intensity)}</span></div>`;\r\n      }\r\n      \r\n      if (d.likelihood) {\r\n        tooltipContent += `<div class=\"tooltip-row\"><span>Likelihood:</span> <span>${formatNumber(d.likelihood)}</span></div>`;\r\n      }\r\n      \r\n      if (d.relevance) {\r\n        tooltipContent += `<div class=\"tooltip-row\"><span>Relevance:</span> <span>${formatNumber(d.relevance)}</span></div>`;\r\n      }\r\n      \r\n      tooltipRef.current\r\n        .html(tooltipContent)\r\n        .style('left', (event.pageX + 10) + 'px')\r\n        .style('top', (event.pageY - 28) + 'px');\r\n    })\r\n    .on('mouseout', function() {\r\n      // Restore bar style\r\n      d3.select(this)\r\n        .transition()\r\n        .duration(300)\r\n        .attr('fill', 'url(#sector-bar-gradient)')\r\n        .attr('width', x.bandwidth())\r\n        .attr('x', d => x(d.sector));\r\n      \r\n      // Remove hover label\r\n      svg.selectAll('.hover-label').remove();\r\n      \r\n      // Hide tooltip\r\n      tooltipRef.current\r\n        .transition()\r\n        .duration(500)\r\n        .style('opacity', 0);\r\n    })\r\n    .on('click', function(event, d) {\r\n      // Same behavior as hover for click events\r\n      // This ensures mobile users can see the sector names\r\n      svg.selectAll('.hover-label').remove();\r\n      \r\n      svg.append('text')\r\n        .attr('class', 'hover-label')\r\n        .attr('x', x(d.sector) + x.bandwidth() / 2)\r\n        .attr('y', height + 30)\r\n        .attr('text-anchor', 'middle')\r\n        .attr('font-weight', 'bold')\r\n        .text(d.sector);\r\n    });\r\n  };\r\n  \r\n  const handleMetricChange = (newMetric) => {\r\n    d3.selectAll('.bar')\r\n      .transition()\r\n      .duration(500)\r\n      .attr('y', d => d3.select(svgRef.current).node().clientHeight - 100)\r\n      .attr('height', 0)\r\n      .on('end', () => {\r\n        setMetric(newMetric);\r\n        setSortCriteria(newMetric);\r\n      });\r\n  };\r\n  \r\n  const handleSortChange = (criteria) => {\r\n    setSortCriteria(criteria);\r\n  };\r\n  \r\n  const handleSectorChange = (event) => {\r\n    setSelectedSector(event.target.value);\r\n  };\r\n  \r\n  const actionButtons = (\r\n    <div className=\"chart-actions\">\r\n      <div className=\"sector-filter\">\r\n        <select \r\n          value={selectedSector} \r\n          onChange={handleSectorChange}\r\n          className=\"filter-select\"\r\n        >\r\n          {sectors.map(sector => (\r\n            <option key={sector} value={sector}>\r\n              {sector === 'all' ? 'All Sectors' : sector}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div className=\"metrics-buttons\">\r\n        <button \r\n          className={`chart-action-btn ${metric === 'intensity' ? 'active' : ''}`}\r\n          onClick={() => handleMetricChange('intensity')}\r\n        >\r\n          Intensity\r\n        </button>\r\n        <button \r\n          className={`chart-action-btn ${metric === 'likelihood' ? 'active' : ''}`}\r\n          onClick={() => handleMetricChange('likelihood')}\r\n        >\r\n          Likelihood\r\n        </button>\r\n        <button \r\n          className={`chart-action-btn ${metric === 'relevance' ? 'active' : ''}`}\r\n          onClick={() => handleMetricChange('relevance')}\r\n        >\r\n          Relevance\r\n        </button>\r\n        <button \r\n          className={`chart-action-btn ${sortCriteria === 'count' ? 'active' : ''}`}\r\n          onClick={() => handleSortChange('count')}\r\n        >\r\n          Count\r\n        </button>\r\n      </div>\r\n      <button className=\"refresh-btn\" onClick={() => {\r\n        setLoading(true);\r\n        const filters = {};\r\n        if (selectedSector !== 'all') {\r\n          filters.sector = selectedSector;\r\n        }\r\n        api.getSectors(filters).then(data => {\r\n          setData(data);\r\n          setLoading(false);\r\n        }).catch(err => {\r\n          setError('Failed to reload data');\r\n          setLoading(false);\r\n        });\r\n      }}>\r\n        <span className=\"refresh-icon\">↻</span>\r\n      </button>\r\n    </div>\r\n  );\r\n  \r\n  // Adding CSS for the chart and filter\r\n  const chartStyles = `\r\n    .axis path,\r\n    .axis line {\r\n      stroke: #cccccc;\r\n    }\r\n    \r\n    .axis text {\r\n      fill: #666666;\r\n    }\r\n    \r\n    .bar-label {\r\n      fill: #333333;\r\n      font-size: 12px;\r\n    }\r\n    \r\n    .hover-label {\r\n      fill: #333333;\r\n      font-size: 14px;\r\n    }\r\n    \r\n    .axis-label {\r\n      fill: #555555;\r\n      font-size: 13px;\r\n    }\r\n    \r\n    .chart-actions {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n      margin-bottom: 15px;\r\n    }\r\n    \r\n    .filter-select {\r\n      padding: 8px 12px;\r\n      border-radius: 4px;\r\n      border: 1px solid #ccc;\r\n      background-color: white;\r\n      font-size: 14px;\r\n      min-width: 160px;\r\n      margin-right: 10px;\r\n    }\r\n    \r\n    .sector-filter {\r\n      display: flex;\r\n      align-items: center;\r\n    }\r\n  `;\r\n  \r\n  return (\r\n    <CardContainer title=\"Sector Distribution\" actionButtons={actionButtons}>\r\n      <style>{chartStyles}</style>\r\n      <div ref={containerRef} className=\"chart-container\" style={{ width: '100%', height: fullSize ? '450px' : '350px' }}>\r\n        {loading ? (\r\n          <Loader message=\"Loading sector data...\" />\r\n        ) : error ? (\r\n          <NoDataMessage message={error} icon=\"⚠️\" />\r\n        ) : !data || data.length === 0 ? (\r\n          <NoDataMessage message=\"No sector data available\" />\r\n        ) : (\r\n          <svg ref={svgRef} className=\"chart-svg\"></svg>\r\n        )}\r\n      </div>\r\n    </CardContainer>\r\n  );\r\n};\r\n\r\nexport default SectorChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}