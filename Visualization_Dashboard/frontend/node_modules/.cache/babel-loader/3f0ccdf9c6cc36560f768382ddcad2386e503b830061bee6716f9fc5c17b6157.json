{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\OneDrive\\\\Desktop\\\\new\\\\frontend\\\\src\\\\components\\\\charts\\\\CountryMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport * as topojson from 'topojson-client';\nimport api from '../../services/api';\nimport CardContainer from '../common/CardContainer';\nimport Loader from '../common/Loader';\nimport NoDataMessage from '../common/NoDataMessage';\nimport { formatNumber, createTooltip, debounce } from '../../utils/helpers';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CountryMap = ({\n  metric = 'intensity',\n  fullSize = false,\n  filters = {},\n  onCountrySelect = () => {}\n}) => {\n  _s();\n  const [data, setData] = useState([]);\n  const [worldData, setWorldData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedMetric, setSelectedMetric] = useState(metric);\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  const svgRef = useRef(null);\n  const containerRef = useRef(null);\n  const tooltipRef = useRef(null);\n\n  // Fetch data with the current filters\n  const fetchData = useCallback(async () => {\n    try {\n      setLoading(true);\n\n      // Apply all filters including any country filter when fetching data\n      const currentFilters = {\n        ...filters\n      };\n      const [topNData, worldTopoJSON] = await Promise.all([api.getTopN(selectedMetric, 'country', 200, currentFilters), fetch('https://unpkg.com/world-atlas@2.0.2/countries-110m.json').then(res => res.json())]);\n      setData(topNData);\n      setWorldData(worldTopoJSON);\n      setLoading(false);\n    } catch (err) {\n      console.error('Error fetching map data:', err);\n      setError('Failed to load map data');\n      setLoading(false);\n    }\n  }, [selectedMetric, filters]);\n\n  // Initial data load\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  // Draw/redraw map when data changes\n  useEffect(() => {\n    if (data.length > 0 && worldData && !loading) {\n      drawMap();\n\n      // Add resize listener\n      const handleResize = debounce(() => {\n        drawMap();\n      }, 300);\n      window.addEventListener('resize', handleResize);\n      return () => window.removeEventListener('resize', handleResize);\n    }\n  }, [data, worldData, loading, selectedCountry]);\n  const handleMetricChange = newMetric => {\n    setSelectedMetric(newMetric);\n  };\n  const getCountryDataDetails = countryName => {\n    if (!countryName) return null;\n    const countryData = data.find(d => d.name.toLowerCase() === countryName.toLowerCase());\n    if (!countryData) return null;\n\n    // Return formatted data for display\n    return {\n      name: countryName,\n      [`${selectedMetric}`]: formatNumber(countryData.value),\n      count: countryData.count,\n      // Include additional data if available (can be expanded later)\n      filters: Object.entries(filters).filter(([key, value]) => value && value !== 'all').map(([key, value]) => `${key}: ${value}`)\n    };\n  };\n  const drawMap = () => {\n    if (!svgRef.current || !containerRef.current || !worldData) return;\n\n    // Clear previous chart\n    d3.select(svgRef.current).selectAll('*').remove();\n\n    // Set dimensions\n    const containerWidth = containerRef.current.clientWidth;\n    const containerHeight = fullSize ? Math.min(600, containerWidth * 0.6) : Math.min(500, containerWidth * 0.6);\n    const margin = {\n      top: 20,\n      right: 20,\n      bottom: 20,\n      left: 20\n    };\n    const width = containerWidth - margin.left - margin.right;\n    const height = containerHeight - margin.top - margin.bottom;\n\n    // Create SVG\n    const svg = d3.select(svgRef.current).attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n\n    // Create tooltip if not already created\n    if (!tooltipRef.current) {\n      tooltipRef.current = createTooltip(d3);\n    }\n\n    // Create map projection\n    const projection = d3.geoNaturalEarth1().fitSize([width, height], topojson.feature(worldData, worldData.objects.countries));\n\n    // Create path generator\n    const path = d3.geoPath().projection(projection);\n\n    // Extract countries data\n    const countries = topojson.feature(worldData, worldData.objects.countries).features;\n\n    // Add a background rect for the ocean\n    svg.append(\"rect\").attr(\"width\", width).attr(\"height\", height).attr(\"fill\", \"#E6F2F5\").attr(\"class\", \"ocean-background\");\n\n    // Create color scale based on metric value\n    const colorScale = d3.scaleSequential(selectedMetric === 'intensity' ? d3.interpolateBlues : selectedMetric === 'likelihood' ? d3.interpolateGreens : d3.interpolateOranges).domain([0, d3.max(data, d => d.value) || 100]);\n\n    // Create a map for faster data lookup\n    const dataByCountry = {};\n    data.forEach(d => {\n      dataByCountry[d.name.toLowerCase()] = d;\n    });\n\n    // Function to check if a country should be highlighted based on filters\n    const shouldHighlight = countryName => {\n      // If we have a country filter and it's not this country, don't highlight\n      if (filters.country && filters.country !== 'all' && filters.country.toLowerCase() !== countryName.toLowerCase()) {\n        return false;\n      }\n      return true;\n    };\n\n    // Draw countries\n    svg.selectAll('.country').data(countries).enter().append('path').attr('class', d => {\n      const isHighlighted = shouldHighlight(d.properties.name);\n      return `country ${isHighlighted ? 'highlight' : ''} ${selectedCountry && d.properties.name.toLowerCase() === selectedCountry.toLowerCase() ? 'selected' : ''}`;\n    }).attr('d', path).attr('fill', d => {\n      const countryData = dataByCountry[d.properties.name.toLowerCase()];\n      return countryData ? colorScale(countryData.value) : '#e0e0e0';\n    }).attr('stroke', d => {\n      // Highlight the stroke if it's the selected country\n      if (selectedCountry && d.properties.name.toLowerCase() === selectedCountry.toLowerCase()) {\n        return '#333';\n      }\n      return '#fff';\n    }).attr('stroke-width', d => {\n      // Thicker stroke for selected country\n      if (selectedCountry && d.properties.name.toLowerCase() === selectedCountry.toLowerCase()) {\n        return 2;\n      }\n      return 0.5;\n    }).attr('opacity', d => {\n      // If we have a country filter applied, reduce opacity for non-matching countries\n      if (filters.country && filters.country !== 'all' && filters.country.toLowerCase() !== d.properties.name.toLowerCase()) {\n        return 0.4;\n      }\n      return 1;\n    }).on('mouseover', function (event, d) {\n      const countryData = dataByCountry[d.properties.name.toLowerCase()];\n      const countryDetails = getCountryDataDetails(d.properties.name);\n      d3.select(this).transition().duration(200).attr('stroke', '#333').attr('stroke-width', 1.5).attr('filter', 'drop-shadow(0px 0px 5px rgba(0,0,0,0.3))');\n\n      // Enhanced tooltip with more details\n      tooltipRef.current.style('opacity', 1).html(`\n            <div class=\"tooltip-header\">${d.properties.name}</div>\n            ${countryData ? `<div class=\"tooltip-content\">\n                  <strong>${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)}:</strong> ${formatNumber(countryData.value)}<br>\n                  <strong>Count:</strong> ${countryData.count} records\n                  ${countryDetails && countryDetails.filters.length > 0 ? `<hr/><div class=\"applied-filters\">\n                        <strong>Applied Filters:</strong><br>\n                        ${countryDetails.filters.map(f => `- ${f}`).join('<br>')}\n                      </div>` : ''}\n                </div>` : '<div class=\"tooltip-content\"><i>No data available</i></div>'}\n          `).style('left', event.pageX + 10 + 'px').style('top', event.pageY - 20 + 'px');\n    }).on('mouseout', function () {\n      d3.select(this).transition().duration(200).attr('stroke', d => {\n        // Keep the selected country highlighted\n        if (selectedCountry && d.properties.name.toLowerCase() === selectedCountry.toLowerCase()) {\n          return '#333';\n        }\n        return '#fff';\n      }).attr('stroke-width', d => {\n        // Keep the selected country with thicker stroke\n        if (selectedCountry && d.properties.name.toLowerCase() === selectedCountry.toLowerCase()) {\n          return 2;\n        }\n        return 0.5;\n      }).attr('filter', null);\n      tooltipRef.current.transition().duration(200).style('opacity', 0);\n    }).on('click', function (event, d) {\n      const countryName = d.properties.name;\n\n      // Highlight selected country\n      svg.selectAll('.country').classed('selected', false);\n      d3.select(this).classed('selected', true);\n\n      // Update selected country state\n      setSelectedCountry(countryName);\n\n      // Call the callback with country details\n      onCountrySelect(countryName);\n    });\n\n    // Add a gentle zoom effect to the map\n    const zoom = d3.zoom().scaleExtent([1, 8]).on('zoom', event => {\n      svg.selectAll('path').attr('transform', event.transform);\n    });\n    d3.select(svgRef.current).call(zoom);\n\n    // Add legend\n    const legendWidth = 200;\n    const legendHeight = 15;\n    const legendPosition = {\n      x: width - legendWidth - 10,\n      y: height - 40\n    };\n\n    // Create gradient for legend\n    const defs = svg.append('defs');\n    const linearGradient = defs.append('linearGradient').attr('id', `map-color-gradient-${selectedMetric}`).attr('x1', '0%').attr('y1', '0%').attr('x2', '100%').attr('y2', '0%');\n    linearGradient.selectAll('stop').data([{\n      offset: '0%',\n      color: colorScale(0)\n    }, {\n      offset: '100%',\n      color: colorScale(d3.max(data, d => d.value) || 100)\n    }]).enter().append('stop').attr('offset', d => d.offset).attr('stop-color', d => d.color);\n\n    // Draw legend rectangle with rounded corners\n    svg.append('rect').attr('x', legendPosition.x).attr('y', legendPosition.y).attr('width', legendWidth).attr('height', legendHeight).attr('rx', 4).attr('ry', 4).style('fill', `url(#map-color-gradient-${selectedMetric})`).style('stroke', '#ccc').style('stroke-width', 0.5);\n\n    // Add legend labels\n    svg.append('text').attr('x', legendPosition.x).attr('y', legendPosition.y - 5).attr('fill', 'var(--dark-text)').attr('text-anchor', 'start').attr('font-size', '10px').text('Low');\n    svg.append('text').attr('x', legendPosition.x + legendWidth).attr('y', legendPosition.y - 5).attr('fill', 'var(--dark-text)').attr('text-anchor', 'end').attr('font-size', '10px').text('High');\n    svg.append('text').attr('x', legendPosition.x + legendWidth / 2).attr('y', legendPosition.y + 30).attr('fill', 'var(--dark-text)').attr('text-anchor', 'middle').attr('font-size', '12px').text(`${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)} by Country`);\n\n    // Add a subtle pulsing animation to countries with highest values\n    // or to specifically filtered countries\n    const topCountries = filters.country && filters.country !== 'all' ? [filters.country.toLowerCase()] : data.sort((a, b) => b.value - a.value).slice(0, 5).map(d => d.name.toLowerCase());\n    svg.selectAll('.country').filter(d => topCountries.includes(d.properties.name.toLowerCase())).each(function () {\n      const element = d3.select(this);\n\n      // Create pulsing effect\n      function repeat() {\n        element.transition().duration(1000).attr('stroke-width', 2).attr('stroke-opacity', 1).transition().duration(1000).attr('stroke-width', 0.5).attr('stroke-opacity', 0.7).on('end', repeat);\n      }\n      repeat();\n    });\n\n    // Add a filter status indicator if country filter is applied\n    if (filters.country && filters.country !== 'all') {\n      svg.append('text').attr('x', 10).attr('y', 20).attr('fill', '#333').attr('font-size', '12px').attr('font-weight', 'bold').text(`Filtered by country: ${filters.country}`);\n    }\n  };\n  const getColorClass = () => {\n    switch (selectedMetric) {\n      case 'intensity':\n        return 'intensity-theme';\n      case 'likelihood':\n        return 'likelihood-theme';\n      case 'relevance':\n        return 'relevance-theme';\n      default:\n        return 'intensity-theme';\n    }\n  };\n  const renderActionButtons = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-actions\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: `chart-action-btn ${selectedMetric === 'intensity' ? 'active' : ''}`,\n      onClick: () => handleMetricChange('intensity'),\n      children: \"Intensity\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `chart-action-btn ${selectedMetric === 'likelihood' ? 'active' : ''}`,\n      onClick: () => handleMetricChange('likelihood'),\n      children: \"Likelihood\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `chart-action-btn ${selectedMetric === 'relevance' ? 'active' : ''}`,\n      onClick: () => handleMetricChange('relevance'),\n      children: \"Relevance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 7\n    }, this), selectedCountry && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"chart-action-btn clear-selection\",\n      onClick: () => {\n        setSelectedCountry(null);\n        onCountrySelect(null);\n      },\n      children: \"Clear Selection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 395,\n    columnNumber: 5\n  }, this);\n\n  // Extra info to show when a country is selected\n  const renderCountryDetails = () => {\n    if (!selectedCountry) return null;\n    const countryDetails = getCountryDataDetails(selectedCountry);\n    if (!countryDetails) return null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"country-details-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: countryDetails.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"country-stats\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: [selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1), \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-value\",\n            children: countryDetails[selectedMetric]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-label\",\n            children: \"Records:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 444,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat-value\",\n            children: countryDetails.count\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 9\n      }, this), countryDetails.filters.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"applied-filters\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Applied Filters:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: countryDetails.filters.map((filter, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: filter\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(CardContainer, {\n    title: `Global ${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)} Distribution`,\n    actionButtons: renderActionButtons(),\n    className: getColorClass(),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: containerRef,\n      style: {\n        width: '100%',\n        minHeight: fullSize ? '600px' : '400px',\n        maxHeight: fullSize ? '800px' : '500px'\n      },\n      className: \"country-map-container\",\n      children: loading ? /*#__PURE__*/_jsxDEV(Loader, {\n        message: \"Loading map data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 11\n      }, this) : error ? /*#__PURE__*/_jsxDEV(NoDataMessage, {\n        message: error,\n        icon: \"\\u26A0\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 11\n      }, this) : data.length === 0 ? /*#__PURE__*/_jsxDEV(NoDataMessage, {\n        message: \"No country data available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          ref: svgRef,\n          className: `chart-svg country-map-svg ${getColorClass()}`,\n          style: {\n            borderRadius: '10px',\n            boxShadow: '0 4px 12px rgba(0, 0, 0, 0.05)'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 13\n        }, this), selectedCountry && renderCountryDetails()]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 7\n    }, this), !loading && data.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-instructions\",\n      children: [/*#__PURE__*/_jsxDEV(\"small\", {\n        children: \"Tip: Scroll to zoom, drag to pan, and click on countries for details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 11\n      }, this), Object.keys(filters).some(key => filters[key] && filters[key] !== 'all') && /*#__PURE__*/_jsxDEV(\"small\", {\n        className: \"filters-applied-note\",\n        children: \" \\u2022 Map filtered according to current dashboard filters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 463,\n    columnNumber: 5\n  }, this);\n};\n_s(CountryMap, \"LkwtEKhEeFt9NKV/4aw4mTjc7MY=\");\n_c = CountryMap;\nexport default CountryMap;\nvar _c;\n$RefreshReg$(_c, \"CountryMap\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","d3","topojson","api","CardContainer","Loader","NoDataMessage","formatNumber","createTooltip","debounce","jsxDEV","_jsxDEV","Fragment","_Fragment","CountryMap","metric","fullSize","filters","onCountrySelect","_s","data","setData","worldData","setWorldData","loading","setLoading","error","setError","selectedMetric","setSelectedMetric","selectedCountry","setSelectedCountry","svgRef","containerRef","tooltipRef","fetchData","currentFilters","topNData","worldTopoJSON","Promise","all","getTopN","fetch","then","res","json","err","console","length","drawMap","handleResize","window","addEventListener","removeEventListener","handleMetricChange","newMetric","getCountryDataDetails","countryName","countryData","find","d","name","toLowerCase","value","count","Object","entries","filter","key","map","current","select","selectAll","remove","containerWidth","clientWidth","containerHeight","Math","min","margin","top","right","bottom","left","width","height","svg","attr","append","projection","geoNaturalEarth1","fitSize","feature","objects","countries","path","geoPath","features","colorScale","scaleSequential","interpolateBlues","interpolateGreens","interpolateOranges","domain","max","dataByCountry","forEach","shouldHighlight","country","enter","isHighlighted","properties","on","event","countryDetails","transition","duration","style","html","charAt","toUpperCase","slice","f","join","pageX","pageY","classed","zoom","scaleExtent","transform","call","legendWidth","legendHeight","legendPosition","x","y","defs","linearGradient","offset","color","text","topCountries","sort","a","b","includes","each","element","repeat","getColorClass","renderActionButtons","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","renderCountryDetails","index","title","actionButtons","ref","minHeight","maxHeight","message","icon","borderRadius","boxShadow","keys","some","_c","$RefreshReg$"],"sources":["C:/Users/Dell/OneDrive/Desktop/new/frontend/src/components/charts/CountryMap.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport * as d3 from 'd3';\r\nimport * as topojson from 'topojson-client';\r\nimport api from '../../services/api';\r\nimport CardContainer from '../common/CardContainer';\r\nimport Loader from '../common/Loader';\r\nimport NoDataMessage from '../common/NoDataMessage';\r\nimport { formatNumber, createTooltip, debounce } from '../../utils/helpers';\r\n\r\nconst CountryMap = ({ \r\n  metric = 'intensity', \r\n  fullSize = false,\r\n  filters = {},\r\n  onCountrySelect = () => {} \r\n}) => {\r\n  const [data, setData] = useState([]);\r\n  const [worldData, setWorldData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [selectedMetric, setSelectedMetric] = useState(metric);\r\n  const [selectedCountry, setSelectedCountry] = useState(null);\r\n  const svgRef = useRef(null);\r\n  const containerRef = useRef(null);\r\n  const tooltipRef = useRef(null);\r\n  \r\n  // Fetch data with the current filters\r\n  const fetchData = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Apply all filters including any country filter when fetching data\r\n      const currentFilters = { ...filters };\r\n      \r\n      const [topNData, worldTopoJSON] = await Promise.all([\r\n        api.getTopN(selectedMetric, 'country', 200, currentFilters),\r\n        fetch('https://unpkg.com/world-atlas@2.0.2/countries-110m.json').then(res => res.json())\r\n      ]);\r\n      \r\n      setData(topNData);\r\n      setWorldData(worldTopoJSON);\r\n      setLoading(false);\r\n    } catch (err) {\r\n      console.error('Error fetching map data:', err);\r\n      setError('Failed to load map data');\r\n      setLoading(false);\r\n    }\r\n  }, [selectedMetric, filters]);\r\n\r\n  // Initial data load\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [fetchData]);\r\n\r\n  // Draw/redraw map when data changes\r\n  useEffect(() => {\r\n    if (data.length > 0 && worldData && !loading) {\r\n      drawMap();\r\n      \r\n      // Add resize listener\r\n      const handleResize = debounce(() => {\r\n        drawMap();\r\n      }, 300);\r\n      \r\n      window.addEventListener('resize', handleResize);\r\n      return () => window.removeEventListener('resize', handleResize);\r\n    }\r\n  }, [data, worldData, loading, selectedCountry]);\r\n\r\n  const handleMetricChange = (newMetric) => {\r\n    setSelectedMetric(newMetric);\r\n  };\r\n\r\n  const getCountryDataDetails = (countryName) => {\r\n    if (!countryName) return null;\r\n    \r\n    const countryData = data.find(d => \r\n      d.name.toLowerCase() === countryName.toLowerCase()\r\n    );\r\n    \r\n    if (!countryData) return null;\r\n    \r\n    // Return formatted data for display\r\n    return {\r\n      name: countryName,\r\n      [`${selectedMetric}`]: formatNumber(countryData.value),\r\n      count: countryData.count,\r\n      // Include additional data if available (can be expanded later)\r\n      filters: Object.entries(filters)\r\n        .filter(([key, value]) => value && value !== 'all')\r\n        .map(([key, value]) => `${key}: ${value}`)\r\n    };\r\n  };\r\n\r\n  const drawMap = () => {\r\n    if (!svgRef.current || !containerRef.current || !worldData) return;\r\n\r\n    // Clear previous chart\r\n    d3.select(svgRef.current).selectAll('*').remove();\r\n\r\n    // Set dimensions\r\n    const containerWidth = containerRef.current.clientWidth;\r\n    const containerHeight = fullSize ? Math.min(600, containerWidth * 0.6) : Math.min(500, containerWidth * 0.6);\r\n    const margin = { top: 20, right: 20, bottom: 20, left: 20 };\r\n    const width = containerWidth - margin.left - margin.right;\r\n    const height = containerHeight - margin.top - margin.bottom;\r\n\r\n    // Create SVG\r\n    const svg = d3.select(svgRef.current)\r\n      .attr('width', width + margin.left + margin.right)\r\n      .attr('height', height + margin.top + margin.bottom)\r\n      .append('g')\r\n      .attr('transform', `translate(${margin.left},${margin.top})`);\r\n\r\n    // Create tooltip if not already created\r\n    if (!tooltipRef.current) {\r\n      tooltipRef.current = createTooltip(d3);\r\n    }\r\n\r\n    // Create map projection\r\n    const projection = d3.geoNaturalEarth1()\r\n      .fitSize([width, height], topojson.feature(worldData, worldData.objects.countries));\r\n\r\n    // Create path generator\r\n    const path = d3.geoPath().projection(projection);\r\n\r\n    // Extract countries data\r\n    const countries = topojson.feature(worldData, worldData.objects.countries).features;\r\n\r\n    // Add a background rect for the ocean\r\n    svg.append(\"rect\")\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", height)\r\n      .attr(\"fill\", \"#E6F2F5\")\r\n      .attr(\"class\", \"ocean-background\");\r\n\r\n    // Create color scale based on metric value\r\n    const colorScale = d3.scaleSequential(\r\n      selectedMetric === 'intensity' ? d3.interpolateBlues :\r\n      selectedMetric === 'likelihood' ? d3.interpolateGreens :\r\n      d3.interpolateOranges\r\n    ).domain([0, d3.max(data, d => d.value) || 100]);\r\n\r\n    // Create a map for faster data lookup\r\n    const dataByCountry = {};\r\n    data.forEach(d => {\r\n      dataByCountry[d.name.toLowerCase()] = d;\r\n    });\r\n\r\n    // Function to check if a country should be highlighted based on filters\r\n    const shouldHighlight = (countryName) => {\r\n      // If we have a country filter and it's not this country, don't highlight\r\n      if (filters.country && filters.country !== 'all' && \r\n          filters.country.toLowerCase() !== countryName.toLowerCase()) {\r\n        return false;\r\n      }\r\n      return true;\r\n    };\r\n\r\n    // Draw countries\r\n    svg.selectAll('.country')\r\n      .data(countries)\r\n      .enter()\r\n      .append('path')\r\n      .attr('class', d => {\r\n        const isHighlighted = shouldHighlight(d.properties.name);\r\n        return `country ${isHighlighted ? 'highlight' : ''} ${\r\n          selectedCountry && d.properties.name.toLowerCase() === selectedCountry.toLowerCase() ? 'selected' : ''\r\n        }`;\r\n      })\r\n      .attr('d', path)\r\n      .attr('fill', d => {\r\n        const countryData = dataByCountry[d.properties.name.toLowerCase()];\r\n        return countryData ? colorScale(countryData.value) : '#e0e0e0';\r\n      })\r\n      .attr('stroke', d => {\r\n        // Highlight the stroke if it's the selected country\r\n        if (selectedCountry && d.properties.name.toLowerCase() === selectedCountry.toLowerCase()) {\r\n          return '#333';\r\n        }\r\n        return '#fff';\r\n      })\r\n      .attr('stroke-width', d => {\r\n        // Thicker stroke for selected country\r\n        if (selectedCountry && d.properties.name.toLowerCase() === selectedCountry.toLowerCase()) {\r\n          return 2;\r\n        }\r\n        return 0.5;\r\n      })\r\n      .attr('opacity', d => {\r\n        // If we have a country filter applied, reduce opacity for non-matching countries\r\n        if (filters.country && filters.country !== 'all' && \r\n            filters.country.toLowerCase() !== d.properties.name.toLowerCase()) {\r\n          return 0.4;\r\n        }\r\n        return 1;\r\n      })\r\n      .on('mouseover', function(event, d) {\r\n        const countryData = dataByCountry[d.properties.name.toLowerCase()];\r\n        const countryDetails = getCountryDataDetails(d.properties.name);\r\n        \r\n        d3.select(this)\r\n          .transition()\r\n          .duration(200)\r\n          .attr('stroke', '#333')\r\n          .attr('stroke-width', 1.5)\r\n          .attr('filter', 'drop-shadow(0px 0px 5px rgba(0,0,0,0.3))');\r\n        \r\n        // Enhanced tooltip with more details\r\n        tooltipRef.current\r\n          .style('opacity', 1)\r\n          .html(`\r\n            <div class=\"tooltip-header\">${d.properties.name}</div>\r\n            ${countryData \r\n              ? `<div class=\"tooltip-content\">\r\n                  <strong>${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)}:</strong> ${formatNumber(countryData.value)}<br>\r\n                  <strong>Count:</strong> ${countryData.count} records\r\n                  ${countryDetails && countryDetails.filters.length > 0 \r\n                    ? `<hr/><div class=\"applied-filters\">\r\n                        <strong>Applied Filters:</strong><br>\r\n                        ${countryDetails.filters.map(f => `- ${f}`).join('<br>')}\r\n                      </div>` \r\n                    : ''}\r\n                </div>`\r\n              : '<div class=\"tooltip-content\"><i>No data available</i></div>'}\r\n          `)\r\n          .style('left', (event.pageX + 10) + 'px')\r\n          .style('top', (event.pageY - 20) + 'px');\r\n      })\r\n      .on('mouseout', function() {\r\n        d3.select(this)\r\n          .transition()\r\n          .duration(200)\r\n          .attr('stroke', d => {\r\n            // Keep the selected country highlighted\r\n            if (selectedCountry && d.properties.name.toLowerCase() === selectedCountry.toLowerCase()) {\r\n              return '#333';\r\n            }\r\n            return '#fff';\r\n          })\r\n          .attr('stroke-width', d => {\r\n            // Keep the selected country with thicker stroke\r\n            if (selectedCountry && d.properties.name.toLowerCase() === selectedCountry.toLowerCase()) {\r\n              return 2;\r\n            }\r\n            return 0.5;\r\n          })\r\n          .attr('filter', null);\r\n        \r\n        tooltipRef.current\r\n          .transition()\r\n          .duration(200)\r\n          .style('opacity', 0);\r\n      })\r\n      .on('click', function(event, d) {\r\n        const countryName = d.properties.name;\r\n        \r\n        // Highlight selected country\r\n        svg.selectAll('.country').classed('selected', false);\r\n        d3.select(this).classed('selected', true);\r\n        \r\n        // Update selected country state\r\n        setSelectedCountry(countryName);\r\n        \r\n        // Call the callback with country details\r\n        onCountrySelect(countryName);\r\n      });\r\n\r\n    // Add a gentle zoom effect to the map\r\n    const zoom = d3.zoom()\r\n      .scaleExtent([1, 8])\r\n      .on('zoom', (event) => {\r\n        svg.selectAll('path')\r\n          .attr('transform', event.transform);\r\n      });\r\n\r\n    d3.select(svgRef.current)\r\n      .call(zoom);\r\n\r\n    // Add legend\r\n    const legendWidth = 200;\r\n    const legendHeight = 15;\r\n    const legendPosition = {\r\n      x: width - legendWidth - 10,\r\n      y: height - 40\r\n    };\r\n\r\n    // Create gradient for legend\r\n    const defs = svg.append('defs');\r\n    const linearGradient = defs.append('linearGradient')\r\n      .attr('id', `map-color-gradient-${selectedMetric}`)\r\n      .attr('x1', '0%')\r\n      .attr('y1', '0%')\r\n      .attr('x2', '100%')\r\n      .attr('y2', '0%');\r\n\r\n    linearGradient.selectAll('stop')\r\n      .data([\r\n        {offset: '0%', color: colorScale(0)},\r\n        {offset: '100%', color: colorScale(d3.max(data, d => d.value) || 100)}\r\n      ])\r\n      .enter().append('stop')\r\n      .attr('offset', d => d.offset)\r\n      .attr('stop-color', d => d.color);\r\n\r\n    // Draw legend rectangle with rounded corners\r\n    svg.append('rect')\r\n      .attr('x', legendPosition.x)\r\n      .attr('y', legendPosition.y)\r\n      .attr('width', legendWidth)\r\n      .attr('height', legendHeight)\r\n      .attr('rx', 4)\r\n      .attr('ry', 4)\r\n      .style('fill', `url(#map-color-gradient-${selectedMetric})`)\r\n      .style('stroke', '#ccc')\r\n      .style('stroke-width', 0.5);\r\n\r\n    // Add legend labels\r\n    svg.append('text')\r\n      .attr('x', legendPosition.x)\r\n      .attr('y', legendPosition.y - 5)\r\n      .attr('fill', 'var(--dark-text)')\r\n      .attr('text-anchor', 'start')\r\n      .attr('font-size', '10px')\r\n      .text('Low');\r\n\r\n    svg.append('text')\r\n      .attr('x', legendPosition.x + legendWidth)\r\n      .attr('y', legendPosition.y - 5)\r\n      .attr('fill', 'var(--dark-text)')\r\n      .attr('text-anchor', 'end')\r\n      .attr('font-size', '10px')\r\n      .text('High');\r\n\r\n    svg.append('text')\r\n      .attr('x', legendPosition.x + legendWidth / 2)\r\n      .attr('y', legendPosition.y + 30)\r\n      .attr('fill', 'var(--dark-text)')\r\n      .attr('text-anchor', 'middle')\r\n      .attr('font-size', '12px')\r\n      .text(`${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)} by Country`);\r\n      \r\n    // Add a subtle pulsing animation to countries with highest values\r\n    // or to specifically filtered countries\r\n    const topCountries = filters.country && filters.country !== 'all' \r\n      ? [filters.country.toLowerCase()]\r\n      : data\r\n          .sort((a, b) => b.value - a.value)\r\n          .slice(0, 5)\r\n          .map(d => d.name.toLowerCase());\r\n      \r\n    svg.selectAll('.country')\r\n      .filter(d => topCountries.includes(d.properties.name.toLowerCase()))\r\n      .each(function() {\r\n        const element = d3.select(this);\r\n        \r\n        // Create pulsing effect\r\n        function repeat() {\r\n          element\r\n            .transition()\r\n            .duration(1000)\r\n            .attr('stroke-width', 2)\r\n            .attr('stroke-opacity', 1)\r\n            .transition()\r\n            .duration(1000)\r\n            .attr('stroke-width', 0.5)\r\n            .attr('stroke-opacity', 0.7)\r\n            .on('end', repeat);\r\n        }\r\n        \r\n        repeat();\r\n      });\r\n\r\n    // Add a filter status indicator if country filter is applied\r\n    if (filters.country && filters.country !== 'all') {\r\n      svg.append('text')\r\n        .attr('x', 10)\r\n        .attr('y', 20)\r\n        .attr('fill', '#333')\r\n        .attr('font-size', '12px')\r\n        .attr('font-weight', 'bold')\r\n        .text(`Filtered by country: ${filters.country}`);\r\n    }\r\n  };\r\n\r\n  const getColorClass = () => {\r\n    switch(selectedMetric) {\r\n      case 'intensity': return 'intensity-theme';\r\n      case 'likelihood': return 'likelihood-theme';\r\n      case 'relevance': return 'relevance-theme';\r\n      default: return 'intensity-theme';\r\n    }\r\n  };\r\n\r\n  const renderActionButtons = () => (\r\n    <div className=\"chart-actions\">\r\n      <button \r\n        className={`chart-action-btn ${selectedMetric === 'intensity' ? 'active' : ''}`}\r\n        onClick={() => handleMetricChange('intensity')}\r\n      >\r\n        Intensity\r\n      </button>\r\n      <button \r\n        className={`chart-action-btn ${selectedMetric === 'likelihood' ? 'active' : ''}`}\r\n        onClick={() => handleMetricChange('likelihood')}\r\n      >\r\n        Likelihood\r\n      </button>\r\n      <button \r\n        className={`chart-action-btn ${selectedMetric === 'relevance' ? 'active' : ''}`}\r\n        onClick={() => handleMetricChange('relevance')}\r\n      >\r\n        Relevance\r\n      </button>\r\n      {selectedCountry && (\r\n        <button \r\n          className=\"chart-action-btn clear-selection\"\r\n          onClick={() => {\r\n            setSelectedCountry(null);\r\n            onCountrySelect(null);\r\n          }}\r\n        >\r\n          Clear Selection\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  // Extra info to show when a country is selected\r\n  const renderCountryDetails = () => {\r\n    if (!selectedCountry) return null;\r\n    \r\n    const countryDetails = getCountryDataDetails(selectedCountry);\r\n    if (!countryDetails) return null;\r\n    \r\n    return (\r\n      <div className=\"country-details-panel\">\r\n        <h3>{countryDetails.name}</h3>\r\n        <div className=\"country-stats\">\r\n          <div className=\"stat-item\">\r\n            <span className=\"stat-label\">{selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)}:</span>\r\n            <span className=\"stat-value\">{countryDetails[selectedMetric]}</span>\r\n          </div>\r\n          <div className=\"stat-item\">\r\n            <span className=\"stat-label\">Records:</span>\r\n            <span className=\"stat-value\">{countryDetails.count}</span>\r\n          </div>\r\n        </div>\r\n        {countryDetails.filters.length > 0 && (\r\n          <div className=\"applied-filters\">\r\n            <h4>Applied Filters:</h4>\r\n            <ul>\r\n              {countryDetails.filters.map((filter, index) => (\r\n                <li key={index}>{filter}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <CardContainer \r\n      title={`Global ${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)} Distribution`}\r\n      actionButtons={renderActionButtons()}\r\n      className={getColorClass()}\r\n    >\r\n      <div \r\n        ref={containerRef} \r\n        style={{ \r\n          width: '100%', \r\n          minHeight: fullSize ? '600px' : '400px',\r\n          maxHeight: fullSize ? '800px' : '500px'\r\n        }}\r\n        className=\"country-map-container\"\r\n      >\r\n        {loading ? (\r\n          <Loader message=\"Loading map data...\" />\r\n        ) : error ? (\r\n          <NoDataMessage message={error} icon=\"⚠️\" />\r\n        ) : data.length === 0 ? (\r\n          <NoDataMessage message=\"No country data available\" />\r\n        ) : (\r\n          <>\r\n            <svg \r\n              ref={svgRef} \r\n              className={`chart-svg country-map-svg ${getColorClass()}`}\r\n              style={{\r\n                borderRadius: '10px',\r\n                boxShadow: '0 4px 12px rgba(0, 0, 0, 0.05)'\r\n              }}\r\n            ></svg>\r\n            {selectedCountry && renderCountryDetails()}\r\n          </>\r\n        )}\r\n      </div>\r\n      \r\n      {!loading && data.length > 0 && (\r\n        <div className=\"map-instructions\">\r\n          <small>Tip: Scroll to zoom, drag to pan, and click on countries for details</small>\r\n          {Object.keys(filters).some(key => filters[key] && filters[key] !== 'all') && (\r\n            <small className=\"filters-applied-note\"> • Map filtered according to current dashboard filters</small>\r\n          )}\r\n        </div>\r\n      )}\r\n    </CardContainer>\r\n  );\r\n};\r\n\r\nexport default CountryMap;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEC,WAAW,QAAQ,OAAO;AACvE,OAAO,KAAKC,EAAE,MAAM,IAAI;AACxB,OAAO,KAAKC,QAAQ,MAAM,iBAAiB;AAC3C,OAAOC,GAAG,MAAM,oBAAoB;AACpC,OAAOC,aAAa,MAAM,yBAAyB;AACnD,OAAOC,MAAM,MAAM,kBAAkB;AACrC,OAAOC,aAAa,MAAM,yBAAyB;AACnD,SAASC,YAAY,EAAEC,aAAa,EAAEC,QAAQ,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE5E,MAAMC,UAAU,GAAGA,CAAC;EAClBC,MAAM,GAAG,WAAW;EACpBC,QAAQ,GAAG,KAAK;EAChBC,OAAO,GAAG,CAAC,CAAC;EACZC,eAAe,GAAGA,CAAA,KAAM,CAAC;AAC3B,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACyB,SAAS,EAAEC,YAAY,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAAC2B,OAAO,EAAEC,UAAU,CAAC,GAAG5B,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAAC6B,KAAK,EAAEC,QAAQ,CAAC,GAAG9B,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAAC+B,cAAc,EAAEC,iBAAiB,CAAC,GAAGhC,QAAQ,CAACkB,MAAM,CAAC;EAC5D,MAAM,CAACe,eAAe,EAAEC,kBAAkB,CAAC,GAAGlC,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAMmC,MAAM,GAAGjC,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAMkC,YAAY,GAAGlC,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMmC,UAAU,GAAGnC,MAAM,CAAC,IAAI,CAAC;;EAE/B;EACA,MAAMoC,SAAS,GAAGnC,WAAW,CAAC,YAAY;IACxC,IAAI;MACFyB,UAAU,CAAC,IAAI,CAAC;;MAEhB;MACA,MAAMW,cAAc,GAAG;QAAE,GAAGnB;MAAQ,CAAC;MAErC,MAAM,CAACoB,QAAQ,EAAEC,aAAa,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAClDrC,GAAG,CAACsC,OAAO,CAACb,cAAc,EAAE,SAAS,EAAE,GAAG,EAAEQ,cAAc,CAAC,EAC3DM,KAAK,CAAC,yDAAyD,CAAC,CAACC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzF,CAAC;MAEFxB,OAAO,CAACgB,QAAQ,CAAC;MACjBd,YAAY,CAACe,aAAa,CAAC;MAC3Bb,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC,OAAOqB,GAAG,EAAE;MACZC,OAAO,CAACrB,KAAK,CAAC,0BAA0B,EAAEoB,GAAG,CAAC;MAC9CnB,QAAQ,CAAC,yBAAyB,CAAC;MACnCF,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,CAACG,cAAc,EAAEX,OAAO,CAAC,CAAC;;EAE7B;EACAnB,SAAS,CAAC,MAAM;IACdqC,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;;EAEf;EACArC,SAAS,CAAC,MAAM;IACd,IAAIsB,IAAI,CAAC4B,MAAM,GAAG,CAAC,IAAI1B,SAAS,IAAI,CAACE,OAAO,EAAE;MAC5CyB,OAAO,CAAC,CAAC;;MAET;MACA,MAAMC,YAAY,GAAGzC,QAAQ,CAAC,MAAM;QAClCwC,OAAO,CAAC,CAAC;MACX,CAAC,EAAE,GAAG,CAAC;MAEPE,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAEF,YAAY,CAAC;MAC/C,OAAO,MAAMC,MAAM,CAACE,mBAAmB,CAAC,QAAQ,EAAEH,YAAY,CAAC;IACjE;EACF,CAAC,EAAE,CAAC9B,IAAI,EAAEE,SAAS,EAAEE,OAAO,EAAEM,eAAe,CAAC,CAAC;EAE/C,MAAMwB,kBAAkB,GAAIC,SAAS,IAAK;IACxC1B,iBAAiB,CAAC0B,SAAS,CAAC;EAC9B,CAAC;EAED,MAAMC,qBAAqB,GAAIC,WAAW,IAAK;IAC7C,IAAI,CAACA,WAAW,EAAE,OAAO,IAAI;IAE7B,MAAMC,WAAW,GAAGtC,IAAI,CAACuC,IAAI,CAACC,CAAC,IAC7BA,CAAC,CAACC,IAAI,CAACC,WAAW,CAAC,CAAC,KAAKL,WAAW,CAACK,WAAW,CAAC,CACnD,CAAC;IAED,IAAI,CAACJ,WAAW,EAAE,OAAO,IAAI;;IAE7B;IACA,OAAO;MACLG,IAAI,EAAEJ,WAAW;MACjB,CAAC,GAAG7B,cAAc,EAAE,GAAGrB,YAAY,CAACmD,WAAW,CAACK,KAAK,CAAC;MACtDC,KAAK,EAAEN,WAAW,CAACM,KAAK;MACxB;MACA/C,OAAO,EAAEgD,MAAM,CAACC,OAAO,CAACjD,OAAO,CAAC,CAC7BkD,MAAM,CAAC,CAAC,CAACC,GAAG,EAAEL,KAAK,CAAC,KAAKA,KAAK,IAAIA,KAAK,KAAK,KAAK,CAAC,CAClDM,GAAG,CAAC,CAAC,CAACD,GAAG,EAAEL,KAAK,CAAC,KAAK,GAAGK,GAAG,KAAKL,KAAK,EAAE;IAC7C,CAAC;EACH,CAAC;EAED,MAAMd,OAAO,GAAGA,CAAA,KAAM;IACpB,IAAI,CAACjB,MAAM,CAACsC,OAAO,IAAI,CAACrC,YAAY,CAACqC,OAAO,IAAI,CAAChD,SAAS,EAAE;;IAE5D;IACArB,EAAE,CAACsE,MAAM,CAACvC,MAAM,CAACsC,OAAO,CAAC,CAACE,SAAS,CAAC,GAAG,CAAC,CAACC,MAAM,CAAC,CAAC;;IAEjD;IACA,MAAMC,cAAc,GAAGzC,YAAY,CAACqC,OAAO,CAACK,WAAW;IACvD,MAAMC,eAAe,GAAG5D,QAAQ,GAAG6D,IAAI,CAACC,GAAG,CAAC,GAAG,EAAEJ,cAAc,GAAG,GAAG,CAAC,GAAGG,IAAI,CAACC,GAAG,CAAC,GAAG,EAAEJ,cAAc,GAAG,GAAG,CAAC;IAC5G,MAAMK,MAAM,GAAG;MAAEC,GAAG,EAAE,EAAE;MAAEC,KAAK,EAAE,EAAE;MAAEC,MAAM,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAG,CAAC;IAC3D,MAAMC,KAAK,GAAGV,cAAc,GAAGK,MAAM,CAACI,IAAI,GAAGJ,MAAM,CAACE,KAAK;IACzD,MAAMI,MAAM,GAAGT,eAAe,GAAGG,MAAM,CAACC,GAAG,GAAGD,MAAM,CAACG,MAAM;;IAE3D;IACA,MAAMI,GAAG,GAAGrF,EAAE,CAACsE,MAAM,CAACvC,MAAM,CAACsC,OAAO,CAAC,CAClCiB,IAAI,CAAC,OAAO,EAAEH,KAAK,GAAGL,MAAM,CAACI,IAAI,GAAGJ,MAAM,CAACE,KAAK,CAAC,CACjDM,IAAI,CAAC,QAAQ,EAAEF,MAAM,GAAGN,MAAM,CAACC,GAAG,GAAGD,MAAM,CAACG,MAAM,CAAC,CACnDM,MAAM,CAAC,GAAG,CAAC,CACXD,IAAI,CAAC,WAAW,EAAE,aAAaR,MAAM,CAACI,IAAI,IAAIJ,MAAM,CAACC,GAAG,GAAG,CAAC;;IAE/D;IACA,IAAI,CAAC9C,UAAU,CAACoC,OAAO,EAAE;MACvBpC,UAAU,CAACoC,OAAO,GAAG9D,aAAa,CAACP,EAAE,CAAC;IACxC;;IAEA;IACA,MAAMwF,UAAU,GAAGxF,EAAE,CAACyF,gBAAgB,CAAC,CAAC,CACrCC,OAAO,CAAC,CAACP,KAAK,EAAEC,MAAM,CAAC,EAAEnF,QAAQ,CAAC0F,OAAO,CAACtE,SAAS,EAAEA,SAAS,CAACuE,OAAO,CAACC,SAAS,CAAC,CAAC;;IAErF;IACA,MAAMC,IAAI,GAAG9F,EAAE,CAAC+F,OAAO,CAAC,CAAC,CAACP,UAAU,CAACA,UAAU,CAAC;;IAEhD;IACA,MAAMK,SAAS,GAAG5F,QAAQ,CAAC0F,OAAO,CAACtE,SAAS,EAAEA,SAAS,CAACuE,OAAO,CAACC,SAAS,CAAC,CAACG,QAAQ;;IAEnF;IACAX,GAAG,CAACE,MAAM,CAAC,MAAM,CAAC,CACfD,IAAI,CAAC,OAAO,EAAEH,KAAK,CAAC,CACpBG,IAAI,CAAC,QAAQ,EAAEF,MAAM,CAAC,CACtBE,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,CACvBA,IAAI,CAAC,OAAO,EAAE,kBAAkB,CAAC;;IAEpC;IACA,MAAMW,UAAU,GAAGjG,EAAE,CAACkG,eAAe,CACnCvE,cAAc,KAAK,WAAW,GAAG3B,EAAE,CAACmG,gBAAgB,GACpDxE,cAAc,KAAK,YAAY,GAAG3B,EAAE,CAACoG,iBAAiB,GACtDpG,EAAE,CAACqG,kBACL,CAAC,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEtG,EAAE,CAACuG,GAAG,CAACpF,IAAI,EAAEwC,CAAC,IAAIA,CAAC,CAACG,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC;;IAEhD;IACA,MAAM0C,aAAa,GAAG,CAAC,CAAC;IACxBrF,IAAI,CAACsF,OAAO,CAAC9C,CAAC,IAAI;MAChB6C,aAAa,CAAC7C,CAAC,CAACC,IAAI,CAACC,WAAW,CAAC,CAAC,CAAC,GAAGF,CAAC;IACzC,CAAC,CAAC;;IAEF;IACA,MAAM+C,eAAe,GAAIlD,WAAW,IAAK;MACvC;MACA,IAAIxC,OAAO,CAAC2F,OAAO,IAAI3F,OAAO,CAAC2F,OAAO,KAAK,KAAK,IAC5C3F,OAAO,CAAC2F,OAAO,CAAC9C,WAAW,CAAC,CAAC,KAAKL,WAAW,CAACK,WAAW,CAAC,CAAC,EAAE;QAC/D,OAAO,KAAK;MACd;MACA,OAAO,IAAI;IACb,CAAC;;IAED;IACAwB,GAAG,CAACd,SAAS,CAAC,UAAU,CAAC,CACtBpD,IAAI,CAAC0E,SAAS,CAAC,CACfe,KAAK,CAAC,CAAC,CACPrB,MAAM,CAAC,MAAM,CAAC,CACdD,IAAI,CAAC,OAAO,EAAE3B,CAAC,IAAI;MAClB,MAAMkD,aAAa,GAAGH,eAAe,CAAC/C,CAAC,CAACmD,UAAU,CAAClD,IAAI,CAAC;MACxD,OAAO,WAAWiD,aAAa,GAAG,WAAW,GAAG,EAAE,IAChDhF,eAAe,IAAI8B,CAAC,CAACmD,UAAU,CAAClD,IAAI,CAACC,WAAW,CAAC,CAAC,KAAKhC,eAAe,CAACgC,WAAW,CAAC,CAAC,GAAG,UAAU,GAAG,EAAE,EACtG;IACJ,CAAC,CAAC,CACDyB,IAAI,CAAC,GAAG,EAAEQ,IAAI,CAAC,CACfR,IAAI,CAAC,MAAM,EAAE3B,CAAC,IAAI;MACjB,MAAMF,WAAW,GAAG+C,aAAa,CAAC7C,CAAC,CAACmD,UAAU,CAAClD,IAAI,CAACC,WAAW,CAAC,CAAC,CAAC;MAClE,OAAOJ,WAAW,GAAGwC,UAAU,CAACxC,WAAW,CAACK,KAAK,CAAC,GAAG,SAAS;IAChE,CAAC,CAAC,CACDwB,IAAI,CAAC,QAAQ,EAAE3B,CAAC,IAAI;MACnB;MACA,IAAI9B,eAAe,IAAI8B,CAAC,CAACmD,UAAU,CAAClD,IAAI,CAACC,WAAW,CAAC,CAAC,KAAKhC,eAAe,CAACgC,WAAW,CAAC,CAAC,EAAE;QACxF,OAAO,MAAM;MACf;MACA,OAAO,MAAM;IACf,CAAC,CAAC,CACDyB,IAAI,CAAC,cAAc,EAAE3B,CAAC,IAAI;MACzB;MACA,IAAI9B,eAAe,IAAI8B,CAAC,CAACmD,UAAU,CAAClD,IAAI,CAACC,WAAW,CAAC,CAAC,KAAKhC,eAAe,CAACgC,WAAW,CAAC,CAAC,EAAE;QACxF,OAAO,CAAC;MACV;MACA,OAAO,GAAG;IACZ,CAAC,CAAC,CACDyB,IAAI,CAAC,SAAS,EAAE3B,CAAC,IAAI;MACpB;MACA,IAAI3C,OAAO,CAAC2F,OAAO,IAAI3F,OAAO,CAAC2F,OAAO,KAAK,KAAK,IAC5C3F,OAAO,CAAC2F,OAAO,CAAC9C,WAAW,CAAC,CAAC,KAAKF,CAAC,CAACmD,UAAU,CAAClD,IAAI,CAACC,WAAW,CAAC,CAAC,EAAE;QACrE,OAAO,GAAG;MACZ;MACA,OAAO,CAAC;IACV,CAAC,CAAC,CACDkD,EAAE,CAAC,WAAW,EAAE,UAASC,KAAK,EAAErD,CAAC,EAAE;MAClC,MAAMF,WAAW,GAAG+C,aAAa,CAAC7C,CAAC,CAACmD,UAAU,CAAClD,IAAI,CAACC,WAAW,CAAC,CAAC,CAAC;MAClE,MAAMoD,cAAc,GAAG1D,qBAAqB,CAACI,CAAC,CAACmD,UAAU,CAAClD,IAAI,CAAC;MAE/D5D,EAAE,CAACsE,MAAM,CAAC,IAAI,CAAC,CACZ4C,UAAU,CAAC,CAAC,CACZC,QAAQ,CAAC,GAAG,CAAC,CACb7B,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CACtBA,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CACzBA,IAAI,CAAC,QAAQ,EAAE,0CAA0C,CAAC;;MAE7D;MACArD,UAAU,CAACoC,OAAO,CACf+C,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC,CACnBC,IAAI,CAAC;AAChB,0CAA0C1D,CAAC,CAACmD,UAAU,CAAClD,IAAI;AAC3D,cAAcH,WAAW,GACT;AAChB,4BAA4B9B,cAAc,CAAC2F,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAG5F,cAAc,CAAC6F,KAAK,CAAC,CAAC,CAAC,cAAclH,YAAY,CAACmD,WAAW,CAACK,KAAK,CAAC;AACzI,4CAA4CL,WAAW,CAACM,KAAK;AAC7D,oBAAoBkD,cAAc,IAAIA,cAAc,CAACjG,OAAO,CAAC+B,MAAM,GAAG,CAAC,GACjD;AACtB;AACA,0BAA0BkE,cAAc,CAACjG,OAAO,CAACoD,GAAG,CAACqD,CAAC,IAAI,KAAKA,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,MAAM,CAAC;AAChF,6BAA6B,GACP,EAAE;AACxB,uBAAuB,GACP,6DAA6D;AAC7E,WAAW,CAAC,CACDN,KAAK,CAAC,MAAM,EAAGJ,KAAK,CAACW,KAAK,GAAG,EAAE,GAAI,IAAI,CAAC,CACxCP,KAAK,CAAC,KAAK,EAAGJ,KAAK,CAACY,KAAK,GAAG,EAAE,GAAI,IAAI,CAAC;IAC5C,CAAC,CAAC,CACDb,EAAE,CAAC,UAAU,EAAE,YAAW;MACzB/G,EAAE,CAACsE,MAAM,CAAC,IAAI,CAAC,CACZ4C,UAAU,CAAC,CAAC,CACZC,QAAQ,CAAC,GAAG,CAAC,CACb7B,IAAI,CAAC,QAAQ,EAAE3B,CAAC,IAAI;QACnB;QACA,IAAI9B,eAAe,IAAI8B,CAAC,CAACmD,UAAU,CAAClD,IAAI,CAACC,WAAW,CAAC,CAAC,KAAKhC,eAAe,CAACgC,WAAW,CAAC,CAAC,EAAE;UACxF,OAAO,MAAM;QACf;QACA,OAAO,MAAM;MACf,CAAC,CAAC,CACDyB,IAAI,CAAC,cAAc,EAAE3B,CAAC,IAAI;QACzB;QACA,IAAI9B,eAAe,IAAI8B,CAAC,CAACmD,UAAU,CAAClD,IAAI,CAACC,WAAW,CAAC,CAAC,KAAKhC,eAAe,CAACgC,WAAW,CAAC,CAAC,EAAE;UACxF,OAAO,CAAC;QACV;QACA,OAAO,GAAG;MACZ,CAAC,CAAC,CACDyB,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC;MAEvBrD,UAAU,CAACoC,OAAO,CACf6C,UAAU,CAAC,CAAC,CACZC,QAAQ,CAAC,GAAG,CAAC,CACbC,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;IACxB,CAAC,CAAC,CACDL,EAAE,CAAC,OAAO,EAAE,UAASC,KAAK,EAAErD,CAAC,EAAE;MAC9B,MAAMH,WAAW,GAAGG,CAAC,CAACmD,UAAU,CAAClD,IAAI;;MAErC;MACAyB,GAAG,CAACd,SAAS,CAAC,UAAU,CAAC,CAACsD,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC;MACpD7H,EAAE,CAACsE,MAAM,CAAC,IAAI,CAAC,CAACuD,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC;;MAEzC;MACA/F,kBAAkB,CAAC0B,WAAW,CAAC;;MAE/B;MACAvC,eAAe,CAACuC,WAAW,CAAC;IAC9B,CAAC,CAAC;;IAEJ;IACA,MAAMsE,IAAI,GAAG9H,EAAE,CAAC8H,IAAI,CAAC,CAAC,CACnBC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CACnBhB,EAAE,CAAC,MAAM,EAAGC,KAAK,IAAK;MACrB3B,GAAG,CAACd,SAAS,CAAC,MAAM,CAAC,CAClBe,IAAI,CAAC,WAAW,EAAE0B,KAAK,CAACgB,SAAS,CAAC;IACvC,CAAC,CAAC;IAEJhI,EAAE,CAACsE,MAAM,CAACvC,MAAM,CAACsC,OAAO,CAAC,CACtB4D,IAAI,CAACH,IAAI,CAAC;;IAEb;IACA,MAAMI,WAAW,GAAG,GAAG;IACvB,MAAMC,YAAY,GAAG,EAAE;IACvB,MAAMC,cAAc,GAAG;MACrBC,CAAC,EAAElD,KAAK,GAAG+C,WAAW,GAAG,EAAE;MAC3BI,CAAC,EAAElD,MAAM,GAAG;IACd,CAAC;;IAED;IACA,MAAMmD,IAAI,GAAGlD,GAAG,CAACE,MAAM,CAAC,MAAM,CAAC;IAC/B,MAAMiD,cAAc,GAAGD,IAAI,CAAChD,MAAM,CAAC,gBAAgB,CAAC,CACjDD,IAAI,CAAC,IAAI,EAAE,sBAAsB3D,cAAc,EAAE,CAAC,CAClD2D,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAChBA,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAChBA,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAClBA,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC;IAEnBkD,cAAc,CAACjE,SAAS,CAAC,MAAM,CAAC,CAC7BpD,IAAI,CAAC,CACJ;MAACsH,MAAM,EAAE,IAAI;MAAEC,KAAK,EAAEzC,UAAU,CAAC,CAAC;IAAC,CAAC,EACpC;MAACwC,MAAM,EAAE,MAAM;MAAEC,KAAK,EAAEzC,UAAU,CAACjG,EAAE,CAACuG,GAAG,CAACpF,IAAI,EAAEwC,CAAC,IAAIA,CAAC,CAACG,KAAK,CAAC,IAAI,GAAG;IAAC,CAAC,CACvE,CAAC,CACD8C,KAAK,CAAC,CAAC,CAACrB,MAAM,CAAC,MAAM,CAAC,CACtBD,IAAI,CAAC,QAAQ,EAAE3B,CAAC,IAAIA,CAAC,CAAC8E,MAAM,CAAC,CAC7BnD,IAAI,CAAC,YAAY,EAAE3B,CAAC,IAAIA,CAAC,CAAC+E,KAAK,CAAC;;IAEnC;IACArD,GAAG,CAACE,MAAM,CAAC,MAAM,CAAC,CACfD,IAAI,CAAC,GAAG,EAAE8C,cAAc,CAACC,CAAC,CAAC,CAC3B/C,IAAI,CAAC,GAAG,EAAE8C,cAAc,CAACE,CAAC,CAAC,CAC3BhD,IAAI,CAAC,OAAO,EAAE4C,WAAW,CAAC,CAC1B5C,IAAI,CAAC,QAAQ,EAAE6C,YAAY,CAAC,CAC5B7C,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CACbA,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CACb8B,KAAK,CAAC,MAAM,EAAE,2BAA2BzF,cAAc,GAAG,CAAC,CAC3DyF,KAAK,CAAC,QAAQ,EAAE,MAAM,CAAC,CACvBA,KAAK,CAAC,cAAc,EAAE,GAAG,CAAC;;IAE7B;IACA/B,GAAG,CAACE,MAAM,CAAC,MAAM,CAAC,CACfD,IAAI,CAAC,GAAG,EAAE8C,cAAc,CAACC,CAAC,CAAC,CAC3B/C,IAAI,CAAC,GAAG,EAAE8C,cAAc,CAACE,CAAC,GAAG,CAAC,CAAC,CAC/BhD,IAAI,CAAC,MAAM,EAAE,kBAAkB,CAAC,CAChCA,IAAI,CAAC,aAAa,EAAE,OAAO,CAAC,CAC5BA,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,CACzBqD,IAAI,CAAC,KAAK,CAAC;IAEdtD,GAAG,CAACE,MAAM,CAAC,MAAM,CAAC,CACfD,IAAI,CAAC,GAAG,EAAE8C,cAAc,CAACC,CAAC,GAAGH,WAAW,CAAC,CACzC5C,IAAI,CAAC,GAAG,EAAE8C,cAAc,CAACE,CAAC,GAAG,CAAC,CAAC,CAC/BhD,IAAI,CAAC,MAAM,EAAE,kBAAkB,CAAC,CAChCA,IAAI,CAAC,aAAa,EAAE,KAAK,CAAC,CAC1BA,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,CACzBqD,IAAI,CAAC,MAAM,CAAC;IAEftD,GAAG,CAACE,MAAM,CAAC,MAAM,CAAC,CACfD,IAAI,CAAC,GAAG,EAAE8C,cAAc,CAACC,CAAC,GAAGH,WAAW,GAAG,CAAC,CAAC,CAC7C5C,IAAI,CAAC,GAAG,EAAE8C,cAAc,CAACE,CAAC,GAAG,EAAE,CAAC,CAChChD,IAAI,CAAC,MAAM,EAAE,kBAAkB,CAAC,CAChCA,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAC7BA,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,CACzBqD,IAAI,CAAC,GAAGhH,cAAc,CAAC2F,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAG5F,cAAc,CAAC6F,KAAK,CAAC,CAAC,CAAC,aAAa,CAAC;;IAEzF;IACA;IACA,MAAMoB,YAAY,GAAG5H,OAAO,CAAC2F,OAAO,IAAI3F,OAAO,CAAC2F,OAAO,KAAK,KAAK,GAC7D,CAAC3F,OAAO,CAAC2F,OAAO,CAAC9C,WAAW,CAAC,CAAC,CAAC,GAC/B1C,IAAI,CACD0H,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACjF,KAAK,GAAGgF,CAAC,CAAChF,KAAK,CAAC,CACjC0D,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CACXpD,GAAG,CAACT,CAAC,IAAIA,CAAC,CAACC,IAAI,CAACC,WAAW,CAAC,CAAC,CAAC;IAErCwB,GAAG,CAACd,SAAS,CAAC,UAAU,CAAC,CACtBL,MAAM,CAACP,CAAC,IAAIiF,YAAY,CAACI,QAAQ,CAACrF,CAAC,CAACmD,UAAU,CAAClD,IAAI,CAACC,WAAW,CAAC,CAAC,CAAC,CAAC,CACnEoF,IAAI,CAAC,YAAW;MACf,MAAMC,OAAO,GAAGlJ,EAAE,CAACsE,MAAM,CAAC,IAAI,CAAC;;MAE/B;MACA,SAAS6E,MAAMA,CAAA,EAAG;QAChBD,OAAO,CACJhC,UAAU,CAAC,CAAC,CACZC,QAAQ,CAAC,IAAI,CAAC,CACd7B,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CACvBA,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC,CACzB4B,UAAU,CAAC,CAAC,CACZC,QAAQ,CAAC,IAAI,CAAC,CACd7B,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CACzBA,IAAI,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAC3ByB,EAAE,CAAC,KAAK,EAAEoC,MAAM,CAAC;MACtB;MAEAA,MAAM,CAAC,CAAC;IACV,CAAC,CAAC;;IAEJ;IACA,IAAInI,OAAO,CAAC2F,OAAO,IAAI3F,OAAO,CAAC2F,OAAO,KAAK,KAAK,EAAE;MAChDtB,GAAG,CAACE,MAAM,CAAC,MAAM,CAAC,CACfD,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CACbA,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CACbA,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CACpBA,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,CACzBA,IAAI,CAAC,aAAa,EAAE,MAAM,CAAC,CAC3BqD,IAAI,CAAC,wBAAwB3H,OAAO,CAAC2F,OAAO,EAAE,CAAC;IACpD;EACF,CAAC;EAED,MAAMyC,aAAa,GAAGA,CAAA,KAAM;IAC1B,QAAOzH,cAAc;MACnB,KAAK,WAAW;QAAE,OAAO,iBAAiB;MAC1C,KAAK,YAAY;QAAE,OAAO,kBAAkB;MAC5C,KAAK,WAAW;QAAE,OAAO,iBAAiB;MAC1C;QAAS,OAAO,iBAAiB;IACnC;EACF,CAAC;EAED,MAAM0H,mBAAmB,GAAGA,CAAA,kBAC1B3I,OAAA;IAAK4I,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC5B7I,OAAA;MACE4I,SAAS,EAAE,oBAAoB3H,cAAc,KAAK,WAAW,GAAG,QAAQ,GAAG,EAAE,EAAG;MAChF6H,OAAO,EAAEA,CAAA,KAAMnG,kBAAkB,CAAC,WAAW,CAAE;MAAAkG,QAAA,EAChD;IAED;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACTlJ,OAAA;MACE4I,SAAS,EAAE,oBAAoB3H,cAAc,KAAK,YAAY,GAAG,QAAQ,GAAG,EAAE,EAAG;MACjF6H,OAAO,EAAEA,CAAA,KAAMnG,kBAAkB,CAAC,YAAY,CAAE;MAAAkG,QAAA,EACjD;IAED;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACTlJ,OAAA;MACE4I,SAAS,EAAE,oBAAoB3H,cAAc,KAAK,WAAW,GAAG,QAAQ,GAAG,EAAE,EAAG;MAChF6H,OAAO,EAAEA,CAAA,KAAMnG,kBAAkB,CAAC,WAAW,CAAE;MAAAkG,QAAA,EAChD;IAED;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EACR/H,eAAe,iBACdnB,OAAA;MACE4I,SAAS,EAAC,kCAAkC;MAC5CE,OAAO,EAAEA,CAAA,KAAM;QACb1H,kBAAkB,CAAC,IAAI,CAAC;QACxBb,eAAe,CAAC,IAAI,CAAC;MACvB,CAAE;MAAAsI,QAAA,EACH;IAED;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CACT;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CACN;;EAED;EACA,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;IACjC,IAAI,CAAChI,eAAe,EAAE,OAAO,IAAI;IAEjC,MAAMoF,cAAc,GAAG1D,qBAAqB,CAAC1B,eAAe,CAAC;IAC7D,IAAI,CAACoF,cAAc,EAAE,OAAO,IAAI;IAEhC,oBACEvG,OAAA;MAAK4I,SAAS,EAAC,uBAAuB;MAAAC,QAAA,gBACpC7I,OAAA;QAAA6I,QAAA,EAAKtC,cAAc,CAACrD;MAAI;QAAA6F,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC9BlJ,OAAA;QAAK4I,SAAS,EAAC,eAAe;QAAAC,QAAA,gBAC5B7I,OAAA;UAAK4I,SAAS,EAAC,WAAW;UAAAC,QAAA,gBACxB7I,OAAA;YAAM4I,SAAS,EAAC,YAAY;YAAAC,QAAA,GAAE5H,cAAc,CAAC2F,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAG5F,cAAc,CAAC6F,KAAK,CAAC,CAAC,CAAC,EAAC,GAAC;UAAA;YAAAiC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eACvGlJ,OAAA;YAAM4I,SAAS,EAAC,YAAY;YAAAC,QAAA,EAAEtC,cAAc,CAACtF,cAAc;UAAC;YAAA8H,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjE,CAAC,eACNlJ,OAAA;UAAK4I,SAAS,EAAC,WAAW;UAAAC,QAAA,gBACxB7I,OAAA;YAAM4I,SAAS,EAAC,YAAY;YAAAC,QAAA,EAAC;UAAQ;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eAC5ClJ,OAAA;YAAM4I,SAAS,EAAC,YAAY;YAAAC,QAAA,EAAEtC,cAAc,CAAClD;UAAK;YAAA0F,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvD,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,EACL3C,cAAc,CAACjG,OAAO,CAAC+B,MAAM,GAAG,CAAC,iBAChCrC,OAAA;QAAK4I,SAAS,EAAC,iBAAiB;QAAAC,QAAA,gBAC9B7I,OAAA;UAAA6I,QAAA,EAAI;QAAgB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACzBlJ,OAAA;UAAA6I,QAAA,EACGtC,cAAc,CAACjG,OAAO,CAACoD,GAAG,CAAC,CAACF,MAAM,EAAE4F,KAAK,kBACxCpJ,OAAA;YAAA6I,QAAA,EAAiBrF;UAAM,GAAd4F,KAAK;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAc,CAC7B;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAEV,CAAC;EAED,oBACElJ,OAAA,CAACP,aAAa;IACZ4J,KAAK,EAAE,UAAUpI,cAAc,CAAC2F,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAG5F,cAAc,CAAC6F,KAAK,CAAC,CAAC,CAAC,eAAgB;IACjGwC,aAAa,EAAEX,mBAAmB,CAAC,CAAE;IACrCC,SAAS,EAAEF,aAAa,CAAC,CAAE;IAAAG,QAAA,gBAE3B7I,OAAA;MACEuJ,GAAG,EAAEjI,YAAa;MAClBoF,KAAK,EAAE;QACLjC,KAAK,EAAE,MAAM;QACb+E,SAAS,EAAEnJ,QAAQ,GAAG,OAAO,GAAG,OAAO;QACvCoJ,SAAS,EAAEpJ,QAAQ,GAAG,OAAO,GAAG;MAClC,CAAE;MACFuI,SAAS,EAAC,uBAAuB;MAAAC,QAAA,EAEhChI,OAAO,gBACNb,OAAA,CAACN,MAAM;QAACgK,OAAO,EAAC;MAAqB;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,GACtCnI,KAAK,gBACPf,OAAA,CAACL,aAAa;QAAC+J,OAAO,EAAE3I,KAAM;QAAC4I,IAAI,EAAC;MAAI;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,GACzCzI,IAAI,CAAC4B,MAAM,KAAK,CAAC,gBACnBrC,OAAA,CAACL,aAAa;QAAC+J,OAAO,EAAC;MAA2B;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,gBAErDlJ,OAAA,CAAAE,SAAA;QAAA2I,QAAA,gBACE7I,OAAA;UACEuJ,GAAG,EAAElI,MAAO;UACZuH,SAAS,EAAE,6BAA6BF,aAAa,CAAC,CAAC,EAAG;UAC1DhC,KAAK,EAAE;YACLkD,YAAY,EAAE,MAAM;YACpBC,SAAS,EAAE;UACb;QAAE;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC,EACN/H,eAAe,IAAIgI,oBAAoB,CAAC,CAAC;MAAA,eAC1C;IACH;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,EAEL,CAACrI,OAAO,IAAIJ,IAAI,CAAC4B,MAAM,GAAG,CAAC,iBAC1BrC,OAAA;MAAK4I,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC/B7I,OAAA;QAAA6I,QAAA,EAAO;MAAoE;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,EAClF5F,MAAM,CAACwG,IAAI,CAACxJ,OAAO,CAAC,CAACyJ,IAAI,CAACtG,GAAG,IAAInD,OAAO,CAACmD,GAAG,CAAC,IAAInD,OAAO,CAACmD,GAAG,CAAC,KAAK,KAAK,CAAC,iBACvEzD,OAAA;QAAO4I,SAAS,EAAC,sBAAsB;QAAAC,QAAA,EAAC;MAAsD;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CACtG;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAEpB,CAAC;AAAC1I,EAAA,CAlfIL,UAAU;AAAA6J,EAAA,GAAV7J,UAAU;AAofhB,eAAeA,UAAU;AAAC,IAAA6J,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}