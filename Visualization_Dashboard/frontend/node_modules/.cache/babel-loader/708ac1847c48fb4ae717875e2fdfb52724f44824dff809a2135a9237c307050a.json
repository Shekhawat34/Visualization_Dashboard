{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\OneDrive\\\\Desktop\\\\new\\\\frontend\\\\src\\\\components\\\\charts\\\\CountryMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport * as topojson from 'topojson-client';\nimport api from '../../services/api';\nimport CardContainer from '../common/CardContainer';\nimport Loader from '../common/Loader';\nimport NoDataMessage from '../common/NoDataMessage';\nimport { formatNumber, createTooltip, debounce } from '../../utils/helpers';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CountryMap = ({\n  metric = 'intensity',\n  fullSize = false,\n  filters = {} // Accept filters prop \n}) => {\n  _s();\n  const [data, setData] = useState([]);\n  const [worldData, setWorldData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedMetric, setSelectedMetric] = useState(metric);\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  const [countryDetails, setCountryDetails] = useState(null);\n  const [countryDetailsLoading, setCountryDetailsLoading] = useState(false);\n  const svgRef = useRef(null);\n  const containerRef = useRef(null);\n  const tooltipRef = useRef(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      // In the fetchData function\n      try {\n        setLoading(true);\n\n        // Separate these promises to see which one fails\n        console.log(\"Fetching topN data...\");\n        const topNData = await api.getTopN(selectedMetric, 'country', 50, filters);\n        console.log(\"topN data received:\", topNData);\n        console.log(\"Fetching world topology...\");\n        const worldTopoJSON = await fetch('https://unpkg.com/world-atlas@2.0.2/countries-110m.json').then(res => res.json());\n        console.log(\"World topology received\");\n        setData(topNData);\n        setWorldData(worldTopoJSON);\n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching map data:', err);\n        setError(`Failed to load map data: ${err.message}`);\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [selectedMetric, filters]); // Re-fetch when filters change\n\n  useEffect(() => {\n    if (data.length > 0 && worldData && !loading) {\n      drawMap();\n\n      // Add resize listener\n      const handleResize = debounce(() => {\n        drawMap();\n      }, 300);\n      window.addEventListener('resize', handleResize);\n      return () => window.removeEventListener('resize', handleResize);\n    }\n  }, [data, worldData, loading, selectedCountry]);\n\n  // Fetch country details when a country is selected\n  useEffect(() => {\n    const fetchCountryDetails = async () => {\n      if (!selectedCountry) return;\n      try {\n        setCountryDetailsLoading(true);\n        // Apply the same filters when fetching country insights\n        const insights = await api.getCountryInsights(selectedCountry, filters);\n        setCountryDetails(insights);\n        setCountryDetailsLoading(false);\n      } catch (err) {\n        console.error('Error fetching country details:', err);\n        setCountryDetailsLoading(false);\n      }\n    };\n    fetchCountryDetails();\n  }, [selectedCountry, filters]);\n  const handleMetricChange = newMetric => {\n    setSelectedMetric(newMetric);\n  };\n  const drawMap = () => {\n    if (!svgRef.current || !containerRef.current || !worldData) return;\n\n    // Clear previous chart\n    d3.select(svgRef.current).selectAll('*').remove();\n\n    // Set dimensions\n    const containerWidth = containerRef.current.clientWidth;\n    const containerHeight = fullSize ? Math.min(600, containerWidth * 0.6) : Math.min(500, containerWidth * 0.6);\n    const margin = {\n      top: 20,\n      right: 20,\n      bottom: 20,\n      left: 20\n    };\n    const width = containerWidth - margin.left - margin.right;\n    const height = containerHeight - margin.top - margin.bottom;\n\n    // Create SVG\n    const svg = d3.select(svgRef.current).attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n\n    // Create tooltip if not already created\n    if (!tooltipRef.current) {\n      tooltipRef.current = createTooltip(d3);\n    }\n\n    // Create map projection\n    const projection = d3.geoNaturalEarth1().fitSize([width, height], topojson.feature(worldData, worldData.objects.countries));\n\n    // Create path generator\n    const path = d3.geoPath().projection(projection);\n\n    // Extract countries data\n    const countries = topojson.feature(worldData, worldData.objects.countries).features;\n\n    // Add a background rect for the ocean\n    svg.append(\"rect\").attr(\"width\", width).attr(\"height\", height).attr(\"fill\", \"#E6F2F5\").attr(\"class\", \"ocean-background\");\n\n    // Create color scale based on metric value\n    const colorScale = d3.scaleSequential(selectedMetric === 'intensity' ? d3.interpolateBlues : selectedMetric === 'likelihood' ? d3.interpolateGreens : d3.interpolateOranges).domain([0, d3.max(data, d => d.value) || 10]);\n\n    // Create a map for faster data lookup\n    const dataByCountry = {};\n    data.forEach(d => {\n      dataByCountry[d.name.toLowerCase()] = d;\n    });\n\n    // Draw countries\n    svg.selectAll('.country').data(countries).enter().append('path').attr('class', d => `country ${selectedCountry === d.properties.name ? 'selected' : ''}`).attr('d', path).attr('fill', d => {\n      const countryData = dataByCountry[d.properties.name.toLowerCase()];\n      return countryData ? colorScale(countryData.value) : '#d0d0d0';\n    }).attr('stroke', d => selectedCountry === d.properties.name ? '#333' : '#fff').attr('stroke-width', d => selectedCountry === d.properties.name ? 2 : 0.5).on('mouseover', function (event, d) {\n      const countryData = dataByCountry[d.properties.name.toLowerCase()];\n      d3.select(this).transition().duration(200).attr('stroke', '#333').attr('stroke-width', 1.5).attr('filter', 'drop-shadow(0px 0px 5px rgba(0,0,0,0.3))');\n\n      // Enhanced tooltip with more detailed information\n      tooltipRef.current.style('opacity', 1).html(`\n            <div class=\"tooltip-header\">${d.properties.name}</div>\n            ${countryData ? `<div class=\"tooltip-content\">\n                  <strong>${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)}:</strong> ${formatNumber(countryData.value)}<br>\n                  <strong>Count:</strong> ${countryData.count} records<br>\n                  ${Object.entries(filters).filter(([key, value]) => value && value !== 'all').map(([key, value]) => `<strong>${key.charAt(0).toUpperCase() + key.slice(1)}:</strong> ${value}`).join('<br>')}\n                </div>\n                <div class=\"tooltip-footer\">Click for detailed insights</div>` : '<div class=\"tooltip-content\"><i>No data available</i></div>'}\n          `).style('left', event.pageX + 10 + 'px').style('top', event.pageY - 20 + 'px');\n    }).on('mouseout', function () {\n      d3.select(this).transition().duration(200).attr('stroke', d => selectedCountry === d3.select(this).datum().properties.name ? '#333' : '#fff').attr('stroke-width', d => selectedCountry === d3.select(this).datum().properties.name ? 2 : 0.5).attr('filter', null);\n      tooltipRef.current.transition().duration(200).style('opacity', 0);\n    }).on('click', function (event, d) {\n      const countryName = d.properties.name;\n\n      // Toggle selection if clicking on the already selected country\n      if (selectedCountry === countryName) {\n        setSelectedCountry(null);\n        setCountryDetails(null);\n      } else {\n        setSelectedCountry(countryName);\n      }\n\n      // Update the visual selection state for all countries\n      svg.selectAll('.country').attr('stroke', c => c.properties.name === countryName ? '#333' : '#fff').attr('stroke-width', c => c.properties.name === countryName ? 2 : 0.5);\n    });\n\n    // Add a gentle zoom effect to the map\n    const zoom = d3.zoom().scaleExtent([1, 8]).on('zoom', event => {\n      svg.selectAll('path').attr('transform', event.transform);\n    });\n    d3.select(svgRef.current).call(zoom);\n\n    // Add legend\n    const legendWidth = 200;\n    const legendHeight = 15;\n    const legendPosition = {\n      x: width - legendWidth - 10,\n      y: height - 40\n    };\n\n    // Create gradient for legend\n    const defs = svg.append('defs');\n    const linearGradient = defs.append('linearGradient').attr('id', `map-color-gradient-${selectedMetric}`).attr('x1', '0%').attr('y1', '0%').attr('x2', '100%').attr('y2', '0%');\n    linearGradient.selectAll('stop').data([{\n      offset: '0%',\n      color: colorScale(0)\n    }, {\n      offset: '100%',\n      color: colorScale(d3.max(data, d => d.value) || 10)\n    }]).enter().append('stop').attr('offset', d => d.offset).attr('stop-color', d => d.color);\n\n    // Draw legend rectangle with rounded corners\n    svg.append('rect').attr('x', legendPosition.x).attr('y', legendPosition.y).attr('width', legendWidth).attr('height', legendHeight).attr('rx', 4).attr('ry', 4).style('fill', `url(#map-color-gradient-${selectedMetric})`).style('stroke', '#ccc').style('stroke-width', 0.5);\n\n    // Add legend labels\n    svg.append('text').attr('x', legendPosition.x).attr('y', legendPosition.y - 5).attr('fill', 'var(--dark-text)').attr('text-anchor', 'start').attr('font-size', '10px').text('Low');\n    svg.append('text').attr('x', legendPosition.x + legendWidth).attr('y', legendPosition.y - 5).attr('fill', 'var(--dark-text)').attr('text-anchor', 'end').attr('font-size', '10px').text('High');\n\n    // Create title with applied filters\n    const filterText = Object.entries(filters).filter(([key, value]) => value && value !== 'all').map(([key, value]) => `${key}: ${value}`).join(', ');\n    const titleText = filterText ? `${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)} by Country (Filtered by ${filterText})` : `${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)} by Country`;\n    svg.append('text').attr('x', legendPosition.x + legendWidth / 2).attr('y', legendPosition.y + 30).attr('fill', 'var(--dark-text)').attr('text-anchor', 'middle').attr('font-size', '12px').text(titleText);\n\n    // Add a subtle pulsing animation to countries with highest values\n    const topCountries = data.sort((a, b) => b.value - a.value).slice(0, 5).map(d => d.name.toLowerCase());\n    svg.selectAll('.country').filter(d => topCountries.includes(d.properties.name.toLowerCase())).each(function () {\n      const element = d3.select(this);\n\n      // Create pulsing effect\n      function repeat() {\n        element.transition().duration(1000).attr('stroke-width', 2).attr('stroke-opacity', 1).transition().duration(1000).attr('stroke-width', 0.5).attr('stroke-opacity', 0.7).on('end', repeat);\n      }\n      repeat();\n    });\n  };\n  const getColorClass = () => {\n    switch (selectedMetric) {\n      case 'intensity':\n        return 'intensity-theme';\n      case 'likelihood':\n        return 'likelihood-theme';\n      case 'relevance':\n        return 'relevance-theme';\n      default:\n        return 'intensity-theme';\n    }\n  };\n  const renderActionButtons = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-actions\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: `chart-action-btn ${selectedMetric === 'intensity' ? 'active' : ''}`,\n      onClick: () => handleMetricChange('intensity'),\n      children: \"Intensity\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `chart-action-btn ${selectedMetric === 'likelihood' ? 'active' : ''}`,\n      onClick: () => handleMetricChange('likelihood'),\n      children: \"Likelihood\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `chart-action-btn ${selectedMetric === 'relevance' ? 'active' : ''}`,\n      onClick: () => handleMetricChange('relevance'),\n      children: \"Relevance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 7\n    }, this), selectedCountry && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"chart-action-btn clear-btn\",\n      onClick: () => {\n        setSelectedCountry(null);\n        setCountryDetails(null);\n      },\n      children: \"Clear Selection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 344,\n    columnNumber: 5\n  }, this);\n\n  // Render country details panel\n  const renderCountryDetails = () => {\n    if (!selectedCountry) return null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"country-details-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [selectedCountry, \" Insights\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 9\n      }, this), countryDetailsLoading ? /*#__PURE__*/_jsxDEV(Loader, {\n        message: \"Loading country insights...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 11\n      }, this) : countryDetails && countryDetails.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"insights-list\",\n        children: countryDetails.map((insight, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"insight-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: insight.title || 'Untitled Insight'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: insight.insight\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"insight-meta\",\n            children: [insight.topic && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"meta-tag\",\n              children: [\"Topic: \", insight.topic]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 37\n            }, this), insight.sector && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"meta-tag\",\n              children: [\"Sector: \", insight.sector]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 394,\n              columnNumber: 38\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"meta-metrics\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"metric intensity\",\n                children: [\"I: \", formatNumber(insight.intensity)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 396,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"metric likelihood\",\n                children: [\"L: \", formatNumber(insight.likelihood)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 397,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"metric relevance\",\n                children: [\"R: \", formatNumber(insight.relevance)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 398,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 395,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(NoDataMessage, {\n        message: `No insights available for ${selectedCountry}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Create title based on filters\n  const getCardTitle = () => {\n    const filterText = Object.entries(filters).filter(([key, value]) => value && value !== 'all').map(([key, value]) => `${key}: ${value}`).join(', ');\n    return filterText ? `Global ${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)} Distribution (${filterText})` : `Global ${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)} Distribution`;\n  };\n  return /*#__PURE__*/_jsxDEV(CardContainer, {\n    title: getCardTitle(),\n    actionButtons: renderActionButtons(),\n    className: getColorClass(),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: containerRef,\n      style: {\n        width: '100%',\n        minHeight: fullSize ? '600px' : '400px',\n        maxHeight: fullSize ? '800px' : '500px'\n      },\n      className: \"country-map-container\",\n      children: loading ? /*#__PURE__*/_jsxDEV(Loader, {\n        message: \"Loading map data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 11\n      }, this) : error ? /*#__PURE__*/_jsxDEV(NoDataMessage, {\n        message: error,\n        icon: \"\\u26A0\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 11\n      }, this) : data.length === 0 ? /*#__PURE__*/_jsxDEV(NoDataMessage, {\n        message: \"No country data available for the selected filters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          ref: svgRef,\n          className: `chart-svg country-map-svg ${getColorClass()}`,\n          style: {\n            borderRadius: '10px',\n            boxShadow: '0 4px 12px rgba(0, 0, 0, 0.05)'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 13\n        }, this), !loading && data.length > 0 && !selectedCountry && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"map-instructions\",\n          children: /*#__PURE__*/_jsxDEV(\"small\", {\n            children: \"Tip: Scroll to zoom, drag to pan, and click on countries for details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 457,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 15\n        }, this), selectedCountry && renderCountryDetails()]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 424,\n    columnNumber: 5\n  }, this);\n};\n_s(CountryMap, \"c9708/z/4bKW0+xDsLGzP7aFpss=\");\n_c = CountryMap;\nexport default CountryMap;\nvar _c;\n$RefreshReg$(_c, \"CountryMap\");","map":{"version":3,"names":["React","useState","useEffect","useRef","d3","topojson","api","CardContainer","Loader","NoDataMessage","formatNumber","createTooltip","debounce","jsxDEV","_jsxDEV","Fragment","_Fragment","CountryMap","metric","fullSize","filters","_s","data","setData","worldData","setWorldData","loading","setLoading","error","setError","selectedMetric","setSelectedMetric","selectedCountry","setSelectedCountry","countryDetails","setCountryDetails","countryDetailsLoading","setCountryDetailsLoading","svgRef","containerRef","tooltipRef","fetchData","console","log","topNData","getTopN","worldTopoJSON","fetch","then","res","json","err","message","length","drawMap","handleResize","window","addEventListener","removeEventListener","fetchCountryDetails","insights","getCountryInsights","handleMetricChange","newMetric","current","select","selectAll","remove","containerWidth","clientWidth","containerHeight","Math","min","margin","top","right","bottom","left","width","height","svg","attr","append","projection","geoNaturalEarth1","fitSize","feature","objects","countries","path","geoPath","features","colorScale","scaleSequential","interpolateBlues","interpolateGreens","interpolateOranges","domain","max","d","value","dataByCountry","forEach","name","toLowerCase","enter","properties","countryData","on","event","transition","duration","style","html","charAt","toUpperCase","slice","count","Object","entries","filter","key","map","join","pageX","pageY","datum","countryName","c","zoom","scaleExtent","transform","call","legendWidth","legendHeight","legendPosition","x","y","defs","linearGradient","offset","color","text","filterText","titleText","topCountries","sort","a","b","includes","each","element","repeat","getColorClass","renderActionButtons","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","renderCountryDetails","insight","index","title","topic","sector","intensity","likelihood","relevance","getCardTitle","actionButtons","ref","minHeight","maxHeight","icon","borderRadius","boxShadow","_c","$RefreshReg$"],"sources":["C:/Users/Dell/OneDrive/Desktop/new/frontend/src/components/charts/CountryMap.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport * as d3 from 'd3';\r\nimport * as topojson from 'topojson-client';\r\nimport api from '../../services/api';\r\nimport CardContainer from '../common/CardContainer';\r\nimport Loader from '../common/Loader';\r\nimport NoDataMessage from '../common/NoDataMessage';\r\nimport { formatNumber, createTooltip, debounce } from '../../utils/helpers';\r\n\r\nconst CountryMap = ({ \r\n  metric = 'intensity', \r\n  fullSize = false,\r\n  filters = {} // Accept filters prop \r\n}) => {\r\n  const [data, setData] = useState([]);\r\n  const [worldData, setWorldData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [selectedMetric, setSelectedMetric] = useState(metric);\r\n  const [selectedCountry, setSelectedCountry] = useState(null);\r\n  const [countryDetails, setCountryDetails] = useState(null);\r\n  const [countryDetailsLoading, setCountryDetailsLoading] = useState(false);\r\n  const svgRef = useRef(null);\r\n  const containerRef = useRef(null);\r\n  const tooltipRef = useRef(null);\r\n  \r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      // In the fetchData function\r\ntry {\r\n  setLoading(true);\r\n  \r\n  // Separate these promises to see which one fails\r\n  console.log(\"Fetching topN data...\");\r\n  const topNData = await api.getTopN(selectedMetric, 'country', 50, filters);\r\n  console.log(\"topN data received:\", topNData);\r\n  \r\n  console.log(\"Fetching world topology...\");\r\n  const worldTopoJSON = await fetch('https://unpkg.com/world-atlas@2.0.2/countries-110m.json').then(res => res.json());\r\n  console.log(\"World topology received\");\r\n  \r\n  setData(topNData);\r\n  setWorldData(worldTopoJSON);\r\n  setLoading(false);\r\n} catch (err) {\r\n  console.error('Error fetching map data:', err);\r\n  setError(`Failed to load map data: ${err.message}`);\r\n  setLoading(false);\r\n}\r\n    };\r\n\r\n    fetchData();\r\n  }, [selectedMetric, filters]); // Re-fetch when filters change\r\n\r\n  useEffect(() => {\r\n    if (data.length > 0 && worldData && !loading) {\r\n      drawMap();\r\n      \r\n      // Add resize listener\r\n      const handleResize = debounce(() => {\r\n        drawMap();\r\n      }, 300);\r\n      \r\n      window.addEventListener('resize', handleResize);\r\n      return () => window.removeEventListener('resize', handleResize);\r\n    }\r\n  }, [data, worldData, loading, selectedCountry]);\r\n\r\n  // Fetch country details when a country is selected\r\n  useEffect(() => {\r\n    const fetchCountryDetails = async () => {\r\n      if (!selectedCountry) return;\r\n      \r\n      try {\r\n        setCountryDetailsLoading(true);\r\n        // Apply the same filters when fetching country insights\r\n        const insights = await api.getCountryInsights(selectedCountry, filters);\r\n        setCountryDetails(insights);\r\n        setCountryDetailsLoading(false);\r\n      } catch (err) {\r\n        console.error('Error fetching country details:', err);\r\n        setCountryDetailsLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchCountryDetails();\r\n  }, [selectedCountry, filters]);\r\n\r\n  const handleMetricChange = (newMetric) => {\r\n    setSelectedMetric(newMetric);\r\n  };\r\n\r\n  const drawMap = () => {\r\n    if (!svgRef.current || !containerRef.current || !worldData) return;\r\n\r\n    // Clear previous chart\r\n    d3.select(svgRef.current).selectAll('*').remove();\r\n\r\n    // Set dimensions\r\n    const containerWidth = containerRef.current.clientWidth;\r\n    const containerHeight = fullSize ? Math.min(600, containerWidth * 0.6) : Math.min(500, containerWidth * 0.6);\r\n    const margin = { top: 20, right: 20, bottom: 20, left: 20 };\r\n    const width = containerWidth - margin.left - margin.right;\r\n    const height = containerHeight - margin.top - margin.bottom;\r\n\r\n    // Create SVG\r\n    const svg = d3.select(svgRef.current)\r\n      .attr('width', width + margin.left + margin.right)\r\n      .attr('height', height + margin.top + margin.bottom)\r\n      .append('g')\r\n      .attr('transform', `translate(${margin.left},${margin.top})`);\r\n\r\n    // Create tooltip if not already created\r\n    if (!tooltipRef.current) {\r\n      tooltipRef.current = createTooltip(d3);\r\n    }\r\n\r\n    // Create map projection\r\n    const projection = d3.geoNaturalEarth1()\r\n      .fitSize([width, height], topojson.feature(worldData, worldData.objects.countries));\r\n\r\n    // Create path generator\r\n    const path = d3.geoPath().projection(projection);\r\n\r\n    // Extract countries data\r\n    const countries = topojson.feature(worldData, worldData.objects.countries).features;\r\n\r\n    // Add a background rect for the ocean\r\n    svg.append(\"rect\")\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", height)\r\n      .attr(\"fill\", \"#E6F2F5\")\r\n      .attr(\"class\", \"ocean-background\");\r\n\r\n    // Create color scale based on metric value\r\n    const colorScale = d3.scaleSequential(\r\n      selectedMetric === 'intensity' ? d3.interpolateBlues :\r\n      selectedMetric === 'likelihood' ? d3.interpolateGreens :\r\n      d3.interpolateOranges\r\n    ).domain([0, d3.max(data, d => d.value) || 10]);\r\n\r\n    // Create a map for faster data lookup\r\n    const dataByCountry = {};\r\n    data.forEach(d => {\r\n      dataByCountry[d.name.toLowerCase()] = d;\r\n    });\r\n\r\n    // Draw countries\r\n    svg.selectAll('.country')\r\n      .data(countries)\r\n      .enter()\r\n      .append('path')\r\n      .attr('class', d => `country ${selectedCountry === d.properties.name ? 'selected' : ''}`)\r\n      .attr('d', path)\r\n      .attr('fill', d => {\r\n        const countryData = dataByCountry[d.properties.name.toLowerCase()];\r\n        return countryData ? colorScale(countryData.value) : '#d0d0d0';\r\n      })\r\n      .attr('stroke', d => selectedCountry === d.properties.name ? '#333' : '#fff')\r\n      .attr('stroke-width', d => selectedCountry === d.properties.name ? 2 : 0.5)\r\n      .on('mouseover', function(event, d) {\r\n        const countryData = dataByCountry[d.properties.name.toLowerCase()];\r\n        \r\n        d3.select(this)\r\n          .transition()\r\n          .duration(200)\r\n          .attr('stroke', '#333')\r\n          .attr('stroke-width', 1.5)\r\n          .attr('filter', 'drop-shadow(0px 0px 5px rgba(0,0,0,0.3))');\r\n        \r\n        // Enhanced tooltip with more detailed information\r\n        tooltipRef.current\r\n          .style('opacity', 1)\r\n          .html(`\r\n            <div class=\"tooltip-header\">${d.properties.name}</div>\r\n            ${countryData \r\n              ? `<div class=\"tooltip-content\">\r\n                  <strong>${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)}:</strong> ${formatNumber(countryData.value)}<br>\r\n                  <strong>Count:</strong> ${countryData.count} records<br>\r\n                  ${Object.entries(filters)\r\n                    .filter(([key, value]) => value && value !== 'all')\r\n                    .map(([key, value]) => `<strong>${key.charAt(0).toUpperCase() + key.slice(1)}:</strong> ${value}`)\r\n                    .join('<br>')}\r\n                </div>\r\n                <div class=\"tooltip-footer\">Click for detailed insights</div>`\r\n              : '<div class=\"tooltip-content\"><i>No data available</i></div>'}\r\n          `)\r\n          .style('left', (event.pageX + 10) + 'px')\r\n          .style('top', (event.pageY - 20) + 'px');\r\n      })\r\n      .on('mouseout', function() {\r\n        d3.select(this)\r\n          .transition()\r\n          .duration(200)\r\n          .attr('stroke', d => selectedCountry === d3.select(this).datum().properties.name ? '#333' : '#fff')\r\n          .attr('stroke-width', d => selectedCountry === d3.select(this).datum().properties.name ? 2 : 0.5)\r\n          .attr('filter', null);\r\n        \r\n        tooltipRef.current\r\n          .transition()\r\n          .duration(200)\r\n          .style('opacity', 0);\r\n      })\r\n      .on('click', function(event, d) {\r\n        const countryName = d.properties.name;\r\n        \r\n        // Toggle selection if clicking on the already selected country\r\n        if (selectedCountry === countryName) {\r\n          setSelectedCountry(null);\r\n          setCountryDetails(null);\r\n        } else {\r\n          setSelectedCountry(countryName);\r\n        }\r\n        \r\n        // Update the visual selection state for all countries\r\n        svg.selectAll('.country')\r\n          .attr('stroke', c => c.properties.name === countryName ? '#333' : '#fff')\r\n          .attr('stroke-width', c => c.properties.name === countryName ? 2 : 0.5);\r\n      });\r\n\r\n    // Add a gentle zoom effect to the map\r\n    const zoom = d3.zoom()\r\n      .scaleExtent([1, 8])\r\n      .on('zoom', (event) => {\r\n        svg.selectAll('path')\r\n          .attr('transform', event.transform);\r\n      });\r\n\r\n    d3.select(svgRef.current)\r\n      .call(zoom);\r\n\r\n    // Add legend\r\n    const legendWidth = 200;\r\n    const legendHeight = 15;\r\n    const legendPosition = {\r\n      x: width - legendWidth - 10,\r\n      y: height - 40\r\n    };\r\n\r\n    // Create gradient for legend\r\n    const defs = svg.append('defs');\r\n    const linearGradient = defs.append('linearGradient')\r\n      .attr('id', `map-color-gradient-${selectedMetric}`)\r\n      .attr('x1', '0%')\r\n      .attr('y1', '0%')\r\n      .attr('x2', '100%')\r\n      .attr('y2', '0%');\r\n\r\n    linearGradient.selectAll('stop')\r\n      .data([\r\n        {offset: '0%', color: colorScale(0)},\r\n        {offset: '100%', color: colorScale(d3.max(data, d => d.value) || 10)}\r\n      ])\r\n      .enter().append('stop')\r\n      .attr('offset', d => d.offset)\r\n      .attr('stop-color', d => d.color);\r\n\r\n    // Draw legend rectangle with rounded corners\r\n    svg.append('rect')\r\n      .attr('x', legendPosition.x)\r\n      .attr('y', legendPosition.y)\r\n      .attr('width', legendWidth)\r\n      .attr('height', legendHeight)\r\n      .attr('rx', 4)\r\n      .attr('ry', 4)\r\n      .style('fill', `url(#map-color-gradient-${selectedMetric})`)\r\n      .style('stroke', '#ccc')\r\n      .style('stroke-width', 0.5);\r\n\r\n    // Add legend labels\r\n    svg.append('text')\r\n      .attr('x', legendPosition.x)\r\n      .attr('y', legendPosition.y - 5)\r\n      .attr('fill', 'var(--dark-text)')\r\n      .attr('text-anchor', 'start')\r\n      .attr('font-size', '10px')\r\n      .text('Low');\r\n\r\n    svg.append('text')\r\n      .attr('x', legendPosition.x + legendWidth)\r\n      .attr('y', legendPosition.y - 5)\r\n      .attr('fill', 'var(--dark-text)')\r\n      .attr('text-anchor', 'end')\r\n      .attr('font-size', '10px')\r\n      .text('High');\r\n\r\n    // Create title with applied filters\r\n    const filterText = Object.entries(filters)\r\n      .filter(([key, value]) => value && value !== 'all')\r\n      .map(([key, value]) => `${key}: ${value}`)\r\n      .join(', ');\r\n      \r\n    const titleText = filterText \r\n      ? `${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)} by Country (Filtered by ${filterText})`\r\n      : `${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)} by Country`;\r\n\r\n    svg.append('text')\r\n      .attr('x', legendPosition.x + legendWidth / 2)\r\n      .attr('y', legendPosition.y + 30)\r\n      .attr('fill', 'var(--dark-text)')\r\n      .attr('text-anchor', 'middle')\r\n      .attr('font-size', '12px')\r\n      .text(titleText);\r\n      \r\n    // Add a subtle pulsing animation to countries with highest values\r\n    const topCountries = data\r\n      .sort((a, b) => b.value - a.value)\r\n      .slice(0, 5)\r\n      .map(d => d.name.toLowerCase());\r\n      \r\n    svg.selectAll('.country')\r\n      .filter(d => topCountries.includes(d.properties.name.toLowerCase()))\r\n      .each(function() {\r\n        const element = d3.select(this);\r\n        \r\n        // Create pulsing effect\r\n        function repeat() {\r\n          element\r\n            .transition()\r\n            .duration(1000)\r\n            .attr('stroke-width', 2)\r\n            .attr('stroke-opacity', 1)\r\n            .transition()\r\n            .duration(1000)\r\n            .attr('stroke-width', 0.5)\r\n            .attr('stroke-opacity', 0.7)\r\n            .on('end', repeat);\r\n        }\r\n        \r\n        repeat();\r\n      });\r\n  };\r\n\r\n  const getColorClass = () => {\r\n    switch(selectedMetric) {\r\n      case 'intensity': return 'intensity-theme';\r\n      case 'likelihood': return 'likelihood-theme';\r\n      case 'relevance': return 'relevance-theme';\r\n      default: return 'intensity-theme';\r\n    }\r\n  };\r\n\r\n  const renderActionButtons = () => (\r\n    <div className=\"chart-actions\">\r\n      <button \r\n        className={`chart-action-btn ${selectedMetric === 'intensity' ? 'active' : ''}`}\r\n        onClick={() => handleMetricChange('intensity')}\r\n      >\r\n        Intensity\r\n      </button>\r\n      <button \r\n        className={`chart-action-btn ${selectedMetric === 'likelihood' ? 'active' : ''}`}\r\n        onClick={() => handleMetricChange('likelihood')}\r\n      >\r\n        Likelihood\r\n      </button>\r\n      <button \r\n        className={`chart-action-btn ${selectedMetric === 'relevance' ? 'active' : ''}`}\r\n        onClick={() => handleMetricChange('relevance')}\r\n      >\r\n        Relevance\r\n      </button>\r\n      {selectedCountry && (\r\n        <button \r\n          className=\"chart-action-btn clear-btn\"\r\n          onClick={() => {\r\n            setSelectedCountry(null);\r\n            setCountryDetails(null);\r\n          }}\r\n        >\r\n          Clear Selection\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  // Render country details panel\r\n  const renderCountryDetails = () => {\r\n    if (!selectedCountry) return null;\r\n    \r\n    return (\r\n      <div className=\"country-details-panel\">\r\n        <h3>{selectedCountry} Insights</h3>\r\n        {countryDetailsLoading ? (\r\n          <Loader message=\"Loading country insights...\" />\r\n        ) : countryDetails && countryDetails.length > 0 ? (\r\n          <div className=\"insights-list\">\r\n            {countryDetails.map((insight, index) => (\r\n              <div key={index} className=\"insight-card\">\r\n                <h4>{insight.title || 'Untitled Insight'}</h4>\r\n                <p>{insight.insight}</p>\r\n                <div className=\"insight-meta\">\r\n                  {insight.topic && <span className=\"meta-tag\">Topic: {insight.topic}</span>}\r\n                  {insight.sector && <span className=\"meta-tag\">Sector: {insight.sector}</span>}\r\n                  <div className=\"meta-metrics\">\r\n                    <span className=\"metric intensity\">I: {formatNumber(insight.intensity)}</span>\r\n                    <span className=\"metric likelihood\">L: {formatNumber(insight.likelihood)}</span>\r\n                    <span className=\"metric relevance\">R: {formatNumber(insight.relevance)}</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <NoDataMessage message={`No insights available for ${selectedCountry}`} />\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Create title based on filters\r\n  const getCardTitle = () => {\r\n    const filterText = Object.entries(filters)\r\n      .filter(([key, value]) => value && value !== 'all')\r\n      .map(([key, value]) => `${key}: ${value}`)\r\n      .join(', ');\r\n      \r\n    return filterText \r\n      ? `Global ${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)} Distribution (${filterText})`\r\n      : `Global ${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)} Distribution`;\r\n  };\r\n\r\n  return (\r\n    <CardContainer \r\n      title={getCardTitle()}\r\n      actionButtons={renderActionButtons()}\r\n      className={getColorClass()}\r\n    >\r\n      <div \r\n        ref={containerRef} \r\n        style={{ \r\n          width: '100%', \r\n          minHeight: fullSize ? '600px' : '400px',\r\n          maxHeight: fullSize ? '800px' : '500px'\r\n        }}\r\n        className=\"country-map-container\"\r\n      >\r\n        {loading ? (\r\n          <Loader message=\"Loading map data...\" />\r\n        ) : error ? (\r\n          <NoDataMessage message={error} icon=\"⚠️\" />\r\n        ) : data.length === 0 ? (\r\n          <NoDataMessage message=\"No country data available for the selected filters\" />\r\n        ) : (\r\n          <>\r\n            <svg \r\n              ref={svgRef} \r\n              className={`chart-svg country-map-svg ${getColorClass()}`}\r\n              style={{\r\n                borderRadius: '10px',\r\n                boxShadow: '0 4px 12px rgba(0, 0, 0, 0.05)'\r\n              }}\r\n            ></svg>\r\n            \r\n            {!loading && data.length > 0 && !selectedCountry && (\r\n              <div className=\"map-instructions\">\r\n                <small>Tip: Scroll to zoom, drag to pan, and click on countries for details</small>\r\n              </div>\r\n            )}\r\n            \r\n            {/* Show country details when a country is selected */}\r\n            {selectedCountry && renderCountryDetails()}\r\n          </>\r\n        )}\r\n      </div>\r\n    </CardContainer>\r\n  );\r\n};\r\n\r\nexport default CountryMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}