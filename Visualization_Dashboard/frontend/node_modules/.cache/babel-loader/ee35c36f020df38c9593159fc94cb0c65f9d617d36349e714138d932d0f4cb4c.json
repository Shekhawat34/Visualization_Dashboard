{"ast":null,"code":"import React,{useEffect,useState}from'react';import{getDashboardSummary}from'../api/dashboardApi';import'./Dashboard.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Dashboard=()=>{const[dashboardData,setDashboardData]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[selectedCustomerId,setSelectedCustomerId]=useState(null);// State for selected customer\nconst[customerInteraction,setCustomerInteraction]=useState(\"\");// State for inputting message to customer\nuseEffect(()=>{const fetchDashboardData=async()=>{try{const data=await getDashboardSummary();setDashboardData(data);// Set the fetched data in state\nsetLoading(false);// Stop loading once data is fetched\n}catch(err){setError('Failed to fetch dashboard data');setLoading(false);}};fetchDashboardData();},[]);// Empty dependency array ensures it runs only once when component mounts\n// Handle message send to selected customer\nconst handleSendMessage=async()=>{if(selectedCustomerId&&customerInteraction){try{// Assuming you have a function for sending messages to customers\nawait sendMessageToCustomer(selectedCustomerId,customerInteraction);setCustomerInteraction(\"\");// Clear input after message is sent\nalert(\"Message sent successfully!\");}catch(err){setError('Failed to send message to customer');}}else{setError(\"Please select a customer and enter a message\");}};// Fetch and display customer data for interaction (this can be modified as per backend)\nconst handleCustomerSelect=customerId=>{setSelectedCustomerId(customerId);};if(loading)return/*#__PURE__*/_jsx(\"div\",{children:\"Loading dashboard...\"});if(error)return/*#__PURE__*/_jsx(\"div\",{children:error});return/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Dashboard Overview\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"metrics\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"metric\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Total Customers\"}),/*#__PURE__*/_jsx(\"p\",{children:dashboardData.total_customers})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"metric\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Total Interactions\"}),/*#__PURE__*/_jsx(\"p\",{children:dashboardData.total_interactions})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"metric\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Open Tickets\"}),/*#__PURE__*/_jsx(\"p\",{children:dashboardData.open_tickets})]})]}),/*#__PURE__*/_jsx(\"h3\",{children:\"Intent Distribution\"}),/*#__PURE__*/_jsx(\"ul\",{children:Object.entries(dashboardData.intent_distribution).map(_ref=>{let[intent,count]=_ref;return/*#__PURE__*/_jsxs(\"li\",{children:[intent,\": \",count]},intent);})}),/*#__PURE__*/_jsx(\"h3\",{children:\"Recent Interactions\"}),/*#__PURE__*/_jsx(\"ul\",{children:Object.entries(dashboardData.recent_interactions).map(_ref2=>{let[date,count]=_ref2;return/*#__PURE__*/_jsxs(\"li\",{children:[date,\": \",count]},date);})}),/*#__PURE__*/_jsx(\"h3\",{children:\"Customers\"}),/*#__PURE__*/_jsx(\"div\",{className:\"customer-list\",children:dashboardData.customers&&dashboardData.customers.map(customer=>/*#__PURE__*/_jsxs(\"div\",{className:\"customer-item \".concat(selectedCustomerId===customer.id?'selected':''),onClick:()=>handleCustomerSelect(customer.id),children:[/*#__PURE__*/_jsx(\"h4\",{children:customer.name}),/*#__PURE__*/_jsx(\"p\",{children:customer.email}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Last interaction: \",customer.last_interaction]})]},customer.id))}),selectedCustomerId&&/*#__PURE__*/_jsxs(\"div\",{className:\"customer-interaction\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Send Message to Customer\"}),/*#__PURE__*/_jsx(\"textarea\",{value:customerInteraction,onChange:e=>setCustomerInteraction(e.target.value),placeholder:\"Type your message...\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleSendMessage,children:\"Send Message\"})]})]});};// Assuming you have an API method to send messages to customers\nconst sendMessageToCustomer=async(customerId,message)=>{// Make an API call to send the message\n// Example API interaction (you will modify it as per your backend)\nconst response=await fetch('http://localhost:5000/api/chat',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({customer_id:customerId,message:message})});if(!response.ok){throw new Error('Failed to send message');}return response.json();};export default Dashboard;","map":{"version":3,"names":["React","useEffect","useState","getDashboardSummary","jsx","_jsx","jsxs","_jsxs","Dashboard","dashboardData","setDashboardData","loading","setLoading","error","setError","selectedCustomerId","setSelectedCustomerId","customerInteraction","setCustomerInteraction","fetchDashboardData","data","err","handleSendMessage","sendMessageToCustomer","alert","handleCustomerSelect","customerId","children","className","total_customers","total_interactions","open_tickets","Object","entries","intent_distribution","map","_ref","intent","count","recent_interactions","_ref2","date","customers","customer","concat","id","onClick","name","email","last_interaction","value","onChange","e","target","placeholder","message","response","fetch","method","headers","body","JSON","stringify","customer_id","ok","Error","json"],"sources":["C:/Users/Dell/OneDrive/Desktop/new/frontend/src/components/Dashboard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { getDashboardSummary } from '../api/dashboardApi';\r\nimport './Dashboard.css'; \r\n\r\nconst Dashboard = () => {\r\n  const [dashboardData, setDashboardData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [selectedCustomerId, setSelectedCustomerId] = useState(null);  // State for selected customer\r\n  const [customerInteraction, setCustomerInteraction] = useState(\"\");  // State for inputting message to customer\r\n\r\n  useEffect(() => {\r\n    const fetchDashboardData = async () => {\r\n      try {\r\n        const data = await getDashboardSummary();\r\n        setDashboardData(data);  // Set the fetched data in state\r\n        setLoading(false);  // Stop loading once data is fetched\r\n      } catch (err) {\r\n        setError('Failed to fetch dashboard data');\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchDashboardData();\r\n  }, []);  // Empty dependency array ensures it runs only once when component mounts\r\n\r\n  // Handle message send to selected customer\r\n  const handleSendMessage = async () => {\r\n    if (selectedCustomerId && customerInteraction) {\r\n      try {\r\n        // Assuming you have a function for sending messages to customers\r\n        await sendMessageToCustomer(selectedCustomerId, customerInteraction);\r\n        setCustomerInteraction(\"\");  // Clear input after message is sent\r\n        alert(\"Message sent successfully!\");\r\n      } catch (err) {\r\n        setError('Failed to send message to customer');\r\n      }\r\n    } else {\r\n      setError(\"Please select a customer and enter a message\");\r\n    }\r\n  };\r\n\r\n  // Fetch and display customer data for interaction (this can be modified as per backend)\r\n  const handleCustomerSelect = (customerId) => {\r\n    setSelectedCustomerId(customerId);\r\n  };\r\n\r\n  if (loading) return <div>Loading dashboard...</div>;\r\n  if (error) return <div>{error}</div>;\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n      <h2>Dashboard Overview</h2>\r\n      <div className=\"metrics\">\r\n        <div className=\"metric\">\r\n          <h3>Total Customers</h3>\r\n          <p>{dashboardData.total_customers}</p>\r\n        </div>\r\n        <div className=\"metric\">\r\n          <h3>Total Interactions</h3>\r\n          <p>{dashboardData.total_interactions}</p>\r\n        </div>\r\n        <div className=\"metric\">\r\n          <h3>Open Tickets</h3>\r\n          <p>{dashboardData.open_tickets}</p>\r\n        </div>\r\n      </div>\r\n\r\n      <h3>Intent Distribution</h3>\r\n      <ul>\r\n        {Object.entries(dashboardData.intent_distribution).map(([intent, count]) => (\r\n          <li key={intent}>\r\n            {intent}: {count}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      <h3>Recent Interactions</h3>\r\n      <ul>\r\n        {Object.entries(dashboardData.recent_interactions).map(([date, count]) => (\r\n          <li key={date}>\r\n            {date}: {count}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      <h3>Customers</h3>\r\n      <div className=\"customer-list\">\r\n        {dashboardData.customers && dashboardData.customers.map((customer) => (\r\n          <div \r\n            key={customer.id} \r\n            className={`customer-item ${selectedCustomerId === customer.id ? 'selected' : ''}`}\r\n            onClick={() => handleCustomerSelect(customer.id)}\r\n          >\r\n            <h4>{customer.name}</h4>\r\n            <p>{customer.email}</p>\r\n            <p>Last interaction: {customer.last_interaction}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {selectedCustomerId && (\r\n        <div className=\"customer-interaction\">\r\n          <h3>Send Message to Customer</h3>\r\n          <textarea \r\n            value={customerInteraction} \r\n            onChange={(e) => setCustomerInteraction(e.target.value)} \r\n            placeholder=\"Type your message...\"\r\n          />\r\n          <button onClick={handleSendMessage}>Send Message</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Assuming you have an API method to send messages to customers\r\nconst sendMessageToCustomer = async (customerId, message) => {\r\n  // Make an API call to send the message\r\n  // Example API interaction (you will modify it as per your backend)\r\n  const response = await fetch('http://localhost:5000/api/chat', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      customer_id: customerId,\r\n      message: message,\r\n    }),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Failed to send message');\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}