{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\OneDrive\\\\Desktop\\\\new\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\n\n// Create a Context for Auth\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Provide the AuthContext to the components that need it\nconst AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [authState, setAuthState] = useState(() => {\n    try {\n      const storedUserData = localStorage.getItem('authState');\n      return storedUserData ? JSON.parse(storedUserData) : {\n        isAuthenticated: false,\n        customerId: null,\n        userType: 'guest',\n        userDetails: null\n      };\n    } catch (error) {\n      console.error('Failed to parse authState from localStorage:', error);\n      return {\n        isAuthenticated: false,\n        customerId: null,\n        userType: 'guest',\n        userDetails: null\n      };\n    }\n  });\n\n  // This function will log the user in, either as a customer or a client\n  const login = async (email, password, role) => {\n    try {\n      // Here you would integrate with a real authentication system, e.g., Firebase or an API\n      // For the sake of example, I will assume a mock login process.\n\n      // Example: If email is valid, authenticate user and set state\n      if (email === 'Lokender@gmail.com' && password === 'password12345') {\n        setAuthState({\n          isAuthenticated: true,\n          customerId: '12345',\n          // You would get this from the response or backend\n          userType: role,\n          userDetails: {\n            email,\n            name: 'Test User'\n          } // Mock user details\n        });\n        return true; // Login successful\n      } else {\n        throw new Error('Invalid email or password');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error; // Propagate the error so it can be caught in the Login component\n    }\n  };\n\n  // This function will log the user out\n  const logout = () => {\n    setAuthState({\n      isAuthenticated: false,\n      customerId: null,\n      userType: 'guest',\n      userDetails: null\n    });\n  };\n\n  // Store the authentication state in local storage whenever it changes\n  useEffect(() => {\n    try {\n      if (authState.isAuthenticated) {\n        localStorage.setItem('authState', JSON.stringify(authState));\n      } else {\n        localStorage.removeItem('authState');\n      }\n    } catch (error) {\n      console.error('Failed to save authState to localStorage:', error);\n    }\n  }, [authState]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      authState,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"fSwBoXdtKlQrI5AIDjM7AuYD8qg=\");\n_c = AuthProvider;\nconst useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n\n// Export the AuthContext and AuthProvider\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport { AuthContext, AuthProvider, useAuth };\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","authState","setAuthState","storedUserData","localStorage","getItem","JSON","parse","isAuthenticated","customerId","userType","userDetails","error","console","login","email","password","role","name","Error","logout","setItem","stringify","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/Dell/OneDrive/Desktop/new/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\r\n\r\n// Create a Context for Auth\r\nconst AuthContext = createContext();\r\n\r\n// Provide the AuthContext to the components that need it\r\nconst AuthProvider = ({ children }) => {\r\n  const [authState, setAuthState] = useState(() => {\r\n    try {\r\n      const storedUserData = localStorage.getItem('authState');\r\n      return storedUserData ? JSON.parse(storedUserData) : {\r\n        isAuthenticated: false,\r\n        customerId: null,\r\n        userType: 'guest',\r\n        userDetails: null,\r\n      };\r\n    } catch (error) {\r\n      console.error('Failed to parse authState from localStorage:', error);\r\n      return {\r\n        isAuthenticated: false,\r\n        customerId: null,\r\n        userType: 'guest',\r\n        userDetails: null,\r\n      };\r\n    }\r\n  });\r\n\r\n  // This function will log the user in, either as a customer or a client\r\n  const login = async (email, password, role) => {\r\n    try {\r\n      // Here you would integrate with a real authentication system, e.g., Firebase or an API\r\n      // For the sake of example, I will assume a mock login process.\r\n\r\n      // Example: If email is valid, authenticate user and set state\r\n      if (email === 'Lokender@gmail.com' && password === 'password12345') {\r\n        setAuthState({\r\n          isAuthenticated: true,\r\n          customerId: '12345', // You would get this from the response or backend\r\n          userType: role,\r\n          userDetails: { email, name: 'Test User' }, // Mock user details\r\n        });\r\n        return true; // Login successful\r\n      } else {\r\n        throw new Error('Invalid email or password');\r\n      }\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      throw error; // Propagate the error so it can be caught in the Login component\r\n    }\r\n  };\r\n\r\n  // This function will log the user out\r\n  const logout = () => {\r\n    setAuthState({\r\n      isAuthenticated: false,\r\n      customerId: null,\r\n      userType: 'guest',\r\n      userDetails: null,\r\n    });\r\n  };\r\n\r\n  // Store the authentication state in local storage whenever it changes\r\n  useEffect(() => {\r\n    try {\r\n      if (authState.isAuthenticated) {\r\n        localStorage.setItem('authState', JSON.stringify(authState));\r\n      } else {\r\n        localStorage.removeItem('authState');\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to save authState to localStorage:', error);\r\n    }\r\n  }, [authState]);\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ authState, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nconst useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n\r\n// Export the AuthContext and AuthProvider\r\nexport { AuthContext, AuthProvider, useAuth };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}