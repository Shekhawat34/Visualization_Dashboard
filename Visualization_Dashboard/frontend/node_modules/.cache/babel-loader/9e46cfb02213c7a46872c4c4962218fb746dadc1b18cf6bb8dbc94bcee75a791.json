{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\OneDrive\\\\Desktop\\\\new\\\\frontend\\\\src\\\\components\\\\charts\\\\CountryMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport * as topojson from 'topojson-client';\nimport api from '../../services/api';\nimport CardContainer from '../common/CardContainer';\nimport Loader from '../common/Loader';\nimport NoDataMessage from '../common/NoDataMessage';\nimport { formatNumber, createTooltip, debounce } from '../../utils/helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CountryMap = ({\n  metric = 'intensity',\n  fullSize = false,\n  filters = {}\n}) => {\n  _s();\n  const [data, setData] = useState([]);\n  const [worldData, setWorldData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedMetric, setSelectedMetric] = useState(metric);\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  const [countryDetails, setCountryDetails] = useState(null);\n  const svgRef = useRef(null);\n  const containerRef = useRef(null);\n  const tooltipRef = useRef(null);\n  const detailsPanelRef = useRef(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        // Apply filters to the API call\n        const [topNData, worldTopoJSON] = await Promise.all([api.getTopN(selectedMetric, 'country', 50, filters), fetch('https://unpkg.com/world-atlas@2.0.2/countries-110m.json').then(res => res.json())]);\n        setData(topNData);\n        setWorldData(worldTopoJSON);\n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching map data:', err);\n        setError('Failed to load map data');\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [selectedMetric, filters]);\n  useEffect(() => {\n    if (data.length > 0 && worldData && !loading) {\n      drawMap();\n\n      // Add resize listener\n      const handleResize = debounce(() => {\n        drawMap();\n      }, 300);\n      window.addEventListener('resize', handleResize);\n      return () => window.removeEventListener('resize', handleResize);\n    }\n  }, [data, worldData, loading, selectedCountry]);\n  useEffect(() => {\n    // Fetch country details when a country is selected\n    const fetchCountryDetails = async () => {\n      if (selectedCountry) {\n        try {\n          const countryInsights = await api.getCountryInsights(selectedCountry, filters);\n          setCountryDetails(countryInsights);\n        } catch (err) {\n          console.error('Error fetching country details:', err);\n          setCountryDetails(null);\n        }\n      } else {\n        setCountryDetails(null);\n      }\n    };\n    fetchCountryDetails();\n  }, [selectedCountry, filters]);\n  const handleMetricChange = newMetric => {\n    setSelectedMetric(newMetric);\n  };\n  const drawMap = () => {\n    if (!svgRef.current || !containerRef.current || !worldData) return;\n\n    // Clear previous chart\n    d3.select(svgRef.current).selectAll('*').remove();\n\n    // Set dimensions\n    const containerWidth = containerRef.current.clientWidth;\n    const containerHeight = fullSize ? Math.min(600, containerWidth * 0.6) : Math.min(500, containerWidth * 0.6);\n    const margin = {\n      top: 20,\n      right: 20,\n      bottom: 20,\n      left: 20\n    };\n    const width = containerWidth - margin.left - margin.right;\n    const height = containerHeight - margin.top - margin.bottom;\n\n    // Create SVG\n    const svg = d3.select(svgRef.current).attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n\n    // Create tooltip if not already created\n    if (!tooltipRef.current) {\n      tooltipRef.current = createTooltip(d3);\n    }\n\n    // Create details panel if not already created\n    if (!detailsPanelRef.current) {\n      detailsPanelRef.current = d3.select(containerRef.current).append('div').attr('class', 'country-details-panel').style('position', 'absolute').style('right', '10px').style('top', '10px').style('background', 'white').style('border', '1px solid #ccc').style('border-radius', '4px').style('padding', '10px').style('width', '250px').style('box-shadow', '0 2px 10px rgba(0,0,0,0.1)').style('z-index', 10).style('display', 'none');\n    }\n\n    // Create map projection\n    const projection = d3.geoNaturalEarth1().fitSize([width, height], topojson.feature(worldData, worldData.objects.countries));\n\n    // Create path generator\n    const path = d3.geoPath().projection(projection);\n\n    // Extract countries data\n    const countries = topojson.feature(worldData, worldData.objects.countries).features;\n\n    // Add a background rect for the ocean\n    svg.append(\"rect\").attr(\"width\", width).attr(\"height\", height).attr(\"fill\", \"#E6F2F5\").attr(\"class\", \"ocean-background\");\n\n    // Create color scale based on metric value\n    const colorScale = d3.scaleSequential(selectedMetric === 'intensity' ? d3.interpolateBlues : selectedMetric === 'likelihood' ? d3.interpolateGreens : d3.interpolateOranges).domain([0, d3.max(data, d => d.value) || 1]);\n\n    // Create a map for faster data lookup\n    const dataByCountry = {};\n    data.forEach(d => {\n      dataByCountry[d.name.toLowerCase()] = d;\n    });\n\n    // Draw countries\n    svg.selectAll('.country').data(countries).enter().append('path').attr('class', d => `country ${d.properties.name === selectedCountry ? 'selected' : ''}`).attr('d', path).attr('fill', d => {\n      const countryData = dataByCountry[d.properties.name.toLowerCase()];\n      return countryData ? colorScale(countryData.value) : '#d0d0d0';\n    }).attr('stroke', d => d.properties.name === selectedCountry ? '#333' : '#fff').attr('stroke-width', d => d.properties.name === selectedCountry ? 2 : 0.5).attr('filter', d => d.properties.name === selectedCountry ? 'drop-shadow(0px 0px 5px rgba(0,0,0,0.5))' : null).on('mouseover', function (event, d) {\n      const countryData = dataByCountry[d.properties.name.toLowerCase()];\n      d3.select(this).transition().duration(200).attr('stroke', '#333').attr('stroke-width', 1.5).attr('filter', 'drop-shadow(0px 0px 5px rgba(0,0,0,0.3))');\n\n      // Enhanced tooltip with more details\n      tooltipRef.current.style('opacity', 1).html(`\n            <div class=\"tooltip-header\">${d.properties.name}</div>\n            ${countryData ? `<div class=\"tooltip-content\">\n                  <strong>${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)}:</strong> ${formatNumber(countryData.value)}<br>\n                  <strong>Count:</strong> ${countryData.count} records<br>\n                  ${Object.entries(filters).length > 0 ? `<div class=\"tooltip-filters\">\n                         <small>Applied filters: ${Object.entries(filters).filter(([key, value]) => value && value !== 'all').map(([key, value]) => `${key}: ${value}`).join(', ')}</small>\n                       </div>` : ''}\n                  <small class=\"tooltip-hint\">Click for more details</small>\n                </div>` : '<div class=\"tooltip-content\"><i>No data available</i></div>'}\n          `).style('left', event.pageX + 10 + 'px').style('top', event.pageY - 20 + 'px');\n    }).on('mouseout', function () {\n      d3.select(this).transition().duration(200).attr('stroke', d => d.properties.name === selectedCountry ? '#333' : '#fff').attr('stroke-width', d => d.properties.name === selectedCountry ? 2 : 0.5).attr('filter', d => d.properties.name === selectedCountry ? 'drop-shadow(0px 0px 5px rgba(0,0,0,0.5))' : null);\n      tooltipRef.current.transition().duration(200).style('opacity', 0);\n    }).on('click', function (event, d) {\n      const countryName = d.properties.name;\n\n      // Toggle selection if clicking on already selected country\n      if (selectedCountry === countryName) {\n        setSelectedCountry(null);\n        // Hide details panel\n        detailsPanelRef.current.style('display', 'none');\n      } else {\n        setSelectedCountry(countryName);\n        // Update selection visual\n        svg.selectAll('.country').classed('selected', false);\n        d3.select(this).classed('selected', true);\n      }\n    });\n\n    // Add a gentle zoom effect to the map\n    const zoom = d3.zoom().scaleExtent([1, 8]).on('zoom', event => {\n      svg.selectAll('path').attr('transform', event.transform);\n    });\n    d3.select(svgRef.current).call(zoom);\n\n    // Add legend\n    const legendWidth = 200;\n    const legendHeight = 15;\n    const legendPosition = {\n      x: width - legendWidth - 10,\n      y: height - 40\n    };\n\n    // Create gradient for legend\n    const defs = svg.append('defs');\n    const linearGradient = defs.append('linearGradient').attr('id', `map-color-gradient-${selectedMetric}`).attr('x1', '0%').attr('y1', '0%').attr('x2', '100%').attr('y2', '0%');\n    linearGradient.selectAll('stop').data([{\n      offset: '0%',\n      color: colorScale(0)\n    }, {\n      offset: '100%',\n      color: colorScale(d3.max(data, d => d.value) || 1)\n    }]).enter().append('stop').attr('offset', d => d.offset).attr('stop-color', d => d.color);\n\n    // Draw legend rectangle with rounded corners\n    svg.append('rect').attr('x', legendPosition.x).attr('y', legendPosition.y).attr('width', legendWidth).attr('height', legendHeight).attr('rx', 4).attr('ry', 4).style('fill', `url(#map-color-gradient-${selectedMetric})`).style('stroke', '#ccc').style('stroke-width', 0.5);\n\n    // Add legend labels\n    svg.append('text').attr('x', legendPosition.x).attr('y', legendPosition.y - 5).attr('fill', 'var(--dark-text)').attr('text-anchor', 'start').attr('font-size', '10px').text('Low');\n    svg.append('text').attr('x', legendPosition.x + legendWidth).attr('y', legendPosition.y - 5).attr('fill', 'var(--dark-text)').attr('text-anchor', 'end').attr('font-size', '10px').text('High');\n\n    // Add title with filter info\n    const titleText = `${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)} by Country`;\n    const filterText = Object.entries(filters).length > 0 ? ` (Filtered: ${Object.entries(filters).filter(([key, value]) => value && value !== 'all').map(([key, value]) => `${key}: ${value}`).join(', ')})` : '';\n    svg.append('text').attr('x', legendPosition.x + legendWidth / 2).attr('y', legendPosition.y + 30).attr('fill', 'var(--dark-text)').attr('text-anchor', 'middle').attr('font-size', '12px').text(titleText + filterText);\n\n    // Add a subtle pulsing animation to countries with highest values\n    const topCountries = data.sort((a, b) => b.value - a.value).slice(0, 5).map(d => d.name.toLowerCase());\n    svg.selectAll('.country').filter(d => topCountries.includes(d.properties.name.toLowerCase())).each(function () {\n      const element = d3.select(this);\n\n      // Create pulsing effect\n      function repeat() {\n        element.transition().duration(1000).attr('stroke-width', 2).attr('stroke-opacity', 1).transition().duration(1000).attr('stroke-width', 0.5).attr('stroke-opacity', 0.7).on('end', repeat);\n      }\n      repeat();\n    });\n\n    // Update the details panel if a country is selected\n    if (selectedCountry && countryDetails) {\n      updateCountryDetailsPanel();\n    } else {\n      detailsPanelRef.current.style('display', 'none');\n    }\n  };\n  const updateCountryDetailsPanel = () => {\n    var _countryDetails$, _countryDetails$2, _countryDetails$3;\n    if (!countryDetails || !detailsPanelRef.current || !selectedCountry) return;\n\n    // Format the details HTML\n    const detailsHTML = `\n      <div class=\"details-header\">\n        <h3>${selectedCountry}</h3>\n        <button class=\"close-btn\">×</button>\n      </div>\n      <div class=\"details-content\">\n        <div class=\"details-metrics\">\n          <div class=\"metric\">\n            <span class=\"metric-label\">Intensity</span>\n            <span class=\"metric-value\">${formatNumber(((_countryDetails$ = countryDetails[0]) === null || _countryDetails$ === void 0 ? void 0 : _countryDetails$.intensity) || 'N/A')}</span>\n          </div>\n          <div class=\"metric\">\n            <span class=\"metric-label\">Likelihood</span>\n            <span class=\"metric-value\">${formatNumber(((_countryDetails$2 = countryDetails[0]) === null || _countryDetails$2 === void 0 ? void 0 : _countryDetails$2.likelihood) || 'N/A')}</span>\n          </div>\n          <div class=\"metric\">\n            <span class=\"metric-label\">Relevance</span>\n            <span class=\"metric-value\">${formatNumber(((_countryDetails$3 = countryDetails[0]) === null || _countryDetails$3 === void 0 ? void 0 : _countryDetails$3.relevance) || 'N/A')}</span>\n          </div>\n        </div>\n        ${countryDetails.length > 0 ? `<div class=\"details-insights\">\n            <h4>Top Insights</h4>\n            <ul>\n              ${countryDetails.slice(0, 3).map(insight => `<li>\n                  <strong>${insight.topic || 'Unlabeled'}</strong>\n                  <p>${insight.insight || insight.title || 'No description available'}</p>\n                </li>`).join('')}\n            </ul>\n            ${countryDetails.length > 3 ? `<small class=\"more-insights\">${countryDetails.length - 3} more insights available</small>` : ''}\n          </div>` : '<div class=\"no-insights\">No insights available for this country with current filters</div>'}\n      </div>\n    `;\n\n    // Update and show the panel\n    detailsPanelRef.current.html(detailsHTML).style('display', 'block');\n\n    // Add close button event listener\n    detailsPanelRef.current.select('.close-btn').on('click', () => {\n      setSelectedCountry(null);\n      detailsPanelRef.current.style('display', 'none');\n      // Deselect country on map\n      d3.select(svgRef.current).selectAll('.country').classed('selected', false);\n    });\n  };\n  const getColorClass = () => {\n    switch (selectedMetric) {\n      case 'intensity':\n        return 'intensity-theme';\n      case 'likelihood':\n        return 'likelihood-theme';\n      case 'relevance':\n        return 'relevance-theme';\n      default:\n        return 'intensity-theme';\n    }\n  };\n  const renderActionButtons = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-actions\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: `chart-action-btn ${selectedMetric === 'intensity' ? 'active' : ''}`,\n      onClick: () => handleMetricChange('intensity'),\n      children: \"Intensity\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `chart-action-btn ${selectedMetric === 'likelihood' ? 'active' : ''}`,\n      onClick: () => handleMetricChange('likelihood'),\n      children: \"Likelihood\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `chart-action-btn ${selectedMetric === 'relevance' ? 'active' : ''}`,\n      onClick: () => handleMetricChange('relevance'),\n      children: \"Relevance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 7\n    }, this), Object.keys(filters).length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"active-filters\",\n      children: Object.entries(filters).filter(([key, value]) => value && value !== 'all').map(([key, value], index) => /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"filter-badge\",\n        children: [key, \": \", value]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 421,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(CardContainer, {\n    title: `Global ${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)} Distribution`,\n    actionButtons: renderActionButtons(),\n    className: getColorClass(),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: containerRef,\n      style: {\n        width: '100%',\n        minHeight: fullSize ? '600px' : '400px',\n        maxHeight: fullSize ? '800px' : '500px',\n        position: 'relative' // Important for absolute positioning of details panel\n      },\n      className: \"country-map-container\",\n      children: loading ? /*#__PURE__*/_jsxDEV(Loader, {\n        message: \"Loading map data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 11\n      }, this) : error ? /*#__PURE__*/_jsxDEV(NoDataMessage, {\n        message: error,\n        icon: \"\\u26A0\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 11\n      }, this) : data.length === 0 ? /*#__PURE__*/_jsxDEV(NoDataMessage, {\n        message: \"No country data available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        className: `chart-svg country-map-svg ${getColorClass()}`,\n        style: {\n          borderRadius: '10px',\n          boxShadow: '0 4px 12px rgba(0, 0, 0, 0.05)'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 7\n    }, this), !loading && data.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-instructions\",\n      children: /*#__PURE__*/_jsxDEV(\"small\", {\n        children: \"Tip: Scroll to zoom, drag to pan, and click on countries for detailed insights\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n        .country-details-panel {\n          font-size: 14px;\n          max-height: 80%;\n          overflow-y: auto;\n        }\n        \n        .details-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          border-bottom: 1px solid #eee;\n          margin-bottom: 10px;\n        }\n        \n        .details-header h3 {\n          margin: 0;\n          font-size: 18px;\n        }\n        \n        .close-btn {\n          background: none;\n          border: none;\n          font-size: 20px;\n          cursor: pointer;\n          color: #666;\n        }\n        \n        .details-metrics {\n          display: flex;\n          justify-content: space-between;\n          margin-bottom: 15px;\n        }\n        \n        .metric {\n          text-align: center;\n          padding: 5px;\n          border-radius: 4px;\n          background: #f7f7f7;\n          flex: 1;\n          margin: 0 3px;\n        }\n        \n        .metric-label {\n          display: block;\n          font-size: 12px;\n          color: #666;\n        }\n        \n        .metric-value {\n          display: block;\n          font-size: 16px;\n          font-weight: bold;\n        }\n        \n        .details-insights h4 {\n          margin: 10px 0;\n          font-size: 16px;\n        }\n        \n        .details-insights ul {\n          padding-left: 20px;\n          margin: 0;\n        }\n        \n        .details-insights li {\n          margin-bottom: 10px;\n        }\n        \n        .details-insights li p {\n          margin: 5px 0;\n          font-size: 13px;\n          color: #333;\n        }\n        \n        .more-insights {\n          display: block;\n          text-align: center;\n          color: #666;\n          margin-top: 5px;\n        }\n        \n        .filter-badge {\n          display: inline-block;\n          background: #f0f0f0;\n          padding: 2px 6px;\n          border-radius: 3px;\n          font-size: 12px;\n          margin-left: 10px;\n          color: #666;\n        }\n        \n        .tooltip-filters {\n          margin-top: 5px;\n          color: #666;\n        }\n        \n        .tooltip-hint {\n          display: block;\n          margin-top: 5px;\n          font-style: italic;\n          color: #007bff;\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 455,\n    columnNumber: 5\n  }, this);\n};\n_s(CountryMap, \"dwggMR6WUclnrKzgJUjyUeJNwZc=\");\n_c = CountryMap;\nexport default CountryMap;\nvar _c;\n$RefreshReg$(_c, \"CountryMap\");","map":{"version":3,"names":["React","useState","useEffect","useRef","d3","topojson","api","CardContainer","Loader","NoDataMessage","formatNumber","createTooltip","debounce","jsxDEV","_jsxDEV","CountryMap","metric","fullSize","filters","_s","data","setData","worldData","setWorldData","loading","setLoading","error","setError","selectedMetric","setSelectedMetric","selectedCountry","setSelectedCountry","countryDetails","setCountryDetails","svgRef","containerRef","tooltipRef","detailsPanelRef","fetchData","topNData","worldTopoJSON","Promise","all","getTopN","fetch","then","res","json","err","console","length","drawMap","handleResize","window","addEventListener","removeEventListener","fetchCountryDetails","countryInsights","getCountryInsights","handleMetricChange","newMetric","current","select","selectAll","remove","containerWidth","clientWidth","containerHeight","Math","min","margin","top","right","bottom","left","width","height","svg","attr","append","style","projection","geoNaturalEarth1","fitSize","feature","objects","countries","path","geoPath","features","colorScale","scaleSequential","interpolateBlues","interpolateGreens","interpolateOranges","domain","max","d","value","dataByCountry","forEach","name","toLowerCase","enter","properties","countryData","on","event","transition","duration","html","charAt","toUpperCase","slice","count","Object","entries","filter","key","map","join","pageX","pageY","countryName","classed","zoom","scaleExtent","transform","call","legendWidth","legendHeight","legendPosition","x","y","defs","linearGradient","offset","color","text","titleText","filterText","topCountries","sort","a","b","includes","each","element","repeat","updateCountryDetailsPanel","_countryDetails$","_countryDetails$2","_countryDetails$3","detailsHTML","intensity","likelihood","relevance","insight","topic","title","getColorClass","renderActionButtons","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","keys","index","actionButtons","ref","minHeight","maxHeight","position","message","icon","borderRadius","boxShadow","jsx","_c","$RefreshReg$"],"sources":["C:/Users/Dell/OneDrive/Desktop/new/frontend/src/components/charts/CountryMap.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport * as d3 from 'd3';\r\nimport * as topojson from 'topojson-client';\r\nimport api from '../../services/api';\r\nimport CardContainer from '../common/CardContainer';\r\nimport Loader from '../common/Loader';\r\nimport NoDataMessage from '../common/NoDataMessage';\r\nimport { formatNumber, createTooltip, debounce } from '../../utils/helpers';\r\n\r\nconst CountryMap = ({ metric = 'intensity', fullSize = false, filters = {} }) => {\r\n  const [data, setData] = useState([]);\r\n  const [worldData, setWorldData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [selectedMetric, setSelectedMetric] = useState(metric);\r\n  const [selectedCountry, setSelectedCountry] = useState(null);\r\n  const [countryDetails, setCountryDetails] = useState(null);\r\n  const svgRef = useRef(null);\r\n  const containerRef = useRef(null);\r\n  const tooltipRef = useRef(null);\r\n  const detailsPanelRef = useRef(null);\r\n  \r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        // Apply filters to the API call\r\n        const [topNData, worldTopoJSON] = await Promise.all([\r\n          api.getTopN(selectedMetric, 'country', 50, filters),\r\n          fetch('https://unpkg.com/world-atlas@2.0.2/countries-110m.json').then(res => res.json())\r\n        ]);\r\n        \r\n        setData(topNData);\r\n        setWorldData(worldTopoJSON);\r\n        setLoading(false);\r\n      } catch (err) {\r\n        console.error('Error fetching map data:', err);\r\n        setError('Failed to load map data');\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [selectedMetric, filters]);\r\n\r\n  useEffect(() => {\r\n    if (data.length > 0 && worldData && !loading) {\r\n      drawMap();\r\n      \r\n      // Add resize listener\r\n      const handleResize = debounce(() => {\r\n        drawMap();\r\n      }, 300);\r\n      \r\n      window.addEventListener('resize', handleResize);\r\n      return () => window.removeEventListener('resize', handleResize);\r\n    }\r\n  }, [data, worldData, loading, selectedCountry]);\r\n\r\n  useEffect(() => {\r\n    // Fetch country details when a country is selected\r\n    const fetchCountryDetails = async () => {\r\n      if (selectedCountry) {\r\n        try {\r\n          const countryInsights = await api.getCountryInsights(selectedCountry, filters);\r\n          setCountryDetails(countryInsights);\r\n        } catch (err) {\r\n          console.error('Error fetching country details:', err);\r\n          setCountryDetails(null);\r\n        }\r\n      } else {\r\n        setCountryDetails(null);\r\n      }\r\n    };\r\n\r\n    fetchCountryDetails();\r\n  }, [selectedCountry, filters]);\r\n\r\n  const handleMetricChange = (newMetric) => {\r\n    setSelectedMetric(newMetric);\r\n  };\r\n\r\n  const drawMap = () => {\r\n    if (!svgRef.current || !containerRef.current || !worldData) return;\r\n\r\n    // Clear previous chart\r\n    d3.select(svgRef.current).selectAll('*').remove();\r\n\r\n    // Set dimensions\r\n    const containerWidth = containerRef.current.clientWidth;\r\n    const containerHeight = fullSize ? Math.min(600, containerWidth * 0.6) : Math.min(500, containerWidth * 0.6);\r\n    const margin = { top: 20, right: 20, bottom: 20, left: 20 };\r\n    const width = containerWidth - margin.left - margin.right;\r\n    const height = containerHeight - margin.top - margin.bottom;\r\n\r\n    // Create SVG\r\n    const svg = d3.select(svgRef.current)\r\n      .attr('width', width + margin.left + margin.right)\r\n      .attr('height', height + margin.top + margin.bottom)\r\n      .append('g')\r\n      .attr('transform', `translate(${margin.left},${margin.top})`);\r\n\r\n    // Create tooltip if not already created\r\n    if (!tooltipRef.current) {\r\n      tooltipRef.current = createTooltip(d3);\r\n    }\r\n\r\n    // Create details panel if not already created\r\n    if (!detailsPanelRef.current) {\r\n      detailsPanelRef.current = d3.select(containerRef.current)\r\n        .append('div')\r\n        .attr('class', 'country-details-panel')\r\n        .style('position', 'absolute')\r\n        .style('right', '10px')\r\n        .style('top', '10px')\r\n        .style('background', 'white')\r\n        .style('border', '1px solid #ccc')\r\n        .style('border-radius', '4px')\r\n        .style('padding', '10px')\r\n        .style('width', '250px')\r\n        .style('box-shadow', '0 2px 10px rgba(0,0,0,0.1)')\r\n        .style('z-index', 10)\r\n        .style('display', 'none');\r\n    }\r\n\r\n    // Create map projection\r\n    const projection = d3.geoNaturalEarth1()\r\n      .fitSize([width, height], topojson.feature(worldData, worldData.objects.countries));\r\n\r\n    // Create path generator\r\n    const path = d3.geoPath().projection(projection);\r\n\r\n    // Extract countries data\r\n    const countries = topojson.feature(worldData, worldData.objects.countries).features;\r\n\r\n    // Add a background rect for the ocean\r\n    svg.append(\"rect\")\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", height)\r\n      .attr(\"fill\", \"#E6F2F5\")\r\n      .attr(\"class\", \"ocean-background\");\r\n\r\n    // Create color scale based on metric value\r\n    const colorScale = d3.scaleSequential(\r\n      selectedMetric === 'intensity' ? d3.interpolateBlues :\r\n      selectedMetric === 'likelihood' ? d3.interpolateGreens :\r\n      d3.interpolateOranges\r\n    ).domain([0, d3.max(data, d => d.value) || 1]);\r\n\r\n    // Create a map for faster data lookup\r\n    const dataByCountry = {};\r\n    data.forEach(d => {\r\n      dataByCountry[d.name.toLowerCase()] = d;\r\n    });\r\n\r\n    // Draw countries\r\n    svg.selectAll('.country')\r\n      .data(countries)\r\n      .enter()\r\n      .append('path')\r\n      .attr('class', d => `country ${d.properties.name === selectedCountry ? 'selected' : ''}`)\r\n      .attr('d', path)\r\n      .attr('fill', d => {\r\n        const countryData = dataByCountry[d.properties.name.toLowerCase()];\r\n        return countryData ? colorScale(countryData.value) : '#d0d0d0';\r\n      })\r\n      .attr('stroke', d => d.properties.name === selectedCountry ? '#333' : '#fff')\r\n      .attr('stroke-width', d => d.properties.name === selectedCountry ? 2 : 0.5)\r\n      .attr('filter', d => d.properties.name === selectedCountry ? 'drop-shadow(0px 0px 5px rgba(0,0,0,0.5))' : null)\r\n      .on('mouseover', function(event, d) {\r\n        const countryData = dataByCountry[d.properties.name.toLowerCase()];\r\n        \r\n        d3.select(this)\r\n          .transition()\r\n          .duration(200)\r\n          .attr('stroke', '#333')\r\n          .attr('stroke-width', 1.5)\r\n          .attr('filter', 'drop-shadow(0px 0px 5px rgba(0,0,0,0.3))');\r\n        \r\n        // Enhanced tooltip with more details\r\n        tooltipRef.current\r\n          .style('opacity', 1)\r\n          .html(`\r\n            <div class=\"tooltip-header\">${d.properties.name}</div>\r\n            ${countryData \r\n              ? `<div class=\"tooltip-content\">\r\n                  <strong>${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)}:</strong> ${formatNumber(countryData.value)}<br>\r\n                  <strong>Count:</strong> ${countryData.count} records<br>\r\n                  ${Object.entries(filters).length > 0 \r\n                    ? `<div class=\"tooltip-filters\">\r\n                         <small>Applied filters: ${Object.entries(filters)\r\n                           .filter(([key, value]) => value && value !== 'all')\r\n                           .map(([key, value]) => `${key}: ${value}`)\r\n                           .join(', ')}</small>\r\n                       </div>`\r\n                    : ''}\r\n                  <small class=\"tooltip-hint\">Click for more details</small>\r\n                </div>`\r\n              : '<div class=\"tooltip-content\"><i>No data available</i></div>'}\r\n          `)\r\n          .style('left', (event.pageX + 10) + 'px')\r\n          .style('top', (event.pageY - 20) + 'px');\r\n      })\r\n      .on('mouseout', function() {\r\n        d3.select(this)\r\n          .transition()\r\n          .duration(200)\r\n          .attr('stroke', d => d.properties.name === selectedCountry ? '#333' : '#fff')\r\n          .attr('stroke-width', d => d.properties.name === selectedCountry ? 2 : 0.5)\r\n          .attr('filter', d => d.properties.name === selectedCountry ? 'drop-shadow(0px 0px 5px rgba(0,0,0,0.5))' : null);\r\n        \r\n        tooltipRef.current\r\n          .transition()\r\n          .duration(200)\r\n          .style('opacity', 0);\r\n      })\r\n      .on('click', function(event, d) {\r\n        const countryName = d.properties.name;\r\n        \r\n        // Toggle selection if clicking on already selected country\r\n        if (selectedCountry === countryName) {\r\n          setSelectedCountry(null);\r\n          // Hide details panel\r\n          detailsPanelRef.current.style('display', 'none');\r\n        } else {\r\n          setSelectedCountry(countryName);\r\n          // Update selection visual\r\n          svg.selectAll('.country').classed('selected', false);\r\n          d3.select(this).classed('selected', true);\r\n        }\r\n      });\r\n\r\n    // Add a gentle zoom effect to the map\r\n    const zoom = d3.zoom()\r\n      .scaleExtent([1, 8])\r\n      .on('zoom', (event) => {\r\n        svg.selectAll('path')\r\n          .attr('transform', event.transform);\r\n      });\r\n\r\n    d3.select(svgRef.current)\r\n      .call(zoom);\r\n\r\n    // Add legend\r\n    const legendWidth = 200;\r\n    const legendHeight = 15;\r\n    const legendPosition = {\r\n      x: width - legendWidth - 10,\r\n      y: height - 40\r\n    };\r\n\r\n    // Create gradient for legend\r\n    const defs = svg.append('defs');\r\n    const linearGradient = defs.append('linearGradient')\r\n      .attr('id', `map-color-gradient-${selectedMetric}`)\r\n      .attr('x1', '0%')\r\n      .attr('y1', '0%')\r\n      .attr('x2', '100%')\r\n      .attr('y2', '0%');\r\n\r\n    linearGradient.selectAll('stop')\r\n      .data([\r\n        {offset: '0%', color: colorScale(0)},\r\n        {offset: '100%', color: colorScale(d3.max(data, d => d.value) || 1)}\r\n      ])\r\n      .enter().append('stop')\r\n      .attr('offset', d => d.offset)\r\n      .attr('stop-color', d => d.color);\r\n\r\n    // Draw legend rectangle with rounded corners\r\n    svg.append('rect')\r\n      .attr('x', legendPosition.x)\r\n      .attr('y', legendPosition.y)\r\n      .attr('width', legendWidth)\r\n      .attr('height', legendHeight)\r\n      .attr('rx', 4)\r\n      .attr('ry', 4)\r\n      .style('fill', `url(#map-color-gradient-${selectedMetric})`)\r\n      .style('stroke', '#ccc')\r\n      .style('stroke-width', 0.5);\r\n\r\n    // Add legend labels\r\n    svg.append('text')\r\n      .attr('x', legendPosition.x)\r\n      .attr('y', legendPosition.y - 5)\r\n      .attr('fill', 'var(--dark-text)')\r\n      .attr('text-anchor', 'start')\r\n      .attr('font-size', '10px')\r\n      .text('Low');\r\n\r\n    svg.append('text')\r\n      .attr('x', legendPosition.x + legendWidth)\r\n      .attr('y', legendPosition.y - 5)\r\n      .attr('fill', 'var(--dark-text)')\r\n      .attr('text-anchor', 'end')\r\n      .attr('font-size', '10px')\r\n      .text('High');\r\n\r\n    // Add title with filter info\r\n    const titleText = `${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)} by Country`;\r\n    const filterText = Object.entries(filters).length > 0 \r\n      ? ` (Filtered: ${Object.entries(filters)\r\n          .filter(([key, value]) => value && value !== 'all')\r\n          .map(([key, value]) => `${key}: ${value}`)\r\n          .join(', ')})`\r\n      : '';\r\n      \r\n    svg.append('text')\r\n      .attr('x', legendPosition.x + legendWidth / 2)\r\n      .attr('y', legendPosition.y + 30)\r\n      .attr('fill', 'var(--dark-text)')\r\n      .attr('text-anchor', 'middle')\r\n      .attr('font-size', '12px')\r\n      .text(titleText + filterText);\r\n      \r\n    // Add a subtle pulsing animation to countries with highest values\r\n    const topCountries = data\r\n      .sort((a, b) => b.value - a.value)\r\n      .slice(0, 5)\r\n      .map(d => d.name.toLowerCase());\r\n      \r\n    svg.selectAll('.country')\r\n      .filter(d => topCountries.includes(d.properties.name.toLowerCase()))\r\n      .each(function() {\r\n        const element = d3.select(this);\r\n        \r\n        // Create pulsing effect\r\n        function repeat() {\r\n          element\r\n            .transition()\r\n            .duration(1000)\r\n            .attr('stroke-width', 2)\r\n            .attr('stroke-opacity', 1)\r\n            .transition()\r\n            .duration(1000)\r\n            .attr('stroke-width', 0.5)\r\n            .attr('stroke-opacity', 0.7)\r\n            .on('end', repeat);\r\n        }\r\n        \r\n        repeat();\r\n      });\r\n      \r\n    // Update the details panel if a country is selected\r\n    if (selectedCountry && countryDetails) {\r\n      updateCountryDetailsPanel();\r\n    } else {\r\n      detailsPanelRef.current.style('display', 'none');\r\n    }\r\n  };\r\n  \r\n  const updateCountryDetailsPanel = () => {\r\n    if (!countryDetails || !detailsPanelRef.current || !selectedCountry) return;\r\n    \r\n    // Format the details HTML\r\n    const detailsHTML = `\r\n      <div class=\"details-header\">\r\n        <h3>${selectedCountry}</h3>\r\n        <button class=\"close-btn\">×</button>\r\n      </div>\r\n      <div class=\"details-content\">\r\n        <div class=\"details-metrics\">\r\n          <div class=\"metric\">\r\n            <span class=\"metric-label\">Intensity</span>\r\n            <span class=\"metric-value\">${formatNumber(countryDetails[0]?.intensity || 'N/A')}</span>\r\n          </div>\r\n          <div class=\"metric\">\r\n            <span class=\"metric-label\">Likelihood</span>\r\n            <span class=\"metric-value\">${formatNumber(countryDetails[0]?.likelihood || 'N/A')}</span>\r\n          </div>\r\n          <div class=\"metric\">\r\n            <span class=\"metric-label\">Relevance</span>\r\n            <span class=\"metric-value\">${formatNumber(countryDetails[0]?.relevance || 'N/A')}</span>\r\n          </div>\r\n        </div>\r\n        ${countryDetails.length > 0 ? \r\n          `<div class=\"details-insights\">\r\n            <h4>Top Insights</h4>\r\n            <ul>\r\n              ${countryDetails.slice(0, 3).map(insight => \r\n                `<li>\r\n                  <strong>${insight.topic || 'Unlabeled'}</strong>\r\n                  <p>${insight.insight || insight.title || 'No description available'}</p>\r\n                </li>`\r\n              ).join('')}\r\n            </ul>\r\n            ${countryDetails.length > 3 ? \r\n              `<small class=\"more-insights\">${countryDetails.length - 3} more insights available</small>` : \r\n              ''}\r\n          </div>` : \r\n          '<div class=\"no-insights\">No insights available for this country with current filters</div>'\r\n        }\r\n      </div>\r\n    `;\r\n    \r\n    // Update and show the panel\r\n    detailsPanelRef.current\r\n      .html(detailsHTML)\r\n      .style('display', 'block');\r\n      \r\n    // Add close button event listener\r\n    detailsPanelRef.current.select('.close-btn')\r\n      .on('click', () => {\r\n        setSelectedCountry(null);\r\n        detailsPanelRef.current.style('display', 'none');\r\n        // Deselect country on map\r\n        d3.select(svgRef.current).selectAll('.country').classed('selected', false);\r\n      });\r\n  };\r\n\r\n  const getColorClass = () => {\r\n    switch(selectedMetric) {\r\n      case 'intensity': return 'intensity-theme';\r\n      case 'likelihood': return 'likelihood-theme';\r\n      case 'relevance': return 'relevance-theme';\r\n      default: return 'intensity-theme';\r\n    }\r\n  };\r\n\r\n  const renderActionButtons = () => (\r\n    <div className=\"chart-actions\">\r\n      <button \r\n        className={`chart-action-btn ${selectedMetric === 'intensity' ? 'active' : ''}`}\r\n        onClick={() => handleMetricChange('intensity')}\r\n      >\r\n        Intensity\r\n      </button>\r\n      <button \r\n        className={`chart-action-btn ${selectedMetric === 'likelihood' ? 'active' : ''}`}\r\n        onClick={() => handleMetricChange('likelihood')}\r\n      >\r\n        Likelihood\r\n      </button>\r\n      <button \r\n        className={`chart-action-btn ${selectedMetric === 'relevance' ? 'active' : ''}`}\r\n        onClick={() => handleMetricChange('relevance')}\r\n      >\r\n        Relevance\r\n      </button>\r\n      {Object.keys(filters).length > 0 && (\r\n        <div className=\"active-filters\">\r\n          {Object.entries(filters)\r\n            .filter(([key, value]) => value && value !== 'all')\r\n            .map(([key, value], index) => (\r\n              <span key={key} className=\"filter-badge\">\r\n                {key}: {value}\r\n              </span>\r\n            ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <CardContainer \r\n      title={`Global ${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)} Distribution`}\r\n      actionButtons={renderActionButtons()}\r\n      className={getColorClass()}\r\n    >\r\n      <div \r\n        ref={containerRef} \r\n        style={{ \r\n          width: '100%', \r\n          minHeight: fullSize ? '600px' : '400px',\r\n          maxHeight: fullSize ? '800px' : '500px',\r\n          position: 'relative'  // Important for absolute positioning of details panel\r\n        }}\r\n        className=\"country-map-container\"\r\n      >\r\n        {loading ? (\r\n          <Loader message=\"Loading map data...\" />\r\n        ) : error ? (\r\n          <NoDataMessage message={error} icon=\"⚠️\" />\r\n        ) : data.length === 0 ? (\r\n          <NoDataMessage message=\"No country data available\" />\r\n        ) : (\r\n          <svg \r\n            ref={svgRef} \r\n            className={`chart-svg country-map-svg ${getColorClass()}`}\r\n            style={{\r\n              borderRadius: '10px',\r\n              boxShadow: '0 4px 12px rgba(0, 0, 0, 0.05)'\r\n            }}\r\n          ></svg>\r\n        )}\r\n      </div>\r\n      \r\n      {!loading && data.length > 0 && (\r\n        <div className=\"map-instructions\">\r\n          <small>Tip: Scroll to zoom, drag to pan, and click on countries for detailed insights</small>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Additional CSS to be added to your stylesheet */}\r\n      <style jsx>{`\r\n        .country-details-panel {\r\n          font-size: 14px;\r\n          max-height: 80%;\r\n          overflow-y: auto;\r\n        }\r\n        \r\n        .details-header {\r\n          display: flex;\r\n          justify-content: space-between;\r\n          align-items: center;\r\n          border-bottom: 1px solid #eee;\r\n          margin-bottom: 10px;\r\n        }\r\n        \r\n        .details-header h3 {\r\n          margin: 0;\r\n          font-size: 18px;\r\n        }\r\n        \r\n        .close-btn {\r\n          background: none;\r\n          border: none;\r\n          font-size: 20px;\r\n          cursor: pointer;\r\n          color: #666;\r\n        }\r\n        \r\n        .details-metrics {\r\n          display: flex;\r\n          justify-content: space-between;\r\n          margin-bottom: 15px;\r\n        }\r\n        \r\n        .metric {\r\n          text-align: center;\r\n          padding: 5px;\r\n          border-radius: 4px;\r\n          background: #f7f7f7;\r\n          flex: 1;\r\n          margin: 0 3px;\r\n        }\r\n        \r\n        .metric-label {\r\n          display: block;\r\n          font-size: 12px;\r\n          color: #666;\r\n        }\r\n        \r\n        .metric-value {\r\n          display: block;\r\n          font-size: 16px;\r\n          font-weight: bold;\r\n        }\r\n        \r\n        .details-insights h4 {\r\n          margin: 10px 0;\r\n          font-size: 16px;\r\n        }\r\n        \r\n        .details-insights ul {\r\n          padding-left: 20px;\r\n          margin: 0;\r\n        }\r\n        \r\n        .details-insights li {\r\n          margin-bottom: 10px;\r\n        }\r\n        \r\n        .details-insights li p {\r\n          margin: 5px 0;\r\n          font-size: 13px;\r\n          color: #333;\r\n        }\r\n        \r\n        .more-insights {\r\n          display: block;\r\n          text-align: center;\r\n          color: #666;\r\n          margin-top: 5px;\r\n        }\r\n        \r\n        .filter-badge {\r\n          display: inline-block;\r\n          background: #f0f0f0;\r\n          padding: 2px 6px;\r\n          border-radius: 3px;\r\n          font-size: 12px;\r\n          margin-left: 10px;\r\n          color: #666;\r\n        }\r\n        \r\n        .tooltip-filters {\r\n          margin-top: 5px;\r\n          color: #666;\r\n        }\r\n        \r\n        .tooltip-hint {\r\n          display: block;\r\n          margin-top: 5px;\r\n          font-style: italic;\r\n          color: #007bff;\r\n        }\r\n      `}</style>\r\n    </CardContainer>\r\n  );\r\n};\r\n\r\nexport default CountryMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}