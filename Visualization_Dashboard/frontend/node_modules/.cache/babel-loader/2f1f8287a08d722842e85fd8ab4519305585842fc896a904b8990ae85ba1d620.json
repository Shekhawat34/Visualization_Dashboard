{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\nconst api = {\n  // Get all data with optional filters\n  getData: async (filters = {}) => {\n    try {\n      const response = await axios.get(`${API_URL}/data`, {\n        params: filters\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      throw error;\n    }\n  },\n  // Get all filter options\n  getFilters: async () => {\n    try {\n      const response = await axios.get(`${API_URL}/filters`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching filters:', error);\n      throw error;\n    }\n  },\n  // Get aggregated metrics\n  getMetrics: async (groupBy = 'year', metric = 'intensity') => {\n    try {\n      const response = await axios.get(`${API_URL}/metrics`, {\n        params: {\n          group_by: groupBy,\n          metric\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching metrics:', error);\n      throw error;\n    }\n  },\n  // Get top N entries\n  getTopN: async (metric = 'intensity', groupBy = 'country', limit = 10) => {\n    try {\n      const response = await axios.get(`${API_URL}/topN`, {\n        params: {\n          metric,\n          group_by: groupBy,\n          limit\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching topN:', error);\n      throw error;\n    }\n  },\n  // Get time series data\n  getTimeseries: async (metric = 'intensity') => {\n    try {\n      const response = await axios.get(`${API_URL}/timeseries`, {\n        params: {\n          metric\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching timeseries:', error);\n      throw error;\n    }\n  },\n  // Get topic analysis\n  getTopics: async () => {\n    try {\n      const response = await axios.get(`${API_URL}/topics`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching topics:', error);\n      throw error;\n    }\n  },\n  // Get region analysis\n  getRegions: async () => {\n    try {\n      const response = await axios.get(`${API_URL}/regions`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching regions:', error);\n      throw error;\n    }\n  },\n  // Get sector analysis\n  getSectors: async () => {\n    try {\n      const response = await axios.get(`${API_URL}/sectors`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching sectors:', error);\n      throw error;\n    }\n  },\n  // Get PEST analysis\n  getPEST: async () => {\n    try {\n      const response = await axios.get(`${API_URL}/pest`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching PEST analysis:', error);\n      throw error;\n    }\n  },\n  // Get country insights\n  getCountryInsights: async country => {\n    try {\n      const response = await axios.get(`${API_URL}/country-insights`, {\n        params: {\n          country\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching country insights:', error);\n      throw error;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","api","getData","filters","response","get","params","data","error","console","getFilters","getMetrics","groupBy","metric","group_by","getTopN","limit","getTimeseries","getTopics","getRegions","getSectors","getPEST","getCountryInsights","country"],"sources":["C:/Users/Dell/OneDrive/Desktop/new/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\nconst api = {\r\n  // Get all data with optional filters\r\n  getData: async (filters = {}) => {\r\n    try {\r\n      const response = await axios.get(`${API_URL}/data`, { params: filters });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get all filter options\r\n  getFilters: async () => {\r\n    try {\r\n      const response = await axios.get(`${API_URL}/filters`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching filters:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get aggregated metrics\r\n  getMetrics: async (groupBy = 'year', metric = 'intensity') => {\r\n    try {\r\n      const response = await axios.get(`${API_URL}/metrics`, {\r\n        params: { group_by: groupBy, metric }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching metrics:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get top N entries\r\n  getTopN: async (metric = 'intensity', groupBy = 'country', limit = 10) => {\r\n    try {\r\n      const response = await axios.get(`${API_URL}/topN`, {\r\n        params: { metric, group_by: groupBy, limit }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching topN:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get time series data\r\n  getTimeseries: async (metric = 'intensity') => {\r\n    try {\r\n      const response = await axios.get(`${API_URL}/timeseries`, {\r\n        params: { metric }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching timeseries:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get topic analysis\r\n  getTopics: async () => {\r\n    try {\r\n      const response = await axios.get(`${API_URL}/topics`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching topics:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get region analysis\r\n  getRegions: async () => {\r\n    try {\r\n      const response = await axios.get(`${API_URL}/regions`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching regions:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get sector analysis\r\n  getSectors: async () => {\r\n    try {\r\n      const response = await axios.get(`${API_URL}/sectors`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching sectors:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get PEST analysis\r\n  getPEST: async () => {\r\n    try {\r\n      const response = await axios.get(`${API_URL}/pest`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching PEST analysis:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get country insights\r\n  getCountryInsights: async (country) => {\r\n    try {\r\n      const response = await axios.get(`${API_URL}/country-insights`, {\r\n        params: { country }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching country insights:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}