{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\OneDrive\\\\Desktop\\\\new\\\\frontend\\\\src\\\\components\\\\charts\\\\CountryMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport * as topojson from 'topojson-client';\nimport api from '../../services/api';\nimport CardContainer from '../common/CardContainer';\nimport Loader from '../common/Loader';\nimport NoDataMessage from '../common/NoDataMessage';\nimport { formatNumber, createTooltip, debounce } from '../../utils/helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CountryMap = ({\n  metric = 'intensity',\n  fullSize = false\n}) => {\n  _s();\n  const [data, setData] = useState([]);\n  const [worldData, setWorldData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedMetric, setSelectedMetric] = useState(metric);\n  const svgRef = useRef(null);\n  const containerRef = useRef(null);\n  const tooltipRef = useRef(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        const [topNData, worldTopoJSON] = await Promise.all([api.getTopN(selectedMetric, 'country', 50), fetch('https://unpkg.com/world-atlas@2.0.2/countries-110m.json').then(res => res.json())]);\n        setData(topNData);\n        setWorldData(worldTopoJSON);\n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching map data:', err);\n        setError('Failed to load map data');\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [selectedMetric]);\n  useEffect(() => {\n    if (data.length > 0 && worldData && !loading) {\n      drawMap();\n\n      // Add resize listener\n      const handleResize = debounce(() => {\n        drawMap();\n      }, 300);\n      window.addEventListener('resize', handleResize);\n      return () => window.removeEventListener('resize', handleResize);\n    }\n  }, [data, worldData, loading]);\n  const handleMetricChange = newMetric => {\n    setSelectedMetric(newMetric);\n  };\n  const drawMap = () => {\n    if (!svgRef.current || !containerRef.current || !worldData) return;\n\n    // Clear previous chart\n    d3.select(svgRef.current).selectAll('*').remove();\n\n    // Set dimensions\n    const containerWidth = containerRef.current.clientWidth;\n    const containerHeight = fullSize ? Math.min(600, containerWidth * 0.6) : Math.min(500, containerWidth * 0.6);\n    const margin = {\n      top: 20,\n      right: 20,\n      bottom: 20,\n      left: 20\n    };\n    const width = containerWidth - margin.left - margin.right;\n    const height = containerHeight - margin.top - margin.bottom;\n\n    // Create SVG\n    const svg = d3.select(svgRef.current).attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n\n    // Create tooltip if not already created\n    if (!tooltipRef.current) {\n      tooltipRef.current = createTooltip(d3);\n    }\n\n    // Create map projection\n    const projection = d3.geoNaturalEarth1().fitSize([width, height], topojson.feature(worldData, worldData.objects.countries));\n\n    // Create path generator\n    const path = d3.geoPath().projection(projection);\n\n    // Extract countries data\n    const countries = topojson.feature(worldData, worldData.objects.countries).features;\n\n    // Add a background rect for the ocean\n    svg.append(\"rect\").attr(\"width\", width).attr(\"height\", height).attr(\"fill\", \"#E6F2F5\").attr(\"class\", \"ocean-background\");\n\n    // Create color scale based on metric value\n    const colorScale = d3.scaleSequential(selectedMetric === 'intensity' ? d3.interpolateBlues : selectedMetric === 'likelihood' ? d3.interpolateGreens : d3.interpolateOranges).domain([0, d3.max(data, d => d.value)]);\n\n    // Create a map for faster data lookup\n    const dataByCountry = {};\n    data.forEach(d => {\n      dataByCountry[d.name.toLowerCase()] = d;\n    });\n\n    // Draw countries\n    svg.selectAll('.country').data(countries).enter().append('path').attr('class', 'country').attr('d', path).attr('fill', d => {\n      const countryData = dataByCountry[d.properties.name.toLowerCase()];\n      return countryData ? colorScale(countryData.value) : '#d0d0d0';\n    }).attr('stroke', '#fff').attr('stroke-width', 0.5).on('mouseover', function (event, d) {\n      const countryData = dataByCountry[d.properties.name.toLowerCase()];\n      d3.select(this).transition().duration(200).attr('stroke', '#333').attr('stroke-width', 1.5).attr('filter', 'drop-shadow(0px 0px 5px rgba(0,0,0,0.3))');\n      tooltipRef.current.style('opacity', 1).html(`\n            <div class=\"tooltip-header\">${d.properties.name}</div>\n            ${countryData ? `<div class=\"tooltip-content\">\n                  <strong>${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)}:</strong> ${formatNumber(countryData.value)}<br>\n                  <strong>Count:</strong> ${countryData.count} records\n                </div>` : '<div class=\"tooltip-content\"><i>No data available</i></div>'}\n          `).style('left', event.pageX + 10 + 'px').style('top', event.pageY - 20 + 'px');\n    }).on('mouseout', function () {\n      d3.select(this).transition().duration(200).attr('stroke', '#fff').attr('stroke-width', 0.5).attr('filter', null);\n      tooltipRef.current.transition().duration(200).style('opacity', 0);\n    }).on('click', function (event, d) {\n      const countryName = d.properties.name;\n      // Highlight selected country\n      svg.selectAll('.country').classed('selected', false);\n      d3.select(this).classed('selected', true);\n\n      // Optionally navigate to country insights or show detailed data\n      // window.location.href = `/country-insights?country=${encodeURIComponent(countryName)}`;\n    });\n\n    // Add a gentle zoom effect to the map\n    const zoom = d3.zoom().scaleExtent([1, 8]).on('zoom', event => {\n      svg.selectAll('path').attr('transform', event.transform);\n    });\n    d3.select(svgRef.current).call(zoom);\n\n    // Add legend\n    const legendWidth = 200;\n    const legendHeight = 15;\n    const legendPosition = {\n      x: width - legendWidth - 10,\n      y: height - 40\n    };\n\n    // Create gradient for legend\n    const defs = svg.append('defs');\n    const linearGradient = defs.append('linearGradient').attr('id', `map-color-gradient-${selectedMetric}`).attr('x1', '0%').attr('y1', '0%').attr('x2', '100%').attr('y2', '0%');\n    linearGradient.selectAll('stop').data([{\n      offset: '0%',\n      color: colorScale(0)\n    }, {\n      offset: '100%',\n      color: colorScale(d3.max(data, d => d.value))\n    }]).enter().append('stop').attr('offset', d => d.offset).attr('stop-color', d => d.color);\n\n    // Draw legend rectangle with rounded corners\n    svg.append('rect').attr('x', legendPosition.x).attr('y', legendPosition.y).attr('width', legendWidth).attr('height', legendHeight).attr('rx', 4).attr('ry', 4).style('fill', `url(#map-color-gradient-${selectedMetric})`).style('stroke', '#ccc').style('stroke-width', 0.5);\n\n    // Add legend labels\n    svg.append('text').attr('x', legendPosition.x).attr('y', legendPosition.y - 5).attr('fill', 'var(--dark-text)').attr('text-anchor', 'start').attr('font-size', '10px').text('Low');\n    svg.append('text').attr('x', legendPosition.x + legendWidth).attr('y', legendPosition.y - 5).attr('fill', 'var(--dark-text)').attr('text-anchor', 'end').attr('font-size', '10px').text('High');\n    svg.append('text').attr('x', legendPosition.x + legendWidth / 2).attr('y', legendPosition.y + 30).attr('fill', 'var(--dark-text)').attr('text-anchor', 'middle').attr('font-size', '12px').text(`${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)} by Country`);\n\n    // Add a subtle pulsing animation to countries with highest values\n    const topCountries = data.sort((a, b) => b.value - a.value).slice(0, 5).map(d => d.name.toLowerCase());\n    svg.selectAll('.country').filter(d => topCountries.includes(d.properties.name.toLowerCase())).each(function () {\n      const element = d3.select(this);\n\n      // Create pulsing effect\n      function repeat() {\n        element.transition().duration(1000).attr('stroke-width', 2).attr('stroke-opacity', 1).transition().duration(1000).attr('stroke-width', 0.5).attr('stroke-opacity', 0.7).on('end', repeat);\n      }\n      repeat();\n    });\n  };\n  const getColorClass = () => {\n    switch (selectedMetric) {\n      case 'intensity':\n        return 'intensity-theme';\n      case 'likelihood':\n        return 'likelihood-theme';\n      case 'relevance':\n        return 'relevance-theme';\n      default:\n        return 'intensity-theme';\n    }\n  };\n  const renderActionButtons = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-actions\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: `chart-action-btn ${selectedMetric === 'intensity' ? 'active' : ''}`,\n      onClick: () => handleMetricChange('intensity'),\n      children: \"Intensity\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `chart-action-btn ${selectedMetric === 'likelihood' ? 'active' : ''}`,\n      onClick: () => handleMetricChange('likelihood'),\n      children: \"Likelihood\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `chart-action-btn ${selectedMetric === 'relevance' ? 'active' : ''}`,\n      onClick: () => handleMetricChange('relevance'),\n      children: \"Relevance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 288,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(CardContainer, {\n    title: `Global ${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)} Distribution`,\n    actionButtons: renderActionButtons(),\n    className: getColorClass(),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: containerRef,\n      style: {\n        width: '100%',\n        minHeight: fullSize ? '600px' : '400px',\n        maxHeight: fullSize ? '800px' : '500px'\n      },\n      className: \"country-map-container\",\n      children: loading ? /*#__PURE__*/_jsxDEV(Loader, {\n        message: \"Loading map data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 11\n      }, this) : error ? /*#__PURE__*/_jsxDEV(NoDataMessage, {\n        message: error,\n        icon: \"\\u26A0\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 11\n      }, this) : data.length === 0 ? /*#__PURE__*/_jsxDEV(NoDataMessage, {\n        message: \"No country data available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        className: `chart-svg country-map-svg ${getColorClass()}`,\n        style: {\n          borderRadius: '10px',\n          boxShadow: '0 4px 12px rgba(0, 0, 0, 0.05)'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }, this), !loading && data.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-instructions\",\n      children: /*#__PURE__*/_jsxDEV(\"small\", {\n        children: \"Tip: Scroll to zoom, drag to pan, and click on countries for details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 311,\n    columnNumber: 5\n  }, this);\n};\n_s(CountryMap, \"wP0ciHZ8WEMK05L2PhVO3XrHPVU=\");\n_c = CountryMap;\nexport default CountryMap;\nvar _c;\n$RefreshReg$(_c, \"CountryMap\");","map":{"version":3,"names":["React","useState","useEffect","useRef","d3","topojson","api","CardContainer","Loader","NoDataMessage","formatNumber","createTooltip","debounce","jsxDEV","_jsxDEV","CountryMap","metric","fullSize","_s","data","setData","worldData","setWorldData","loading","setLoading","error","setError","selectedMetric","setSelectedMetric","svgRef","containerRef","tooltipRef","fetchData","topNData","worldTopoJSON","Promise","all","getTopN","fetch","then","res","json","err","console","length","drawMap","handleResize","window","addEventListener","removeEventListener","handleMetricChange","newMetric","current","select","selectAll","remove","containerWidth","clientWidth","containerHeight","Math","min","margin","top","right","bottom","left","width","height","svg","attr","append","projection","geoNaturalEarth1","fitSize","feature","objects","countries","path","geoPath","features","colorScale","scaleSequential","interpolateBlues","interpolateGreens","interpolateOranges","domain","max","d","value","dataByCountry","forEach","name","toLowerCase","enter","countryData","properties","on","event","transition","duration","style","html","charAt","toUpperCase","slice","count","pageX","pageY","countryName","classed","zoom","scaleExtent","transform","call","legendWidth","legendHeight","legendPosition","x","y","defs","linearGradient","offset","color","text","topCountries","sort","a","b","map","filter","includes","each","element","repeat","getColorClass","renderActionButtons","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","title","actionButtons","ref","minHeight","maxHeight","message","icon","borderRadius","boxShadow","_c","$RefreshReg$"],"sources":["C:/Users/Dell/OneDrive/Desktop/new/frontend/src/components/charts/CountryMap.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport * as d3 from 'd3';\r\nimport * as topojson from 'topojson-client';\r\nimport api from '../../services/api';\r\nimport CardContainer from '../common/CardContainer';\r\nimport Loader from '../common/Loader';\r\nimport NoDataMessage from '../common/NoDataMessage';\r\nimport { formatNumber, createTooltip, debounce } from '../../utils/helpers';\r\n\r\nconst CountryMap = ({ metric = 'intensity', fullSize = false }) => {\r\n  const [data, setData] = useState([]);\r\n  const [worldData, setWorldData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [selectedMetric, setSelectedMetric] = useState(metric);\r\n  const svgRef = useRef(null);\r\n  const containerRef = useRef(null);\r\n  const tooltipRef = useRef(null);\r\n  \r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const [topNData, worldTopoJSON] = await Promise.all([\r\n          api.getTopN(selectedMetric, 'country', 50),\r\n          fetch('https://unpkg.com/world-atlas@2.0.2/countries-110m.json').then(res => res.json())\r\n        ]);\r\n        \r\n        setData(topNData);\r\n        setWorldData(worldTopoJSON);\r\n        setLoading(false);\r\n      } catch (err) {\r\n        console.error('Error fetching map data:', err);\r\n        setError('Failed to load map data');\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [selectedMetric]);\r\n\r\n  useEffect(() => {\r\n    if (data.length > 0 && worldData && !loading) {\r\n      drawMap();\r\n      \r\n      // Add resize listener\r\n      const handleResize = debounce(() => {\r\n        drawMap();\r\n      }, 300);\r\n      \r\n      window.addEventListener('resize', handleResize);\r\n      return () => window.removeEventListener('resize', handleResize);\r\n    }\r\n  }, [data, worldData, loading]);\r\n\r\n  const handleMetricChange = (newMetric) => {\r\n    setSelectedMetric(newMetric);\r\n  };\r\n\r\n  const drawMap = () => {\r\n    if (!svgRef.current || !containerRef.current || !worldData) return;\r\n\r\n    // Clear previous chart\r\n    d3.select(svgRef.current).selectAll('*').remove();\r\n\r\n    // Set dimensions\r\n    const containerWidth = containerRef.current.clientWidth;\r\n    const containerHeight = fullSize ? Math.min(600, containerWidth * 0.6) : Math.min(500, containerWidth * 0.6);\r\n    const margin = { top: 20, right: 20, bottom: 20, left: 20 };\r\n    const width = containerWidth - margin.left - margin.right;\r\n    const height = containerHeight - margin.top - margin.bottom;\r\n\r\n    // Create SVG\r\n    const svg = d3.select(svgRef.current)\r\n      .attr('width', width + margin.left + margin.right)\r\n      .attr('height', height + margin.top + margin.bottom)\r\n      .append('g')\r\n      .attr('transform', `translate(${margin.left},${margin.top})`);\r\n\r\n    // Create tooltip if not already created\r\n    if (!tooltipRef.current) {\r\n      tooltipRef.current = createTooltip(d3);\r\n    }\r\n\r\n    // Create map projection\r\n    const projection = d3.geoNaturalEarth1()\r\n      .fitSize([width, height], topojson.feature(worldData, worldData.objects.countries));\r\n\r\n    // Create path generator\r\n    const path = d3.geoPath().projection(projection);\r\n\r\n    // Extract countries data\r\n    const countries = topojson.feature(worldData, worldData.objects.countries).features;\r\n\r\n    // Add a background rect for the ocean\r\n    svg.append(\"rect\")\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", height)\r\n      .attr(\"fill\", \"#E6F2F5\")\r\n      .attr(\"class\", \"ocean-background\");\r\n\r\n    // Create color scale based on metric value\r\n    const colorScale = d3.scaleSequential(\r\n      selectedMetric === 'intensity' ? d3.interpolateBlues :\r\n      selectedMetric === 'likelihood' ? d3.interpolateGreens :\r\n      d3.interpolateOranges\r\n    ).domain([0, d3.max(data, d => d.value)]);\r\n\r\n    // Create a map for faster data lookup\r\n    const dataByCountry = {};\r\n    data.forEach(d => {\r\n      dataByCountry[d.name.toLowerCase()] = d;\r\n    });\r\n\r\n    // Draw countries\r\n    svg.selectAll('.country')\r\n      .data(countries)\r\n      .enter()\r\n      .append('path')\r\n      .attr('class', 'country')\r\n      .attr('d', path)\r\n      .attr('fill', d => {\r\n        const countryData = dataByCountry[d.properties.name.toLowerCase()];\r\n        return countryData ? colorScale(countryData.value) : '#d0d0d0';\r\n      })\r\n      .attr('stroke', '#fff')\r\n      .attr('stroke-width', 0.5)\r\n      .on('mouseover', function(event, d) {\r\n        const countryData = dataByCountry[d.properties.name.toLowerCase()];\r\n        \r\n        d3.select(this)\r\n          .transition()\r\n          .duration(200)\r\n          .attr('stroke', '#333')\r\n          .attr('stroke-width', 1.5)\r\n          .attr('filter', 'drop-shadow(0px 0px 5px rgba(0,0,0,0.3))');\r\n        \r\n        tooltipRef.current\r\n          .style('opacity', 1)\r\n          .html(`\r\n            <div class=\"tooltip-header\">${d.properties.name}</div>\r\n            ${countryData \r\n              ? `<div class=\"tooltip-content\">\r\n                  <strong>${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)}:</strong> ${formatNumber(countryData.value)}<br>\r\n                  <strong>Count:</strong> ${countryData.count} records\r\n                </div>`\r\n              : '<div class=\"tooltip-content\"><i>No data available</i></div>'}\r\n          `)\r\n          .style('left', (event.pageX + 10) + 'px')\r\n          .style('top', (event.pageY - 20) + 'px');\r\n      })\r\n      .on('mouseout', function() {\r\n        d3.select(this)\r\n          .transition()\r\n          .duration(200)\r\n          .attr('stroke', '#fff')\r\n          .attr('stroke-width', 0.5)\r\n          .attr('filter', null);\r\n        \r\n        tooltipRef.current\r\n          .transition()\r\n          .duration(200)\r\n          .style('opacity', 0);\r\n      })\r\n      .on('click', function(event, d) {\r\n        const countryName = d.properties.name;\r\n        // Highlight selected country\r\n        svg.selectAll('.country').classed('selected', false);\r\n        d3.select(this).classed('selected', true);\r\n        \r\n        // Optionally navigate to country insights or show detailed data\r\n        // window.location.href = `/country-insights?country=${encodeURIComponent(countryName)}`;\r\n      });\r\n\r\n    // Add a gentle zoom effect to the map\r\n    const zoom = d3.zoom()\r\n      .scaleExtent([1, 8])\r\n      .on('zoom', (event) => {\r\n        svg.selectAll('path')\r\n          .attr('transform', event.transform);\r\n      });\r\n\r\n    d3.select(svgRef.current)\r\n      .call(zoom);\r\n\r\n    // Add legend\r\n    const legendWidth = 200;\r\n    const legendHeight = 15;\r\n    const legendPosition = {\r\n      x: width - legendWidth - 10,\r\n      y: height - 40\r\n    };\r\n\r\n    // Create gradient for legend\r\n    const defs = svg.append('defs');\r\n    const linearGradient = defs.append('linearGradient')\r\n      .attr('id', `map-color-gradient-${selectedMetric}`)\r\n      .attr('x1', '0%')\r\n      .attr('y1', '0%')\r\n      .attr('x2', '100%')\r\n      .attr('y2', '0%');\r\n\r\n    linearGradient.selectAll('stop')\r\n      .data([\r\n        {offset: '0%', color: colorScale(0)},\r\n        {offset: '100%', color: colorScale(d3.max(data, d => d.value))}\r\n      ])\r\n      .enter().append('stop')\r\n      .attr('offset', d => d.offset)\r\n      .attr('stop-color', d => d.color);\r\n\r\n    // Draw legend rectangle with rounded corners\r\n    svg.append('rect')\r\n      .attr('x', legendPosition.x)\r\n      .attr('y', legendPosition.y)\r\n      .attr('width', legendWidth)\r\n      .attr('height', legendHeight)\r\n      .attr('rx', 4)\r\n      .attr('ry', 4)\r\n      .style('fill', `url(#map-color-gradient-${selectedMetric})`)\r\n      .style('stroke', '#ccc')\r\n      .style('stroke-width', 0.5);\r\n\r\n    // Add legend labels\r\n    svg.append('text')\r\n      .attr('x', legendPosition.x)\r\n      .attr('y', legendPosition.y - 5)\r\n      .attr('fill', 'var(--dark-text)')\r\n      .attr('text-anchor', 'start')\r\n      .attr('font-size', '10px')\r\n      .text('Low');\r\n\r\n    svg.append('text')\r\n      .attr('x', legendPosition.x + legendWidth)\r\n      .attr('y', legendPosition.y - 5)\r\n      .attr('fill', 'var(--dark-text)')\r\n      .attr('text-anchor', 'end')\r\n      .attr('font-size', '10px')\r\n      .text('High');\r\n\r\n    svg.append('text')\r\n      .attr('x', legendPosition.x + legendWidth / 2)\r\n      .attr('y', legendPosition.y + 30)\r\n      .attr('fill', 'var(--dark-text)')\r\n      .attr('text-anchor', 'middle')\r\n      .attr('font-size', '12px')\r\n      .text(`${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)} by Country`);\r\n      \r\n    // Add a subtle pulsing animation to countries with highest values\r\n    const topCountries = data\r\n      .sort((a, b) => b.value - a.value)\r\n      .slice(0, 5)\r\n      .map(d => d.name.toLowerCase());\r\n      \r\n    svg.selectAll('.country')\r\n      .filter(d => topCountries.includes(d.properties.name.toLowerCase()))\r\n      .each(function() {\r\n        const element = d3.select(this);\r\n        \r\n        // Create pulsing effect\r\n        function repeat() {\r\n          element\r\n            .transition()\r\n            .duration(1000)\r\n            .attr('stroke-width', 2)\r\n            .attr('stroke-opacity', 1)\r\n            .transition()\r\n            .duration(1000)\r\n            .attr('stroke-width', 0.5)\r\n            .attr('stroke-opacity', 0.7)\r\n            .on('end', repeat);\r\n        }\r\n        \r\n        repeat();\r\n      });\r\n  };\r\n\r\n  const getColorClass = () => {\r\n    switch(selectedMetric) {\r\n      case 'intensity': return 'intensity-theme';\r\n      case 'likelihood': return 'likelihood-theme';\r\n      case 'relevance': return 'relevance-theme';\r\n      default: return 'intensity-theme';\r\n    }\r\n  };\r\n\r\n  const renderActionButtons = () => (\r\n    <div className=\"chart-actions\">\r\n      <button \r\n        className={`chart-action-btn ${selectedMetric === 'intensity' ? 'active' : ''}`}\r\n        onClick={() => handleMetricChange('intensity')}\r\n      >\r\n        Intensity\r\n      </button>\r\n      <button \r\n        className={`chart-action-btn ${selectedMetric === 'likelihood' ? 'active' : ''}`}\r\n        onClick={() => handleMetricChange('likelihood')}\r\n      >\r\n        Likelihood\r\n      </button>\r\n      <button \r\n        className={`chart-action-btn ${selectedMetric === 'relevance' ? 'active' : ''}`}\r\n        onClick={() => handleMetricChange('relevance')}\r\n      >\r\n        Relevance\r\n      </button>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <CardContainer \r\n      title={`Global ${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)} Distribution`}\r\n      actionButtons={renderActionButtons()}\r\n      className={getColorClass()}\r\n    >\r\n      <div \r\n        ref={containerRef} \r\n        style={{ \r\n          width: '100%', \r\n          minHeight: fullSize ? '600px' : '400px',\r\n          maxHeight: fullSize ? '800px' : '500px'\r\n        }}\r\n        className=\"country-map-container\"\r\n      >\r\n        {loading ? (\r\n          <Loader message=\"Loading map data...\" />\r\n        ) : error ? (\r\n          <NoDataMessage message={error} icon=\"⚠️\" />\r\n        ) : data.length === 0 ? (\r\n          <NoDataMessage message=\"No country data available\" />\r\n        ) : (\r\n          <svg \r\n            ref={svgRef} \r\n            className={`chart-svg country-map-svg ${getColorClass()}`}\r\n            style={{\r\n              borderRadius: '10px',\r\n              boxShadow: '0 4px 12px rgba(0, 0, 0, 0.05)'\r\n            }}\r\n          ></svg>\r\n        )}\r\n      </div>\r\n      \r\n      {!loading && data.length > 0 && (\r\n        <div className=\"map-instructions\">\r\n          <small>Tip: Scroll to zoom, drag to pan, and click on countries for details</small>\r\n        </div>\r\n      )}\r\n    </CardContainer>\r\n  );\r\n};\r\n\r\nexport default CountryMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}