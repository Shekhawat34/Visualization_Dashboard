{"ast":null,"code":"// import React, { useState, useEffect, useRef } from 'react';\n// import * as d3 from 'd3';\n// import api from '../../services/api';\n// import CardContainer from '../common/CardContainer';\n// import Loader from '../common/Loader';\n// import NoDataMessage from '../common/NoDataMessage';\n// import { formatNumber, createTooltip } from '../../utils/helpers';\n\n// const YearDistributionChart = () => {\n//   const [data, setData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const svgRef = useRef(null);\n//   const tooltipRef = useRef(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         setLoading(true);\n//         const result = await api.getMetrics('year', 'intensity');\n//         setData(result);\n//         setLoading(false);\n//       } catch (err) {\n//         setError('Failed to load year distribution data');\n//         setLoading(false);\n//         console.error(err);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   useEffect(() => {\n//     if (data.length > 0 && svgRef.current) {\n//       drawChart();\n//     }\n//   }, [data]);\n\n//   const drawChart = () => {\n//     // Clear previous chart\n//     d3.select(svgRef.current).selectAll('*').remove();\n\n//     // Filter out any invalid years and sort\n//     const validData = data\n//       .filter(d => d.name && !isNaN(parseInt(d.name)))\n//       .sort((a, b) => parseInt(a.name) - parseInt(b.name));\n\n//     if (validData.length === 0) {\n//       return;\n//     }\n\n//     // Chart dimensions\n//     const margin = { top: 20, right: 30, bottom: 50, left: 60 };\n//     const width = svgRef.current.clientWidth - margin.left - margin.right;\n//     const height = 350 - margin.top - margin.bottom;\n\n//     // Create SVG\n//     const svg = d3.select(svgRef.current)\n//       .attr('width', width + margin.left + margin.right)\n//       .attr('height', height + margin.top + margin.bottom)\n//       .append('g')\n//       .attr('transform', `translate(${margin.left},${margin.top})`);\n\n//     // Create tooltip\n//     if (!tooltipRef.current) {\n//       tooltipRef.current = createTooltip(d3);\n//     }\n\n//     // Scales\n//     const x = d3.scaleBand()\n//       .domain(validData.map(d => d.name))\n//       .range([0, width])\n//       .padding(0.2);\n\n//     const y = d3.scaleLinear()\n//       .domain([0, d3.max(validData, d => d.count) * 1.1])\n//       .range([height, 0]);\n\n//     // Axes\n//     svg.append('g')\n//       .attr('class', 'axis x-axis')\n//       .attr('transform', `translate(0,${height})`)\n//       .call(d3.axisBottom(x))\n//       .selectAll('text')\n//       .style('text-anchor', 'middle');\n\n//     svg.append('g')\n//       .attr('class', 'axis y-axis')\n//       .call(d3.axisLeft(y).ticks(5));\n\n//     // Grid lines\n//     svg.append('g')\n//       .attr('class', 'grid')\n//       .call(d3.axisLeft(y)\n//         .ticks(5)\n//         .tickSize(-width)\n//         .tickFormat(''));\n\n//     // Bars for count\n//     svg.selectAll('.bar')\n//       .data(validData)\n//       .enter()\n//       .append('rect')\n//       .attr('class', 'bar')\n//       .attr('x', d => x(d.name))\n//       .attr('width', x.bandwidth())\n//       .attr('y', d => y(d.count))\n//       .attr('height', d => height - y(d.count))\n//       .on('mouseover', function(event, d) {\n//         tooltipRef.current.transition()\n//           .duration(200)\n//           .style('opacity', .9);\n//         tooltipRef.current.html(`\n//           <strong>Year: ${d.name}</strong><br/>\n//           Count: ${d.count}<br/>\n//           Average Intensity: ${formatNumber(d.value)}\n//         `)\n//           .style('left', (event.pageX + 10) + 'px')\n//           .style('top', (event.pageY - 28) + 'px');\n//       })\n//       .on('mouseout', function() {\n//         tooltipRef.current.transition()\n//           .duration(500)\n//           .style('opacity', 0);\n//       });\n\n//     // Line for average intensity\n//     const lineGenerator = d3.line()\n//       .x(d => x(d.name) + x.bandwidth() / 2)\n//       .y(d => y(d.value * (d3.max(validData, d => d.count) / d3.max(validData, d => d.value))))\n//       .curve(d3.curveMonotoneX);\n\n//     svg.append('path')\n//       .datum(validData)\n//       .attr('class', 'line')\n//       .attr('d', lineGenerator)\n//       .style('stroke', 'var(--accent-color)');\n\n//     // Add dots for line points\n//     svg.selectAll('.dot')\n//       .data(validData)\n//       .enter()\n//       .append('circle')\n//       .attr('class', 'dot')\n//       .attr('cx', d => x(d.name) + x.bandwidth() / 2)\n//       .attr('cy', d => y(d.value * (d3.max(validData, d => d.count) / d3.max(validData, d => d.value))))\n//       .attr('r', 4)\n//       .style('fill', 'var(--accent-color)')\n//       .on('mouseover', function(event, d) {\n//         tooltipRef.current.transition()\n//           .duration(200)\n//           .style('opacity', .9);\n//         tooltipRef.current.html(`\n//           <strong>Year: ${d.name}</strong><br/>\n//           Average Intensity: ${formatNumber(d.value)}<br/>\n//           Count: ${d.count}\n//         `)\n//           .style('left', (event.pageX + 10) + 'px')\n//           .style('top', (event.pageY - 28) + 'px');\n//       })\n//       .on('mouseout', function() {\n//         tooltipRef.current.transition()\n//           .duration(500)\n//           .style('opacity', 0);\n//       });\n\n//     // Legend\n//     const legend = svg.append('g')\n//       .attr('class', 'chart-legend')\n//       .attr('transform', `translate(${width - 180}, 10)`);\n\n//     legend.append('rect')\n//       .attr('width', 12)\n//       .attr('height', 12)\n//       .attr('class', 'bar')\n//       .attr('rx', 2);\n\n//     legend.append('text')\n//       .attr('x', 18)\n//       .attr('y', 9)\n//       .attr('dy', '.35em')\n//       .style('font-size', '10px')\n//       .text('Number of Insights');\n\n//     legend.append('circle')\n//       .attr('cx', 6)\n//       .attr('cy', 30)\n//       .attr('r', 4)\n//       .style('fill', 'var(--accent-color)');\n\n//     legend.append('text')\n//       .attr('x', 18)\n//       .attr('y', 30)\n//       .attr('dy', '.35em')\n//       .style('font-size', '10px')\n//       .text('Average Intensity');\n\n//     // Axes labels\n//     svg.append('text')\n//       .attr('class', 'axis-label')\n//       .attr('text-anchor', 'middle')\n//       .attr('x', width / 2)\n//       .attr('y', height + margin.bottom - 10)\n//       .text('Year');\n\n//     svg.append('text')\n//       .attr('class', 'axis-label')\n//       .attr('text-anchor', 'middle')\n//       .attr('transform', 'rotate(-90)')\n//       .attr('x', -height / 2)\n//       .attr('y', -margin.left + 15)\n//       .text('Count');\n//   };\n\n//   // Resize handler\n//   useEffect(() => {\n//     const handleResize = () => {\n//       if (data.length > 0) {\n//         drawChart();\n//       }\n//     };\n\n//     window.addEventListener('resize', handleResize);\n//     return () => {\n//       window.removeEventListener('resize', handleResize);\n//       // Clean up tooltip when component unmounts\n//       if (tooltipRef.current) {\n//         d3.select('.d3-tooltip').remove();\n//         tooltipRef.current = null;\n//       }\n//     };\n//   }, [data]);\n\n//   const actionButtons = (\n//     <button className=\"refresh-btn\" onClick={() => {\n//       setLoading(true);\n//       api.getMetrics('year', 'intensity')\n//         .then(result => {\n//           setData(result);\n//           setLoading(false);\n//         })\n//         .catch(err => {\n//           setError('Failed to refresh data');\n//           setLoading(false);\n//           console.error(err);\n//         });\n//     }}>\n//       <i className=\"fas fa-sync-alt\"></i>\n//     </button>\n//   );\n\n//   return (\n//     <CardContainer title=\"Insights Distribution by Year\" actionButtons={actionButtons}>\n//       {loading ? (\n//         <Loader message=\"Loading year distribution data...\" />\n//       ) : error ? (\n//         <NoDataMessage message={error} icon=\"⚠️\" />\n//       ) : data.length === 0 ? (\n//         <NoDataMessage message=\"No year distribution data available\" />\n//       ) : (\n//         <svg ref={svgRef} className=\"chart-svg\"></svg>\n//       )}\n//     </CardContainer>\n//   );\n// };\n\n// export default YearDistributionChart;","map":{"version":3,"names":[],"sources":["C:/Users/Dell/OneDrive/Desktop/new/frontend/src/components/charts/YearDistributionChart.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from 'react';\r\n// import * as d3 from 'd3';\r\n// import api from '../../services/api';\r\n// import CardContainer from '../common/CardContainer';\r\n// import Loader from '../common/Loader';\r\n// import NoDataMessage from '../common/NoDataMessage';\r\n// import { formatNumber, createTooltip } from '../../utils/helpers';\r\n\r\n// const YearDistributionChart = () => {\r\n//   const [data, setData] = useState([]);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n//   const svgRef = useRef(null);\r\n//   const tooltipRef = useRef(null);\r\n  \r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       try {\r\n//         setLoading(true);\r\n//         const result = await api.getMetrics('year', 'intensity');\r\n//         setData(result);\r\n//         setLoading(false);\r\n//       } catch (err) {\r\n//         setError('Failed to load year distribution data');\r\n//         setLoading(false);\r\n//         console.error(err);\r\n//       }\r\n//     };\r\n    \r\n//     fetchData();\r\n//   }, []);\r\n  \r\n//   useEffect(() => {\r\n//     if (data.length > 0 && svgRef.current) {\r\n//       drawChart();\r\n//     }\r\n//   }, [data]);\r\n  \r\n//   const drawChart = () => {\r\n//     // Clear previous chart\r\n//     d3.select(svgRef.current).selectAll('*').remove();\r\n    \r\n//     // Filter out any invalid years and sort\r\n//     const validData = data\r\n//       .filter(d => d.name && !isNaN(parseInt(d.name)))\r\n//       .sort((a, b) => parseInt(a.name) - parseInt(b.name));\r\n    \r\n//     if (validData.length === 0) {\r\n//       return;\r\n//     }\r\n    \r\n//     // Chart dimensions\r\n//     const margin = { top: 20, right: 30, bottom: 50, left: 60 };\r\n//     const width = svgRef.current.clientWidth - margin.left - margin.right;\r\n//     const height = 350 - margin.top - margin.bottom;\r\n    \r\n//     // Create SVG\r\n//     const svg = d3.select(svgRef.current)\r\n//       .attr('width', width + margin.left + margin.right)\r\n//       .attr('height', height + margin.top + margin.bottom)\r\n//       .append('g')\r\n//       .attr('transform', `translate(${margin.left},${margin.top})`);\r\n    \r\n//     // Create tooltip\r\n//     if (!tooltipRef.current) {\r\n//       tooltipRef.current = createTooltip(d3);\r\n//     }\r\n    \r\n//     // Scales\r\n//     const x = d3.scaleBand()\r\n//       .domain(validData.map(d => d.name))\r\n//       .range([0, width])\r\n//       .padding(0.2);\r\n    \r\n//     const y = d3.scaleLinear()\r\n//       .domain([0, d3.max(validData, d => d.count) * 1.1])\r\n//       .range([height, 0]);\r\n    \r\n//     // Axes\r\n//     svg.append('g')\r\n//       .attr('class', 'axis x-axis')\r\n//       .attr('transform', `translate(0,${height})`)\r\n//       .call(d3.axisBottom(x))\r\n//       .selectAll('text')\r\n//       .style('text-anchor', 'middle');\r\n    \r\n//     svg.append('g')\r\n//       .attr('class', 'axis y-axis')\r\n//       .call(d3.axisLeft(y).ticks(5));\r\n    \r\n//     // Grid lines\r\n//     svg.append('g')\r\n//       .attr('class', 'grid')\r\n//       .call(d3.axisLeft(y)\r\n//         .ticks(5)\r\n//         .tickSize(-width)\r\n//         .tickFormat(''));\r\n    \r\n//     // Bars for count\r\n//     svg.selectAll('.bar')\r\n//       .data(validData)\r\n//       .enter()\r\n//       .append('rect')\r\n//       .attr('class', 'bar')\r\n//       .attr('x', d => x(d.name))\r\n//       .attr('width', x.bandwidth())\r\n//       .attr('y', d => y(d.count))\r\n//       .attr('height', d => height - y(d.count))\r\n//       .on('mouseover', function(event, d) {\r\n//         tooltipRef.current.transition()\r\n//           .duration(200)\r\n//           .style('opacity', .9);\r\n//         tooltipRef.current.html(`\r\n//           <strong>Year: ${d.name}</strong><br/>\r\n//           Count: ${d.count}<br/>\r\n//           Average Intensity: ${formatNumber(d.value)}\r\n//         `)\r\n//           .style('left', (event.pageX + 10) + 'px')\r\n//           .style('top', (event.pageY - 28) + 'px');\r\n//       })\r\n//       .on('mouseout', function() {\r\n//         tooltipRef.current.transition()\r\n//           .duration(500)\r\n//           .style('opacity', 0);\r\n//       });\r\n    \r\n//     // Line for average intensity\r\n//     const lineGenerator = d3.line()\r\n//       .x(d => x(d.name) + x.bandwidth() / 2)\r\n//       .y(d => y(d.value * (d3.max(validData, d => d.count) / d3.max(validData, d => d.value))))\r\n//       .curve(d3.curveMonotoneX);\r\n    \r\n//     svg.append('path')\r\n//       .datum(validData)\r\n//       .attr('class', 'line')\r\n//       .attr('d', lineGenerator)\r\n//       .style('stroke', 'var(--accent-color)');\r\n    \r\n//     // Add dots for line points\r\n//     svg.selectAll('.dot')\r\n//       .data(validData)\r\n//       .enter()\r\n//       .append('circle')\r\n//       .attr('class', 'dot')\r\n//       .attr('cx', d => x(d.name) + x.bandwidth() / 2)\r\n//       .attr('cy', d => y(d.value * (d3.max(validData, d => d.count) / d3.max(validData, d => d.value))))\r\n//       .attr('r', 4)\r\n//       .style('fill', 'var(--accent-color)')\r\n//       .on('mouseover', function(event, d) {\r\n//         tooltipRef.current.transition()\r\n//           .duration(200)\r\n//           .style('opacity', .9);\r\n//         tooltipRef.current.html(`\r\n//           <strong>Year: ${d.name}</strong><br/>\r\n//           Average Intensity: ${formatNumber(d.value)}<br/>\r\n//           Count: ${d.count}\r\n//         `)\r\n//           .style('left', (event.pageX + 10) + 'px')\r\n//           .style('top', (event.pageY - 28) + 'px');\r\n//       })\r\n//       .on('mouseout', function() {\r\n//         tooltipRef.current.transition()\r\n//           .duration(500)\r\n//           .style('opacity', 0);\r\n//       });\r\n    \r\n//     // Legend\r\n//     const legend = svg.append('g')\r\n//       .attr('class', 'chart-legend')\r\n//       .attr('transform', `translate(${width - 180}, 10)`);\r\n    \r\n//     legend.append('rect')\r\n//       .attr('width', 12)\r\n//       .attr('height', 12)\r\n//       .attr('class', 'bar')\r\n//       .attr('rx', 2);\r\n    \r\n//     legend.append('text')\r\n//       .attr('x', 18)\r\n//       .attr('y', 9)\r\n//       .attr('dy', '.35em')\r\n//       .style('font-size', '10px')\r\n//       .text('Number of Insights');\r\n    \r\n//     legend.append('circle')\r\n//       .attr('cx', 6)\r\n//       .attr('cy', 30)\r\n//       .attr('r', 4)\r\n//       .style('fill', 'var(--accent-color)');\r\n    \r\n//     legend.append('text')\r\n//       .attr('x', 18)\r\n//       .attr('y', 30)\r\n//       .attr('dy', '.35em')\r\n//       .style('font-size', '10px')\r\n//       .text('Average Intensity');\r\n    \r\n//     // Axes labels\r\n//     svg.append('text')\r\n//       .attr('class', 'axis-label')\r\n//       .attr('text-anchor', 'middle')\r\n//       .attr('x', width / 2)\r\n//       .attr('y', height + margin.bottom - 10)\r\n//       .text('Year');\r\n    \r\n//     svg.append('text')\r\n//       .attr('class', 'axis-label')\r\n//       .attr('text-anchor', 'middle')\r\n//       .attr('transform', 'rotate(-90)')\r\n//       .attr('x', -height / 2)\r\n//       .attr('y', -margin.left + 15)\r\n//       .text('Count');\r\n//   };\r\n  \r\n//   // Resize handler\r\n//   useEffect(() => {\r\n//     const handleResize = () => {\r\n//       if (data.length > 0) {\r\n//         drawChart();\r\n//       }\r\n//     };\r\n    \r\n//     window.addEventListener('resize', handleResize);\r\n//     return () => {\r\n//       window.removeEventListener('resize', handleResize);\r\n//       // Clean up tooltip when component unmounts\r\n//       if (tooltipRef.current) {\r\n//         d3.select('.d3-tooltip').remove();\r\n//         tooltipRef.current = null;\r\n//       }\r\n//     };\r\n//   }, [data]);\r\n  \r\n//   const actionButtons = (\r\n//     <button className=\"refresh-btn\" onClick={() => {\r\n//       setLoading(true);\r\n//       api.getMetrics('year', 'intensity')\r\n//         .then(result => {\r\n//           setData(result);\r\n//           setLoading(false);\r\n//         })\r\n//         .catch(err => {\r\n//           setError('Failed to refresh data');\r\n//           setLoading(false);\r\n//           console.error(err);\r\n//         });\r\n//     }}>\r\n//       <i className=\"fas fa-sync-alt\"></i>\r\n//     </button>\r\n//   );\r\n  \r\n//   return (\r\n//     <CardContainer title=\"Insights Distribution by Year\" actionButtons={actionButtons}>\r\n//       {loading ? (\r\n//         <Loader message=\"Loading year distribution data...\" />\r\n//       ) : error ? (\r\n//         <NoDataMessage message={error} icon=\"⚠️\" />\r\n//       ) : data.length === 0 ? (\r\n//         <NoDataMessage message=\"No year distribution data available\" />\r\n//       ) : (\r\n//         <svg ref={svgRef} className=\"chart-svg\"></svg>\r\n//       )}\r\n//     </CardContainer>\r\n//   );\r\n// };\r\n\r\n// export default YearDistributionChart;"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}