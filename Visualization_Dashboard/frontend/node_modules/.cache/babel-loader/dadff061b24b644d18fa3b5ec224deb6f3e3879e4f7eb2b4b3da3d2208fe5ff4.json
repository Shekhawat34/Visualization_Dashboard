{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\OneDrive\\\\Desktop\\\\new\\\\frontend\\\\src\\\\components\\\\charts\\\\CountryMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport * as topojson from 'topojson-client';\nimport api from '../../services/api';\nimport CardContainer from '../common/CardContainer';\nimport Loader from '../common/Loader';\nimport NoDataMessage from '../common/NoDataMessage';\nimport { formatNumber, debounce } from '../../utils/helpers';\n\n// Define createTooltip function since we're not sure about its implementation\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst createTooltip = d3 => {\n  // Create tooltip div if it doesn't exist\n  let tooltip = d3.select('body').select('.map-tooltip');\n  if (tooltip.empty()) {\n    tooltip = d3.select('body').append('div').attr('class', 'map-tooltip').style('position', 'absolute').style('visibility', 'hidden').style('opacity', 0).style('background-color', 'white').style('border', '1px solid #ddd').style('border-radius', '4px').style('padding', '10px').style('box-shadow', '0 2px 10px rgba(0,0,0,0.2)').style('pointer-events', 'none').style('font-size', '12px').style('z-index', 1000);\n  }\n  return tooltip;\n};\nconst CountryMap = ({\n  metric = 'intensity',\n  fullSize = false\n}) => {\n  _s();\n  const [data, setData] = useState([]);\n  const [worldData, setWorldData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedMetric, setSelectedMetric] = useState(metric);\n  const [countries, setCountries] = useState([]);\n  const [pestleOptions, setPestleOptions] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState('all');\n  const [selectedPestle, setSelectedPestle] = useState('all');\n  const [regionData, setRegionData] = useState({});\n  const [countryNameMap, setCountryNameMap] = useState({});\n  const [countryPestleData, setCountryPestleData] = useState({});\n  const svgRef = useRef(null);\n  const containerRef = useRef(null);\n  const tooltipRef = useRef(null);\n\n  // Fetch filter options on initial load\n  useEffect(() => {\n    const fetchFilterOptions = async () => {\n      try {\n        const filters = await api.getFilters();\n        setCountries(['all', ...filters.countries.sort()]);\n        setPestleOptions(['all', ...filters.pestle.sort()]);\n      } catch (err) {\n        console.error('Error fetching filter options:', err);\n      }\n    };\n    fetchFilterOptions();\n  }, []);\n\n  // Fetch region data for tooltips\n  useEffect(() => {\n    const fetchRegionData = async () => {\n      try {\n        const regions = await api.getRegions();\n        // Create a mapping of country to region\n        const countryToRegion = {};\n        regions.forEach(region => {\n          // Get country insights for each region to map countries to regions\n          api.getData({\n            region: region.region\n          }).then(data => {\n            data.forEach(item => {\n              if (item.country && item.region) {\n                countryToRegion[item.country.toLowerCase()] = item.region;\n              }\n            });\n            setRegionData(countryToRegion);\n          }).catch(err => console.error('Error fetching country data for region:', err));\n        });\n      } catch (err) {\n        console.error('Error fetching region data:', err);\n      }\n    };\n    fetchRegionData();\n  }, []);\n\n  // Fetch pestle data for each country\n  useEffect(() => {\n    const fetchCountryPestleData = async () => {\n      try {\n        // Skip if countries aren't loaded yet\n        if (countries.length <= 1) return;\n        const countryPestleMap = {};\n\n        // Create a batch of promises for fetching data for each country\n        const fetchPromises = countries.filter(country => country !== 'all').map(country => api.getData({\n          country\n        }).then(data => {\n          // Count occurrences of each pestle category for this country\n          const pestleCounts = {};\n          data.forEach(item => {\n            if (item.pestle) {\n              pestleCounts[item.pestle] = (pestleCounts[item.pestle] || 0) + 1;\n            }\n          });\n\n          // Store in our map with top pestles by count\n          countryPestleMap[country.toLowerCase()] = Object.entries(pestleCounts).sort((a, b) => b[1] - a[1]).map(([pestle, count]) => ({\n            pestle,\n            count\n          }));\n        }).catch(err => {\n          console.error(`Error fetching pestle data for ${country}:`, err);\n          return null;\n        }));\n\n        // Wait for all fetches to complete\n        await Promise.all(fetchPromises);\n        setCountryPestleData(countryPestleMap);\n      } catch (err) {\n        console.error('Error fetching country pestle data:', err);\n      }\n    };\n    fetchCountryPestleData();\n  }, [countries]);\n\n  // Create a mapping between API country names and topojson country names\n  useEffect(() => {\n    if (worldData) {\n      const countryFeatures = topojson.feature(worldData, worldData.objects.countries).features;\n      const nameMap = {};\n\n      // For each country in our API data, try to find a match in the topojson\n      countries.forEach(apiCountry => {\n        if (apiCountry !== 'all') {\n          // Try exact match first\n          let match = countryFeatures.find(f => f.properties.name.toLowerCase() === apiCountry.toLowerCase());\n          if (!match) {\n            // Try contains match (e.g., \"United States\" might match \"United States of America\")\n            match = countryFeatures.find(f => f.properties.name.toLowerCase().includes(apiCountry.toLowerCase()) || apiCountry.toLowerCase().includes(f.properties.name.toLowerCase()));\n          }\n          if (match) {\n            nameMap[apiCountry.toLowerCase()] = match.properties.name;\n            // Also store reverse mapping\n            nameMap[match.properties.name.toLowerCase()] = apiCountry;\n          }\n        }\n      });\n      setCountryNameMap(nameMap);\n    }\n  }, [worldData, countries]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        // Create filter object with selected filters\n        const filters = {};\n        if (selectedCountry !== 'all') filters.country = selectedCountry;\n        if (selectedPestle !== 'all') filters.pestle = selectedPestle;\n\n        // If filter by country is active, we might need different logic\n        const isCountryFiltered = selectedCountry !== 'all';\n        const [topNData, worldTopoJSON] = await Promise.all([api.getTopN(selectedMetric, 'country', 50, filters), fetch('https://unpkg.com/world-atlas@2.0.2/countries-110m.json').then(res => res.json())]);\n        setData(topNData);\n        setWorldData(worldTopoJSON);\n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching map data:', err);\n        setError('Failed to load map data');\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [selectedMetric, selectedCountry, selectedPestle]);\n  useEffect(() => {\n    if (data.length > 0 && worldData && !loading) {\n      drawMap();\n\n      // Add resize listener\n      const handleResize = debounce(() => {\n        drawMap();\n      }, 300);\n      window.addEventListener('resize', handleResize);\n      return () => window.removeEventListener('resize', handleResize);\n    }\n  }, [data, worldData, loading, regionData, countryNameMap, countryPestleData]);\n  const handleMetricChange = newMetric => {\n    setSelectedMetric(newMetric);\n  };\n  const handleCountryChange = e => {\n    setSelectedCountry(e.target.value);\n  };\n  const handlePestleChange = e => {\n    setSelectedPestle(e.target.value);\n  };\n  const drawMap = () => {\n    if (!svgRef.current || !containerRef.current || !worldData) return;\n\n    // Clear previous chart\n    d3.select(svgRef.current).selectAll('*').remove();\n\n    // Set dimensions\n    const containerWidth = containerRef.current.clientWidth;\n    const containerHeight = fullSize ? Math.min(600, containerWidth * 0.6) : Math.min(500, containerWidth * 0.6);\n    const margin = {\n      top: 20,\n      right: 20,\n      bottom: 20,\n      left: 20\n    };\n    const width = containerWidth - margin.left - margin.right;\n    const height = containerHeight - margin.top - margin.bottom;\n\n    // Create SVG\n    const svg = d3.select(svgRef.current).attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n\n    // Create tooltip if not already created\n    if (!tooltipRef.current) {\n      tooltipRef.current = createTooltip(d3);\n    }\n\n    // Create map projection\n    const projection = d3.geoNaturalEarth1().fitSize([width, height], topojson.feature(worldData, worldData.objects.countries));\n\n    // Create path generator\n    const path = d3.geoPath().projection(projection);\n\n    // Extract countries data\n    const countries = topojson.feature(worldData, worldData.objects.countries).features;\n\n    // Add a background rect for the ocean\n    svg.append(\"rect\").attr(\"width\", width).attr(\"height\", height).attr(\"fill\", \"#E6F2F5\").attr(\"class\", \"ocean-background\");\n\n    // Create color scale based on metric value\n    const colorScale = d3.scaleSequential(selectedMetric === 'intensity' ? d3.interpolateBlues : selectedMetric === 'likelihood' ? d3.interpolateGreens : d3.interpolateOranges).domain([0, d3.max(data, d => d.value) || 10]);\n\n    // Create a map for faster data lookup\n    const dataByCountry = {};\n    data.forEach(d => {\n      const countryLower = d.name.toLowerCase();\n      dataByCountry[countryLower] = d;\n\n      // Also add mapped name if available\n      if (countryNameMap[countryLower]) {\n        dataByCountry[countryNameMap[countryLower].toLowerCase()] = d;\n      }\n    });\n\n    // Handle selected country highlighting\n    const selectedCountryData = selectedCountry !== 'all' ? {\n      name: selectedCountry,\n      topoName: countryNameMap[selectedCountry.toLowerCase()]\n    } : null;\n\n    // Draw countries\n    svg.selectAll('.country').data(countries).enter().append('path').attr('class', d => {\n      let classes = 'country';\n      // Add selected class if this is the selected country\n      if (selectedCountryData && (d.properties.name === selectedCountryData.name || d.properties.name === selectedCountryData.topoName)) {\n        classes += ' selected';\n      }\n      return classes;\n    }).attr('d', path).attr('fill', d => {\n      // If filtering by country, emphasize the selected country\n      if (selectedCountry !== 'all') {\n        // Check if this is the selected country\n        const isSelected = d.properties.name.toLowerCase() === selectedCountry.toLowerCase() || countryNameMap[selectedCountry.toLowerCase()] && countryNameMap[selectedCountry.toLowerCase()].toLowerCase() === d.properties.name.toLowerCase();\n        if (!isSelected) {\n          return '#d0d0d0'; // Gray out non-selected countries\n        }\n      }\n\n      // Get data for this country\n      const countryLower = d.properties.name.toLowerCase();\n      const countryData = dataByCountry[countryLower] || (countryNameMap[countryLower] ? dataByCountry[countryNameMap[countryLower].toLowerCase()] : null);\n      return countryData ? colorScale(countryData.value) : '#d0d0d0';\n    }).attr('stroke', '#fff').attr('stroke-width', d => {\n      // Make selected country's border thicker\n      if (selectedCountry !== 'all') {\n        const isSelected = d.properties.name.toLowerCase() === selectedCountry.toLowerCase() || countryNameMap[selectedCountry.toLowerCase()] && countryNameMap[selectedCountry.toLowerCase()].toLowerCase() === d.properties.name.toLowerCase();\n        return isSelected ? 2 : 0.5;\n      }\n      return 0.5;\n    }).on('mouseover', function (event, d) {\n      const countryLower = d.properties.name.toLowerCase();\n      // Get API country name (if it exists)\n      const apiCountryName = countryNameMap[countryLower] || d.properties.name;\n      const apiCountryLower = apiCountryName.toLowerCase();\n      const countryData = dataByCountry[countryLower] || (countryNameMap[countryLower] ? dataByCountry[countryNameMap[countryLower].toLowerCase()] : null);\n      const countryName = d.properties.name;\n      const regionName = regionData[apiCountryLower] || regionData[countryLower] || 'Unknown Region';\n\n      // Get pestle data for this country\n      const pestleData = countryPestleData[apiCountryLower] || countryPestleData[countryLower] || [];\n      d3.select(this).transition().duration(200).attr('stroke', '#333').attr('stroke-width', 1.5);\n\n      // Create HTML for the tooltip\n      let tooltipHTML = `\n          <div class=\"tooltip-header\" style=\"font-weight: bold; font-size: 14px; margin-bottom: 5px;\">${countryName}</div>\n          <div class=\"tooltip-region\" style=\"margin-bottom: 5px;\">Region: ${regionName}</div>\n          ${countryData ? `<div class=\"tooltip-content\" style=\"margin-bottom: 5px;\">\n                <strong>${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)}:</strong> ${formatNumber(countryData.value)}<br>\n                <strong>Count:</strong> ${countryData.count} records\n              </div>` : '<div class=\"tooltip-content\" style=\"margin-bottom: 5px;\"><i>No data available</i></div>'}\n        `;\n\n      // Add PESTLE categories if we have them\n      if (pestleData.length > 0) {\n        tooltipHTML += `<div class=\"tooltip-pestle\" style=\"margin-top: 8px; border-top: 1px solid rgba(0,0,0,0.1); padding-top: 6px;\">\n            <div class=\"tooltip-pestle-header\" style=\"font-weight: 500; margin-bottom: 4px;\">Top PESTLE Categories:</div>\n            <ul class=\"tooltip-pestle-list\" style=\"margin: 0; padding-left: 16px;\">`;\n\n        // Show top 3 pestle categories\n        pestleData.slice(0, 3).forEach(item => {\n          tooltipHTML += `<li style=\"margin-bottom: 2px; font-size: 0.9em;\">${item.pestle} (${item.count})</li>`;\n        });\n        tooltipHTML += `</ul></div>`;\n      }\n\n      // Show the tooltip with the HTML content\n      tooltipRef.current.html(tooltipHTML).style('visibility', 'visible').style('left', event.pageX + 10 + 'px').style('top', event.pageY - 28 + 'px').transition().duration(200).style('opacity', 1);\n    }).on('mousemove', function (event) {\n      // Update tooltip position as mouse moves\n      tooltipRef.current.style('left', event.pageX + 10 + 'px').style('top', event.pageY - 28 + 'px');\n    }).on('mouseout', function () {\n      d3.select(this).transition().duration(200).attr('stroke', d => {\n        // Keep selected country's border highlighted\n        if (selectedCountry !== 'all') {\n          const isSelected = d.properties.name.toLowerCase() === selectedCountry.toLowerCase() || countryNameMap[selectedCountry.toLowerCase()] && countryNameMap[selectedCountry.toLowerCase()].toLowerCase() === d.properties.name.toLowerCase();\n          return isSelected ? '#333' : '#fff';\n        }\n        return '#fff';\n      }).attr('stroke-width', d => {\n        // Keep selected country's border thicker\n        if (selectedCountry !== 'all') {\n          const isSelected = d.properties.name.toLowerCase() === selectedCountry.toLowerCase() || countryNameMap[selectedCountry.toLowerCase()] && countryNameMap[selectedCountry.toLowerCase()].toLowerCase() === d.properties.name.toLowerCase();\n          return isSelected ? 2 : 0.5;\n        }\n        return 0.5;\n      });\n\n      // Hide tooltip\n      tooltipRef.current.transition().duration(200).style('opacity', 0).on('end', function () {\n        tooltipRef.current.style('visibility', 'hidden');\n      });\n    }).on('click', function (event, d) {\n      const countryName = d.properties.name;\n\n      // Find corresponding API country name (if it exists)\n      let apiCountryName = countryName;\n      const matchedApiCountry = countryNameMap[countryName.toLowerCase()];\n      if (matchedApiCountry) {\n        apiCountryName = matchedApiCountry;\n      }\n\n      // Only update if the country exists in our API data\n      if (countries.includes(apiCountryName) || countries.includes(countryName)) {\n        // If already selected, deselect it\n        if (selectedCountry === apiCountryName || selectedCountry === countryName) {\n          setSelectedCountry('all');\n        } else {\n          // Otherwise select the country\n          setSelectedCountry(countries.includes(apiCountryName) ? apiCountryName : countryName);\n        }\n      }\n    });\n\n    // Add a gentle zoom effect to the map\n    const zoom = d3.zoom().scaleExtent([1, 8]).on('zoom', event => {\n      svg.selectAll('path').attr('transform', event.transform);\n    });\n    d3.select(svgRef.current).call(zoom);\n\n    // Add legend\n    const legendWidth = 200;\n    const legendHeight = 15;\n    const legendPosition = {\n      x: width - legendWidth - 10,\n      y: height - 40\n    };\n\n    // Create gradient for legend\n    const defs = svg.append('defs');\n    const linearGradient = defs.append('linearGradient').attr('id', `map-color-gradient-${selectedMetric}`).attr('x1', '0%').attr('y1', '0%').attr('x2', '100%').attr('y2', '0%');\n    linearGradient.selectAll('stop').data([{\n      offset: '0%',\n      color: colorScale(0)\n    }, {\n      offset: '100%',\n      color: colorScale(d3.max(data, d => d.value) || 10)\n    }]).enter().append('stop').attr('offset', d => d.offset).attr('stop-color', d => d.color);\n\n    // Draw legend rectangle with rounded corners\n    svg.append('rect').attr('x', legendPosition.x).attr('y', legendPosition.y).attr('width', legendWidth).attr('height', legendHeight).attr('rx', 4).attr('ry', 4).style('fill', `url(#map-color-gradient-${selectedMetric})`).style('stroke', '#ccc').style('stroke-width', 0.5);\n\n    // Add legend labels\n    svg.append('text').attr('x', legendPosition.x).attr('y', legendPosition.y - 5).attr('fill', 'var(--dark-text)').attr('text-anchor', 'start').attr('font-size', '10px').text('Low');\n    svg.append('text').attr('x', legendPosition.x + legendWidth).attr('y', legendPosition.y - 5).attr('fill', 'var(--dark-text)').attr('text-anchor', 'end').attr('font-size', '10px').text('High');\n    svg.append('text').attr('x', legendPosition.x + legendWidth / 2).attr('y', legendPosition.y + 30).attr('fill', 'var(--dark-text)').attr('text-anchor', 'middle').attr('font-size', '12px').text(`${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)} by Country`);\n\n    // Add a subtle pulsing animation to countries with highest values or the selected country\n    const countriesToHighlight = selectedCountry !== 'all' ? [selectedCountry.toLowerCase()] : data.sort((a, b) => b.value - a.value).slice(0, 5).map(d => d.name.toLowerCase());\n    svg.selectAll('.country').filter(d => {\n      const countryLower = d.properties.name.toLowerCase();\n      return countriesToHighlight.includes(countryLower) || countryNameMap[countryLower] && countriesToHighlight.includes(countryNameMap[countryLower].toLowerCase());\n    }).each(function () {\n      const element = d3.select(this);\n\n      // Create pulsing effect\n      function repeat() {\n        element.transition().duration(1000).attr('stroke-width', 2).attr('stroke-opacity', 1).transition().duration(1000).attr('stroke-width', 0.5).attr('stroke-opacity', 0.7).on('end', repeat);\n      }\n      repeat();\n    });\n  };\n  const getColorClass = () => {\n    switch (selectedMetric) {\n      case 'intensity':\n        return 'intensity-theme';\n      case 'likelihood':\n        return 'likelihood-theme';\n      case 'relevance':\n        return 'relevance-theme';\n      default:\n        return 'intensity-theme';\n    }\n  };\n  const renderFilterControls = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"filter-controls\",\n    style: {\n      marginBottom: '15px',\n      display: 'flex',\n      gap: '15px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filter-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"country-filter\",\n        style: {\n          marginRight: '8px',\n          fontWeight: '500'\n        },\n        children: \"Country:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 585,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"country-filter\",\n        value: selectedCountry,\n        onChange: handleCountryChange,\n        style: {\n          padding: '6px 10px',\n          borderRadius: '4px',\n          border: '1px solid #ddd'\n        },\n        children: countries.map(country => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: country,\n          children: country === 'all' ? 'All Countries' : country\n        }, country, false, {\n          fileName: _jsxFileName,\n          lineNumber: 597,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 586,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 584,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filter-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"pestle-filter\",\n        style: {\n          marginRight: '8px',\n          fontWeight: '500'\n        },\n        children: \"PESTLE:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 603,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"pestle-filter\",\n        value: selectedPestle,\n        onChange: handlePestleChange,\n        style: {\n          padding: '6px 10px',\n          borderRadius: '4px',\n          border: '1px solid #ddd'\n        },\n        children: pestleOptions.map(pestle => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: pestle,\n          children: pestle === 'all' ? 'All Categories' : pestle\n        }, pestle, false, {\n          fileName: _jsxFileName,\n          lineNumber: 615,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 604,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 602,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 583,\n    columnNumber: 5\n  }, this);\n  const renderActionButtons = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-actions\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: `chart-action-btn ${selectedMetric === 'intensity' ? 'active' : ''}`,\n      onClick: () => handleMetricChange('intensity'),\n      children: \"Intensity\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 624,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `chart-action-btn ${selectedMetric === 'likelihood' ? 'active' : ''}`,\n      onClick: () => handleMetricChange('likelihood'),\n      children: \"Likelihood\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 630,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `chart-action-btn ${selectedMetric === 'relevance' ? 'active' : ''}`,\n      onClick: () => handleMetricChange('relevance'),\n      children: \"Relevance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 636,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 623,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(CardContainer, {\n    title: `Global ${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)} Distribution`,\n    actionButtons: renderActionButtons(),\n    className: getColorClass(),\n    children: [renderFilterControls(), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: containerRef,\n      style: {\n        width: '100%',\n        minHeight: fullSize ? '600px' : '400px',\n        maxHeight: fullSize ? '800px' : '500px'\n      },\n      className: \"country-map-container\",\n      children: loading ? /*#__PURE__*/_jsxDEV(Loader, {\n        message: \"Loading map data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 663,\n        columnNumber: 11\n      }, this) : error ? /*#__PURE__*/_jsxDEV(NoDataMessage, {\n        message: error,\n        icon: \"\\u26A0\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 11\n      }, this) : data.length === 0 ? /*#__PURE__*/_jsxDEV(NoDataMessage, {\n        message: \"No country data available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 667,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        className: `chart-svg country-map-svg ${getColorClass()}`,\n        style: {\n          borderRadius: '10px',\n          boxShadow: '0 4px 12px rgba(0, 0, 0, 0.05)'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 669,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 653,\n      columnNumber: 7\n    }, this), !loading && data.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-instructions\",\n      children: /*#__PURE__*/_jsxDEV(\"small\", {\n        children: \"Tip: Scroll to zoom, drag to pan, and click on countries for details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 682,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 681,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      global: true,\n      children: `\n        .map-tooltip {\n          position: absolute;\n          visibility: hidden;\n          opacity: 0;\n          background-color: white;\n          border: 1px solid #ddd;\n          border-radius: 4px;\n          padding: 10px;\n          box-shadow: 0 2px 10px rgba(0,0,0,0.2);\n          pointer-events: none;\n          font-size: 12px;\n          z-index: 1000;\n          max-width: 250px;\n          transition: opacity 0.2s;\n        }\n        \n        .tooltip-header {\n          font-weight: bold;\n          font-size: 14px;\n          margin-bottom: 5px;\n        }\n        \n        .tooltip-region {\n          margin-bottom: 5px;\n        }\n        \n        .tooltip-content {\n          margin-bottom: 5px;\n        }\n        \n        .tooltip-pestle {\n          margin-top: 8px;\n          border-top: 1px solid rgba(0,0,0,0.1);\n          padding-top: 6px;\n        }\n        \n        .tooltip-pestle-header {\n          font-weight: 500;\n          margin-bottom: 4px;\n        }\n        \n        .tooltip-pestle-list {\n          margin: 0;\n          padding-left: 16px;\n        }\n        \n        .tooltip-pestle-list li {\n          margin-bottom: 2px;\n          font-size: 0.9em;\n        }\n        \n        .country {\n          cursor: pointer;\n          transition: stroke 0.2s, fill 0.2s;\n        }\n        \n        .country:hover {\n          stroke: #333;\n          stroke-width: 1.5px;\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 687,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 646,\n    columnNumber: 5\n  }, this);\n};\n_s(CountryMap, \"sluwoL3ZiqD4Ua8KHav5XW6EyWE=\");\n_c = CountryMap;\nexport default CountryMap;\nvar _c;\n$RefreshReg$(_c, \"CountryMap\");","map":{"version":3,"names":["React","useState","useEffect","useRef","d3","topojson","api","CardContainer","Loader","NoDataMessage","formatNumber","debounce","jsxDEV","_jsxDEV","createTooltip","tooltip","select","empty","append","attr","style","CountryMap","metric","fullSize","_s","data","setData","worldData","setWorldData","loading","setLoading","error","setError","selectedMetric","setSelectedMetric","countries","setCountries","pestleOptions","setPestleOptions","selectedCountry","setSelectedCountry","selectedPestle","setSelectedPestle","regionData","setRegionData","countryNameMap","setCountryNameMap","countryPestleData","setCountryPestleData","svgRef","containerRef","tooltipRef","fetchFilterOptions","filters","getFilters","sort","pestle","err","console","fetchRegionData","regions","getRegions","countryToRegion","forEach","region","getData","then","item","country","toLowerCase","catch","fetchCountryPestleData","length","countryPestleMap","fetchPromises","filter","map","pestleCounts","Object","entries","a","b","count","Promise","all","countryFeatures","feature","objects","features","nameMap","apiCountry","match","find","f","properties","name","includes","fetchData","isCountryFiltered","topNData","worldTopoJSON","getTopN","fetch","res","json","drawMap","handleResize","window","addEventListener","removeEventListener","handleMetricChange","newMetric","handleCountryChange","e","target","value","handlePestleChange","current","selectAll","remove","containerWidth","clientWidth","containerHeight","Math","min","margin","top","right","bottom","left","width","height","svg","projection","geoNaturalEarth1","fitSize","path","geoPath","colorScale","scaleSequential","interpolateBlues","interpolateGreens","interpolateOranges","domain","max","d","dataByCountry","countryLower","selectedCountryData","topoName","enter","classes","isSelected","countryData","on","event","apiCountryName","apiCountryLower","countryName","regionName","pestleData","transition","duration","tooltipHTML","charAt","toUpperCase","slice","html","pageX","pageY","matchedApiCountry","zoom","scaleExtent","transform","call","legendWidth","legendHeight","legendPosition","x","y","defs","linearGradient","offset","color","text","countriesToHighlight","each","element","repeat","getColorClass","renderFilterControls","className","marginBottom","display","gap","children","htmlFor","marginRight","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","id","onChange","padding","borderRadius","border","renderActionButtons","onClick","title","actionButtons","ref","minHeight","maxHeight","message","icon","boxShadow","jsx","global","_c","$RefreshReg$"],"sources":["C:/Users/Dell/OneDrive/Desktop/new/frontend/src/components/charts/CountryMap.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport * as d3 from 'd3';\r\nimport * as topojson from 'topojson-client';\r\nimport api from '../../services/api';\r\nimport CardContainer from '../common/CardContainer';\r\nimport Loader from '../common/Loader';\r\nimport NoDataMessage from '../common/NoDataMessage';\r\nimport { formatNumber, debounce } from '../../utils/helpers';\r\n\r\n// Define createTooltip function since we're not sure about its implementation\r\nconst createTooltip = (d3) => {\r\n  // Create tooltip div if it doesn't exist\r\n  let tooltip = d3.select('body').select('.map-tooltip');\r\n  \r\n  if (tooltip.empty()) {\r\n    tooltip = d3.select('body')\r\n      .append('div')\r\n      .attr('class', 'map-tooltip')\r\n      .style('position', 'absolute')\r\n      .style('visibility', 'hidden')\r\n      .style('opacity', 0)\r\n      .style('background-color', 'white')\r\n      .style('border', '1px solid #ddd')\r\n      .style('border-radius', '4px')\r\n      .style('padding', '10px')\r\n      .style('box-shadow', '0 2px 10px rgba(0,0,0,0.2)')\r\n      .style('pointer-events', 'none')\r\n      .style('font-size', '12px')\r\n      .style('z-index', 1000);\r\n  }\r\n  \r\n  return tooltip;\r\n};\r\n\r\nconst CountryMap = ({ metric = 'intensity', fullSize = false }) => {\r\n  const [data, setData] = useState([]);\r\n  const [worldData, setWorldData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [selectedMetric, setSelectedMetric] = useState(metric);\r\n  const [countries, setCountries] = useState([]);\r\n  const [pestleOptions, setPestleOptions] = useState([]);\r\n  const [selectedCountry, setSelectedCountry] = useState('all');\r\n  const [selectedPestle, setSelectedPestle] = useState('all');\r\n  const [regionData, setRegionData] = useState({});\r\n  const [countryNameMap, setCountryNameMap] = useState({});\r\n  const [countryPestleData, setCountryPestleData] = useState({});\r\n  const svgRef = useRef(null);\r\n  const containerRef = useRef(null);\r\n  const tooltipRef = useRef(null);\r\n  \r\n  // Fetch filter options on initial load\r\n  useEffect(() => {\r\n    const fetchFilterOptions = async () => {\r\n      try {\r\n        const filters = await api.getFilters();\r\n        setCountries(['all', ...filters.countries.sort()]);\r\n        setPestleOptions(['all', ...filters.pestle.sort()]);\r\n      } catch (err) {\r\n        console.error('Error fetching filter options:', err);\r\n      }\r\n    };\r\n    \r\n    fetchFilterOptions();\r\n  }, []);\r\n  \r\n  // Fetch region data for tooltips\r\n  useEffect(() => {\r\n    const fetchRegionData = async () => {\r\n      try {\r\n        const regions = await api.getRegions();\r\n        // Create a mapping of country to region\r\n        const countryToRegion = {};\r\n        regions.forEach(region => {\r\n          // Get country insights for each region to map countries to regions\r\n          api.getData({ region: region.region })\r\n            .then(data => {\r\n              data.forEach(item => {\r\n                if (item.country && item.region) {\r\n                  countryToRegion[item.country.toLowerCase()] = item.region;\r\n                }\r\n              });\r\n              setRegionData(countryToRegion);\r\n            })\r\n            .catch(err => console.error('Error fetching country data for region:', err));\r\n        });\r\n      } catch (err) {\r\n        console.error('Error fetching region data:', err);\r\n      }\r\n    };\r\n    \r\n    fetchRegionData();\r\n  }, []);\r\n\r\n  // Fetch pestle data for each country\r\n  useEffect(() => {\r\n    const fetchCountryPestleData = async () => {\r\n      try {\r\n        // Skip if countries aren't loaded yet\r\n        if (countries.length <= 1) return;\r\n        \r\n        const countryPestleMap = {};\r\n        \r\n        // Create a batch of promises for fetching data for each country\r\n        const fetchPromises = countries\r\n          .filter(country => country !== 'all')\r\n          .map(country => \r\n            api.getData({ country })\r\n              .then(data => {\r\n                // Count occurrences of each pestle category for this country\r\n                const pestleCounts = {};\r\n                data.forEach(item => {\r\n                  if (item.pestle) {\r\n                    pestleCounts[item.pestle] = (pestleCounts[item.pestle] || 0) + 1;\r\n                  }\r\n                });\r\n                \r\n                // Store in our map with top pestles by count\r\n                countryPestleMap[country.toLowerCase()] = Object.entries(pestleCounts)\r\n                  .sort((a, b) => b[1] - a[1])\r\n                  .map(([pestle, count]) => ({ pestle, count }));\r\n              })\r\n              .catch(err => {\r\n                console.error(`Error fetching pestle data for ${country}:`, err);\r\n                return null;\r\n              })\r\n          );\r\n        \r\n        // Wait for all fetches to complete\r\n        await Promise.all(fetchPromises);\r\n        setCountryPestleData(countryPestleMap);\r\n      } catch (err) {\r\n        console.error('Error fetching country pestle data:', err);\r\n      }\r\n    };\r\n    \r\n    fetchCountryPestleData();\r\n  }, [countries]);\r\n\r\n  // Create a mapping between API country names and topojson country names\r\n  useEffect(() => {\r\n    if (worldData) {\r\n      const countryFeatures = topojson.feature(worldData, worldData.objects.countries).features;\r\n      const nameMap = {};\r\n      \r\n      // For each country in our API data, try to find a match in the topojson\r\n      countries.forEach(apiCountry => {\r\n        if (apiCountry !== 'all') {\r\n          // Try exact match first\r\n          let match = countryFeatures.find(f => \r\n            f.properties.name.toLowerCase() === apiCountry.toLowerCase()\r\n          );\r\n          \r\n          if (!match) {\r\n            // Try contains match (e.g., \"United States\" might match \"United States of America\")\r\n            match = countryFeatures.find(f => \r\n              f.properties.name.toLowerCase().includes(apiCountry.toLowerCase()) ||\r\n              apiCountry.toLowerCase().includes(f.properties.name.toLowerCase())\r\n            );\r\n          }\r\n          \r\n          if (match) {\r\n            nameMap[apiCountry.toLowerCase()] = match.properties.name;\r\n            // Also store reverse mapping\r\n            nameMap[match.properties.name.toLowerCase()] = apiCountry;\r\n          }\r\n        }\r\n      });\r\n      \r\n      setCountryNameMap(nameMap);\r\n    }\r\n  }, [worldData, countries]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        // Create filter object with selected filters\r\n        const filters = {};\r\n        if (selectedCountry !== 'all') filters.country = selectedCountry;\r\n        if (selectedPestle !== 'all') filters.pestle = selectedPestle;\r\n        \r\n        // If filter by country is active, we might need different logic\r\n        const isCountryFiltered = selectedCountry !== 'all';\r\n        \r\n        const [topNData, worldTopoJSON] = await Promise.all([\r\n          api.getTopN(selectedMetric, 'country', 50, filters),\r\n          fetch('https://unpkg.com/world-atlas@2.0.2/countries-110m.json').then(res => res.json())\r\n        ]);\r\n        \r\n        setData(topNData);\r\n        setWorldData(worldTopoJSON);\r\n        setLoading(false);\r\n      } catch (err) {\r\n        console.error('Error fetching map data:', err);\r\n        setError('Failed to load map data');\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [selectedMetric, selectedCountry, selectedPestle]);\r\n\r\n  useEffect(() => {\r\n    if (data.length > 0 && worldData && !loading) {\r\n      drawMap();\r\n      \r\n      // Add resize listener\r\n      const handleResize = debounce(() => {\r\n        drawMap();\r\n      }, 300);\r\n      \r\n      window.addEventListener('resize', handleResize);\r\n      return () => window.removeEventListener('resize', handleResize);\r\n    }\r\n  }, [data, worldData, loading, regionData, countryNameMap, countryPestleData]);\r\n\r\n  const handleMetricChange = (newMetric) => {\r\n    setSelectedMetric(newMetric);\r\n  };\r\n  \r\n  const handleCountryChange = (e) => {\r\n    setSelectedCountry(e.target.value);\r\n  };\r\n  \r\n  const handlePestleChange = (e) => {\r\n    setSelectedPestle(e.target.value);\r\n  };\r\n\r\n  const drawMap = () => {\r\n    if (!svgRef.current || !containerRef.current || !worldData) return;\r\n\r\n    // Clear previous chart\r\n    d3.select(svgRef.current).selectAll('*').remove();\r\n\r\n    // Set dimensions\r\n    const containerWidth = containerRef.current.clientWidth;\r\n    const containerHeight = fullSize ? Math.min(600, containerWidth * 0.6) : Math.min(500, containerWidth * 0.6);\r\n    const margin = { top: 20, right: 20, bottom: 20, left: 20 };\r\n    const width = containerWidth - margin.left - margin.right;\r\n    const height = containerHeight - margin.top - margin.bottom;\r\n\r\n    // Create SVG\r\n    const svg = d3.select(svgRef.current)\r\n      .attr('width', width + margin.left + margin.right)\r\n      .attr('height', height + margin.top + margin.bottom)\r\n      .append('g')\r\n      .attr('transform', `translate(${margin.left},${margin.top})`);\r\n\r\n    // Create tooltip if not already created\r\n    if (!tooltipRef.current) {\r\n      tooltipRef.current = createTooltip(d3);\r\n    }\r\n\r\n    // Create map projection\r\n    const projection = d3.geoNaturalEarth1()\r\n      .fitSize([width, height], topojson.feature(worldData, worldData.objects.countries));\r\n\r\n    // Create path generator\r\n    const path = d3.geoPath().projection(projection);\r\n\r\n    // Extract countries data\r\n    const countries = topojson.feature(worldData, worldData.objects.countries).features;\r\n\r\n    // Add a background rect for the ocean\r\n    svg.append(\"rect\")\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", height)\r\n      .attr(\"fill\", \"#E6F2F5\")\r\n      .attr(\"class\", \"ocean-background\");\r\n\r\n    // Create color scale based on metric value\r\n    const colorScale = d3.scaleSequential(\r\n      selectedMetric === 'intensity' ? d3.interpolateBlues :\r\n      selectedMetric === 'likelihood' ? d3.interpolateGreens :\r\n      d3.interpolateOranges\r\n    ).domain([0, d3.max(data, d => d.value) || 10]);\r\n\r\n    // Create a map for faster data lookup\r\n    const dataByCountry = {};\r\n    data.forEach(d => {\r\n      const countryLower = d.name.toLowerCase();\r\n      dataByCountry[countryLower] = d;\r\n      \r\n      // Also add mapped name if available\r\n      if (countryNameMap[countryLower]) {\r\n        dataByCountry[countryNameMap[countryLower].toLowerCase()] = d;\r\n      }\r\n    });\r\n\r\n    // Handle selected country highlighting\r\n    const selectedCountryData = selectedCountry !== 'all' ? {\r\n      name: selectedCountry,\r\n      topoName: countryNameMap[selectedCountry.toLowerCase()]\r\n    } : null;\r\n\r\n    // Draw countries\r\n    svg.selectAll('.country')\r\n      .data(countries)\r\n      .enter()\r\n      .append('path')\r\n      .attr('class', d => {\r\n        let classes = 'country';\r\n        // Add selected class if this is the selected country\r\n        if (selectedCountryData && \r\n            (d.properties.name === selectedCountryData.name || \r\n             d.properties.name === selectedCountryData.topoName)) {\r\n          classes += ' selected';\r\n        }\r\n        return classes;\r\n      })\r\n      .attr('d', path)\r\n      .attr('fill', d => {\r\n        // If filtering by country, emphasize the selected country\r\n        if (selectedCountry !== 'all') {\r\n          // Check if this is the selected country\r\n          const isSelected = d.properties.name.toLowerCase() === selectedCountry.toLowerCase() || \r\n                            (countryNameMap[selectedCountry.toLowerCase()] && \r\n                             countryNameMap[selectedCountry.toLowerCase()].toLowerCase() === d.properties.name.toLowerCase());\r\n          \r\n          if (!isSelected) {\r\n            return '#d0d0d0'; // Gray out non-selected countries\r\n          }\r\n        }\r\n        \r\n        // Get data for this country\r\n        const countryLower = d.properties.name.toLowerCase();\r\n        const countryData = dataByCountry[countryLower] || \r\n                          (countryNameMap[countryLower] ? dataByCountry[countryNameMap[countryLower].toLowerCase()] : null);\r\n        \r\n        return countryData ? colorScale(countryData.value) : '#d0d0d0';\r\n      })\r\n      .attr('stroke', '#fff')\r\n      .attr('stroke-width', d => {\r\n        // Make selected country's border thicker\r\n        if (selectedCountry !== 'all') {\r\n          const isSelected = d.properties.name.toLowerCase() === selectedCountry.toLowerCase() || \r\n                            (countryNameMap[selectedCountry.toLowerCase()] && \r\n                             countryNameMap[selectedCountry.toLowerCase()].toLowerCase() === d.properties.name.toLowerCase());\r\n          return isSelected ? 2 : 0.5;\r\n        }\r\n        return 0.5;\r\n      })\r\n      .on('mouseover', function(event, d) {\r\n        const countryLower = d.properties.name.toLowerCase();\r\n        // Get API country name (if it exists)\r\n        const apiCountryName = countryNameMap[countryLower] || d.properties.name;\r\n        const apiCountryLower = apiCountryName.toLowerCase();\r\n        \r\n        const countryData = dataByCountry[countryLower] || \r\n                          (countryNameMap[countryLower] ? dataByCountry[countryNameMap[countryLower].toLowerCase()] : null);\r\n        \r\n        const countryName = d.properties.name;\r\n        const regionName = regionData[apiCountryLower] || regionData[countryLower] || 'Unknown Region';\r\n        \r\n        // Get pestle data for this country\r\n        const pestleData = countryPestleData[apiCountryLower] || countryPestleData[countryLower] || [];\r\n        \r\n        d3.select(this)\r\n          .transition()\r\n          .duration(200)\r\n          .attr('stroke', '#333')\r\n          .attr('stroke-width', 1.5);\r\n        \r\n        // Create HTML for the tooltip\r\n        let tooltipHTML = `\r\n          <div class=\"tooltip-header\" style=\"font-weight: bold; font-size: 14px; margin-bottom: 5px;\">${countryName}</div>\r\n          <div class=\"tooltip-region\" style=\"margin-bottom: 5px;\">Region: ${regionName}</div>\r\n          ${countryData \r\n            ? `<div class=\"tooltip-content\" style=\"margin-bottom: 5px;\">\r\n                <strong>${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)}:</strong> ${formatNumber(countryData.value)}<br>\r\n                <strong>Count:</strong> ${countryData.count} records\r\n              </div>`\r\n            : '<div class=\"tooltip-content\" style=\"margin-bottom: 5px;\"><i>No data available</i></div>'}\r\n        `;\r\n        \r\n        // Add PESTLE categories if we have them\r\n        if (pestleData.length > 0) {\r\n          tooltipHTML += `<div class=\"tooltip-pestle\" style=\"margin-top: 8px; border-top: 1px solid rgba(0,0,0,0.1); padding-top: 6px;\">\r\n            <div class=\"tooltip-pestle-header\" style=\"font-weight: 500; margin-bottom: 4px;\">Top PESTLE Categories:</div>\r\n            <ul class=\"tooltip-pestle-list\" style=\"margin: 0; padding-left: 16px;\">`;\r\n          \r\n          // Show top 3 pestle categories\r\n          pestleData.slice(0, 3).forEach(item => {\r\n            tooltipHTML += `<li style=\"margin-bottom: 2px; font-size: 0.9em;\">${item.pestle} (${item.count})</li>`;\r\n          });\r\n          \r\n          tooltipHTML += `</ul></div>`;\r\n        }\r\n        \r\n        // Show the tooltip with the HTML content\r\n        tooltipRef.current\r\n          .html(tooltipHTML)\r\n          .style('visibility', 'visible')\r\n          .style('left', (event.pageX + 10) + 'px')\r\n          .style('top', (event.pageY - 28) + 'px')\r\n          .transition()\r\n          .duration(200)\r\n          .style('opacity', 1);\r\n      })\r\n      .on('mousemove', function(event) {\r\n        // Update tooltip position as mouse moves\r\n        tooltipRef.current\r\n          .style('left', (event.pageX + 10) + 'px')\r\n          .style('top', (event.pageY - 28) + 'px');\r\n      })\r\n      .on('mouseout', function() {\r\n        d3.select(this)\r\n          .transition()\r\n          .duration(200)\r\n          .attr('stroke', d => {\r\n            // Keep selected country's border highlighted\r\n            if (selectedCountry !== 'all') {\r\n              const isSelected = d.properties.name.toLowerCase() === selectedCountry.toLowerCase() || \r\n                                (countryNameMap[selectedCountry.toLowerCase()] && \r\n                                 countryNameMap[selectedCountry.toLowerCase()].toLowerCase() === d.properties.name.toLowerCase());\r\n              return isSelected ? '#333' : '#fff';\r\n            }\r\n            return '#fff';\r\n          })\r\n          .attr('stroke-width', d => {\r\n            // Keep selected country's border thicker\r\n            if (selectedCountry !== 'all') {\r\n              const isSelected = d.properties.name.toLowerCase() === selectedCountry.toLowerCase() || \r\n                                (countryNameMap[selectedCountry.toLowerCase()] && \r\n                                 countryNameMap[selectedCountry.toLowerCase()].toLowerCase() === d.properties.name.toLowerCase());\r\n              return isSelected ? 2 : 0.5;\r\n            }\r\n            return 0.5;\r\n          });\r\n        \r\n        // Hide tooltip\r\n        tooltipRef.current\r\n          .transition()\r\n          .duration(200)\r\n          .style('opacity', 0)\r\n          .on('end', function() {\r\n            tooltipRef.current.style('visibility', 'hidden');\r\n          });\r\n      })\r\n      .on('click', function(event, d) {\r\n        const countryName = d.properties.name;\r\n        \r\n        // Find corresponding API country name (if it exists)\r\n        let apiCountryName = countryName;\r\n        const matchedApiCountry = countryNameMap[countryName.toLowerCase()];\r\n        \r\n        if (matchedApiCountry) {\r\n          apiCountryName = matchedApiCountry;\r\n        }\r\n        \r\n        // Only update if the country exists in our API data\r\n        if (countries.includes(apiCountryName) || countries.includes(countryName)) {\r\n          // If already selected, deselect it\r\n          if (selectedCountry === apiCountryName || selectedCountry === countryName) {\r\n            setSelectedCountry('all');\r\n          } else {\r\n            // Otherwise select the country\r\n            setSelectedCountry(countries.includes(apiCountryName) ? apiCountryName : countryName);\r\n          }\r\n        }\r\n      });\r\n\r\n    // Add a gentle zoom effect to the map\r\n    const zoom = d3.zoom()\r\n      .scaleExtent([1, 8])\r\n      .on('zoom', (event) => {\r\n        svg.selectAll('path')\r\n          .attr('transform', event.transform);\r\n      });\r\n\r\n    d3.select(svgRef.current)\r\n      .call(zoom);\r\n\r\n    // Add legend\r\n    const legendWidth = 200;\r\n    const legendHeight = 15;\r\n    const legendPosition = {\r\n      x: width - legendWidth - 10,\r\n      y: height - 40\r\n    };\r\n\r\n    // Create gradient for legend\r\n    const defs = svg.append('defs');\r\n    const linearGradient = defs.append('linearGradient')\r\n      .attr('id', `map-color-gradient-${selectedMetric}`)\r\n      .attr('x1', '0%')\r\n      .attr('y1', '0%')\r\n      .attr('x2', '100%')\r\n      .attr('y2', '0%');\r\n\r\n    linearGradient.selectAll('stop')\r\n      .data([\r\n        {offset: '0%', color: colorScale(0)},\r\n        {offset: '100%', color: colorScale(d3.max(data, d => d.value) || 10)}\r\n      ])\r\n      .enter().append('stop')\r\n      .attr('offset', d => d.offset)\r\n      .attr('stop-color', d => d.color);\r\n\r\n    // Draw legend rectangle with rounded corners\r\n    svg.append('rect')\r\n      .attr('x', legendPosition.x)\r\n      .attr('y', legendPosition.y)\r\n      .attr('width', legendWidth)\r\n      .attr('height', legendHeight)\r\n      .attr('rx', 4)\r\n      .attr('ry', 4)\r\n      .style('fill', `url(#map-color-gradient-${selectedMetric})`)\r\n      .style('stroke', '#ccc')\r\n      .style('stroke-width', 0.5);\r\n\r\n    // Add legend labels\r\n    svg.append('text')\r\n      .attr('x', legendPosition.x)\r\n      .attr('y', legendPosition.y - 5)\r\n      .attr('fill', 'var(--dark-text)')\r\n      .attr('text-anchor', 'start')\r\n      .attr('font-size', '10px')\r\n      .text('Low');\r\n\r\n    svg.append('text')\r\n      .attr('x', legendPosition.x + legendWidth)\r\n      .attr('y', legendPosition.y - 5)\r\n      .attr('fill', 'var(--dark-text)')\r\n      .attr('text-anchor', 'end')\r\n      .attr('font-size', '10px')\r\n      .text('High');\r\n\r\n    svg.append('text')\r\n      .attr('x', legendPosition.x + legendWidth / 2)\r\n      .attr('y', legendPosition.y + 30)\r\n      .attr('fill', 'var(--dark-text)')\r\n      .attr('text-anchor', 'middle')\r\n      .attr('font-size', '12px')\r\n      .text(`${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)} by Country`);\r\n      \r\n    // Add a subtle pulsing animation to countries with highest values or the selected country\r\n    const countriesToHighlight = selectedCountry !== 'all' \r\n      ? [selectedCountry.toLowerCase()]\r\n      : data\r\n          .sort((a, b) => b.value - a.value)\r\n          .slice(0, 5)\r\n          .map(d => d.name.toLowerCase());\r\n      \r\n    svg.selectAll('.country')\r\n      .filter(d => {\r\n        const countryLower = d.properties.name.toLowerCase();\r\n        return countriesToHighlight.includes(countryLower) || \r\n               (countryNameMap[countryLower] && countriesToHighlight.includes(countryNameMap[countryLower].toLowerCase()));\r\n      })\r\n      .each(function() {\r\n        const element = d3.select(this);\r\n        \r\n        // Create pulsing effect\r\n        function repeat() {\r\n          element\r\n            .transition()\r\n            .duration(1000)\r\n            .attr('stroke-width', 2)\r\n            .attr('stroke-opacity', 1)\r\n            .transition()\r\n            .duration(1000)\r\n            .attr('stroke-width', 0.5)\r\n            .attr('stroke-opacity', 0.7)\r\n            .on('end', repeat);\r\n        }\r\n        \r\n        repeat();\r\n      });\r\n  };\r\n\r\n  const getColorClass = () => {\r\n    switch(selectedMetric) {\r\n      case 'intensity': return 'intensity-theme';\r\n      case 'likelihood': return 'likelihood-theme';\r\n      case 'relevance': return 'relevance-theme';\r\n      default: return 'intensity-theme';\r\n    }\r\n  };\r\n\r\n  const renderFilterControls = () => (\r\n    <div className=\"filter-controls\" style={{ marginBottom: '15px', display: 'flex', gap: '15px' }}>\r\n      <div className=\"filter-control\">\r\n        <label htmlFor=\"country-filter\" style={{ marginRight: '8px', fontWeight: '500' }}>Country:</label>\r\n        <select \r\n          id=\"country-filter\" \r\n          value={selectedCountry} \r\n          onChange={handleCountryChange}\r\n          style={{ \r\n            padding: '6px 10px', \r\n            borderRadius: '4px', \r\n            border: '1px solid #ddd' \r\n          }}\r\n        >\r\n          {countries.map(country => (\r\n            <option key={country} value={country}>{country === 'all' ? 'All Countries' : country}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      \r\n      <div className=\"filter-control\">\r\n        <label htmlFor=\"pestle-filter\" style={{ marginRight: '8px', fontWeight: '500' }}>PESTLE:</label>\r\n        <select \r\n          id=\"pestle-filter\" \r\n          value={selectedPestle} \r\n          onChange={handlePestleChange}\r\n          style={{ \r\n            padding: '6px 10px', \r\n            borderRadius: '4px', \r\n            border: '1px solid #ddd' \r\n          }}\r\n        >\r\n          {pestleOptions.map(pestle => (\r\n            <option key={pestle} value={pestle}>{pestle === 'all' ? 'All Categories' : pestle}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const renderActionButtons = () => (\r\n    <div className=\"chart-actions\">\r\n      <button \r\n        className={`chart-action-btn ${selectedMetric === 'intensity' ? 'active' : ''}`}\r\n        onClick={() => handleMetricChange('intensity')}\r\n      >\r\n        Intensity\r\n      </button>\r\n      <button \r\n        className={`chart-action-btn ${selectedMetric === 'likelihood' ? 'active' : ''}`}\r\n        onClick={() => handleMetricChange('likelihood')}\r\n      >\r\n        Likelihood\r\n      </button>\r\n      <button \r\n        className={`chart-action-btn ${selectedMetric === 'relevance' ? 'active' : ''}`}\r\n        onClick={() => handleMetricChange('relevance')}\r\n      >\r\n        Relevance\r\n      </button>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <CardContainer \r\n      title={`Global ${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)} Distribution`}\r\n      actionButtons={renderActionButtons()}\r\n      className={getColorClass()}\r\n    >\r\n      {renderFilterControls()}\r\n      \r\n      <div \r\n        ref={containerRef} \r\n        style={{ \r\n          width: '100%', \r\n          minHeight: fullSize ? '600px' : '400px',\r\n          maxHeight: fullSize ? '800px' : '500px'\r\n        }}\r\n        className=\"country-map-container\"\r\n      >\r\n        {loading ? (\r\n          <Loader message=\"Loading map data...\" />\r\n        ) : error ? (\r\n          <NoDataMessage message={error} icon=\"⚠️\" />\r\n        ) : data.length === 0 ? (\r\n          <NoDataMessage message=\"No country data available\" />\r\n        ) : (\r\n          <svg \r\n            ref={svgRef} \r\n            className={`chart-svg country-map-svg ${getColorClass()}`}\r\n            style={{\r\n              borderRadius: '10px',\r\n              boxShadow: '0 4px 12px rgba(0, 0, 0, 0.05)'\r\n            }}\r\n          ></svg>\r\n        )}\r\n      </div>\r\n      \r\n      {!loading && data.length > 0 && (\r\n        <div className=\"map-instructions\">\r\n          <small>Tip: Scroll to zoom, drag to pan, and click on countries for details</small>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Add CSS to ensure the tooltip is visible and well-styled */}\r\n      <style jsx global>{`\r\n        .map-tooltip {\r\n          position: absolute;\r\n          visibility: hidden;\r\n          opacity: 0;\r\n          background-color: white;\r\n          border: 1px solid #ddd;\r\n          border-radius: 4px;\r\n          padding: 10px;\r\n          box-shadow: 0 2px 10px rgba(0,0,0,0.2);\r\n          pointer-events: none;\r\n          font-size: 12px;\r\n          z-index: 1000;\r\n          max-width: 250px;\r\n          transition: opacity 0.2s;\r\n        }\r\n        \r\n        .tooltip-header {\r\n          font-weight: bold;\r\n          font-size: 14px;\r\n          margin-bottom: 5px;\r\n        }\r\n        \r\n        .tooltip-region {\r\n          margin-bottom: 5px;\r\n        }\r\n        \r\n        .tooltip-content {\r\n          margin-bottom: 5px;\r\n        }\r\n        \r\n        .tooltip-pestle {\r\n          margin-top: 8px;\r\n          border-top: 1px solid rgba(0,0,0,0.1);\r\n          padding-top: 6px;\r\n        }\r\n        \r\n        .tooltip-pestle-header {\r\n          font-weight: 500;\r\n          margin-bottom: 4px;\r\n        }\r\n        \r\n        .tooltip-pestle-list {\r\n          margin: 0;\r\n          padding-left: 16px;\r\n        }\r\n        \r\n        .tooltip-pestle-list li {\r\n          margin-bottom: 2px;\r\n          font-size: 0.9em;\r\n        }\r\n        \r\n        .country {\r\n          cursor: pointer;\r\n          transition: stroke 0.2s, fill 0.2s;\r\n        }\r\n        \r\n        .country:hover {\r\n          stroke: #333;\r\n          stroke-width: 1.5px;\r\n        }\r\n      `}</style>\r\n    </CardContainer>\r\n  );\r\n};\r\n\r\nexport default CountryMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}