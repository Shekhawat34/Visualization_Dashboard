{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\nconst api = {\n  // Get all data with optional filters\n  getData: async (filters = {}) => {\n    try {\n      // Remove empty or 'all' filters\n      const cleanFilters = Object.entries(filters).reduce((acc, [key, value]) => {\n        if (value && value !== 'all') {\n          acc[key] = value;\n        }\n        return acc;\n      }, {});\n      const response = await axios.get(`${API_URL}/data`, {\n        params: cleanFilters\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      throw error;\n    }\n  },\n  // Get all filter options\n  getFilters: async () => {\n    try {\n      const response = await axios.get(`${API_URL}/filters`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching filters:', error);\n      throw error;\n    }\n  },\n  // Get aggregated metrics with optional filters\n  getMetrics: async (groupBy = 'year', metric = 'intensity', filters = {}) => {\n    try {\n      // Clean filters by removing 'all' values\n      const cleanFilters = Object.entries(filters).reduce((acc, [key, value]) => {\n        if (value && value !== 'all') {\n          acc[key] = value;\n        }\n        return acc;\n      }, {});\n\n      // Add group_by and metric to params\n      const params = {\n        group_by: groupBy,\n        metric,\n        ...cleanFilters\n      };\n      const response = await axios.get(`${API_URL}/metrics`, {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching metrics:', error);\n      throw error;\n    }\n  },\n  // Get top N entries with optional filters\n  getTopN: async (metric = 'intensity', groupBy = 'country', limit = 10, filters = {}) => {\n    try {\n      // Clean filters by removing 'all' values\n      const cleanFilters = Object.entries(filters).reduce((acc, [key, value]) => {\n        if (value && value !== 'all') {\n          acc[key] = value;\n        }\n        return acc;\n      }, {});\n\n      // Add group_by, metric, and limit to params\n      const params = {\n        metric,\n        group_by: groupBy,\n        limit,\n        ...cleanFilters\n      };\n      const response = await axios.get(`${API_URL}/topN`, {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching topN:', error);\n      throw error;\n    }\n  },\n  // Get time series data with optional filters\n  getTimeseries: async (metric = 'intensity', filters = {}) => {\n    try {\n      // Clean filters by removing 'all' values\n      const cleanFilters = Object.entries(filters).reduce((acc, [key, value]) => {\n        if (value && value !== 'all') {\n          acc[key] = value;\n        }\n        return acc;\n      }, {});\n\n      // Add metric to params\n      const params = {\n        metric,\n        ...cleanFilters\n      };\n      const response = await axios.get(`${API_URL}/timeseries`, {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching timeseries:', error);\n      throw error;\n    }\n  },\n  // Get topic analysis with optional filters\n  getTopics: async (filters = {}) => {\n    try {\n      // Clean filters by removing 'all' values\n      const cleanFilters = Object.entries(filters).reduce((acc, [key, value]) => {\n        if (value && value !== 'all') {\n          acc[key] = value;\n        }\n        return acc;\n      }, {});\n      const response = await axios.get(`${API_URL}/topics`, {\n        params: cleanFilters\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching topics:', error);\n      throw error;\n    }\n  },\n  // Get region analysis with optional filters\n  getRegions: async (filters = {}) => {\n    try {\n      // Clean filters by removing 'all' values\n      const cleanFilters = Object.entries(filters).reduce((acc, [key, value]) => {\n        if (value && value !== 'all') {\n          acc[key] = value;\n        }\n        return acc;\n      }, {});\n      const response = await axios.get(`${API_URL}/regions`, {\n        params: cleanFilters\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching regions:', error);\n      throw error;\n    }\n  },\n  // Get sector analysis with optional filters\n  getSectors: async (filters = {}) => {\n    try {\n      // Clean filters by removing 'all' values\n      const cleanFilters = Object.entries(filters).reduce((acc, [key, value]) => {\n        if (value && value !== 'all') {\n          acc[key] = value;\n        }\n        return acc;\n      }, {});\n      const response = await axios.get(`${API_URL}/sectors`, {\n        params: cleanFilters\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching sectors:', error);\n      throw error;\n    }\n  },\n  // Get PEST analysis with optional filters\n  getPEST: async (filters = {}) => {\n    try {\n      // Clean filters by removing 'all' values\n      const cleanFilters = Object.entries(filters).reduce((acc, [key, value]) => {\n        if (value && value !== 'all') {\n          acc[key] = value;\n        }\n        return acc;\n      }, {});\n      const response = await axios.get(`${API_URL}/pest`, {\n        params: cleanFilters\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching PEST analysis:', error);\n      throw error;\n    }\n  },\n  // Get country insights with optional filters\n  getCountryInsights: async (country, filters = {}) => {\n    try {\n      // Clean filters by removing 'all' values\n      const cleanFilters = Object.entries(filters).reduce((acc, [key, value]) => {\n        if (value && value !== 'all') {\n          acc[key] = value;\n        }\n        return acc;\n      }, {});\n\n      // Add country to params\n      const params = {\n        country,\n        ...cleanFilters\n      };\n      const response = await axios.get(`${API_URL}/country-insights`, {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching country insights:', error);\n      throw error;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","api","getData","filters","cleanFilters","Object","entries","reduce","acc","key","value","response","get","params","data","error","console","getFilters","getMetrics","groupBy","metric","group_by","getTopN","limit","getTimeseries","getTopics","getRegions","getSectors","getPEST","getCountryInsights","country"],"sources":["C:/Users/Dell/OneDrive/Desktop/new/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\nconst api = {\r\n  // Get all data with optional filters\r\n  getData: async (filters = {}) => {\r\n    try {\r\n      // Remove empty or 'all' filters\r\n      const cleanFilters = Object.entries(filters)\r\n        .reduce((acc, [key, value]) => {\r\n          if (value && value !== 'all') {\r\n            acc[key] = value;\r\n          }\r\n          return acc;\r\n        }, {});\r\n        \r\n      const response = await axios.get(`${API_URL}/data`, { params: cleanFilters });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get all filter options\r\n  getFilters: async () => {\r\n    try {\r\n      const response = await axios.get(`${API_URL}/filters`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching filters:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get aggregated metrics with optional filters\r\n  getMetrics: async (groupBy = 'year', metric = 'intensity', filters = {}) => {\r\n    try {\r\n      // Clean filters by removing 'all' values\r\n      const cleanFilters = Object.entries(filters)\r\n        .reduce((acc, [key, value]) => {\r\n          if (value && value !== 'all') {\r\n            acc[key] = value;\r\n          }\r\n          return acc;\r\n        }, {});\r\n      \r\n      // Add group_by and metric to params\r\n      const params = { \r\n        group_by: groupBy, \r\n        metric,\r\n        ...cleanFilters\r\n      };\r\n      \r\n      const response = await axios.get(`${API_URL}/metrics`, { params });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching metrics:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get top N entries with optional filters\r\n  getTopN: async (metric = 'intensity', groupBy = 'country', limit = 10, filters = {}) => {\r\n    try {\r\n      // Clean filters by removing 'all' values\r\n      const cleanFilters = Object.entries(filters)\r\n        .reduce((acc, [key, value]) => {\r\n          if (value && value !== 'all') {\r\n            acc[key] = value;\r\n          }\r\n          return acc;\r\n        }, {});\r\n        \r\n      // Add group_by, metric, and limit to params\r\n      const params = {\r\n        metric,\r\n        group_by: groupBy,\r\n        limit,\r\n        ...cleanFilters\r\n      };\r\n      \r\n      const response = await axios.get(`${API_URL}/topN`, { params });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching topN:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get time series data with optional filters\r\n  getTimeseries: async (metric = 'intensity', filters = {}) => {\r\n    try {\r\n      // Clean filters by removing 'all' values\r\n      const cleanFilters = Object.entries(filters)\r\n        .reduce((acc, [key, value]) => {\r\n          if (value && value !== 'all') {\r\n            acc[key] = value;\r\n          }\r\n          return acc;\r\n        }, {});\r\n        \r\n      // Add metric to params\r\n      const params = {\r\n        metric,\r\n        ...cleanFilters\r\n      };\r\n      \r\n      const response = await axios.get(`${API_URL}/timeseries`, { params });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching timeseries:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get topic analysis with optional filters\r\n  getTopics: async (filters = {}) => {\r\n    try {\r\n      // Clean filters by removing 'all' values\r\n      const cleanFilters = Object.entries(filters)\r\n        .reduce((acc, [key, value]) => {\r\n          if (value && value !== 'all') {\r\n            acc[key] = value;\r\n          }\r\n          return acc;\r\n        }, {});\r\n        \r\n      const response = await axios.get(`${API_URL}/topics`, { params: cleanFilters });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching topics:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get region analysis with optional filters\r\n  getRegions: async (filters = {}) => {\r\n    try {\r\n      // Clean filters by removing 'all' values\r\n      const cleanFilters = Object.entries(filters)\r\n        .reduce((acc, [key, value]) => {\r\n          if (value && value !== 'all') {\r\n            acc[key] = value;\r\n          }\r\n          return acc;\r\n        }, {});\r\n        \r\n      const response = await axios.get(`${API_URL}/regions`, { params: cleanFilters });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching regions:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get sector analysis with optional filters\r\n  getSectors: async (filters = {}) => {\r\n    try {\r\n      // Clean filters by removing 'all' values\r\n      const cleanFilters = Object.entries(filters)\r\n        .reduce((acc, [key, value]) => {\r\n          if (value && value !== 'all') {\r\n            acc[key] = value;\r\n          }\r\n          return acc;\r\n        }, {});\r\n        \r\n      const response = await axios.get(`${API_URL}/sectors`, { params: cleanFilters });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching sectors:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get PEST analysis with optional filters\r\n  getPEST: async (filters = {}) => {\r\n    try {\r\n      // Clean filters by removing 'all' values\r\n      const cleanFilters = Object.entries(filters)\r\n        .reduce((acc, [key, value]) => {\r\n          if (value && value !== 'all') {\r\n            acc[key] = value;\r\n          }\r\n          return acc;\r\n        }, {});\r\n        \r\n      const response = await axios.get(`${API_URL}/pest`, { params: cleanFilters });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching PEST analysis:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get country insights with optional filters\r\n  getCountryInsights: async (country, filters = {}) => {\r\n    try {\r\n      // Clean filters by removing 'all' values\r\n      const cleanFilters = Object.entries(filters)\r\n        .reduce((acc, [key, value]) => {\r\n          if (value && value !== 'all') {\r\n            acc[key] = value;\r\n          }\r\n          return acc;\r\n        }, {});\r\n        \r\n      // Add country to params\r\n      const params = {\r\n        country,\r\n        ...cleanFilters\r\n      };\r\n      \r\n      const response = await axios.get(`${API_URL}/country-insights`, { params });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching country insights:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}