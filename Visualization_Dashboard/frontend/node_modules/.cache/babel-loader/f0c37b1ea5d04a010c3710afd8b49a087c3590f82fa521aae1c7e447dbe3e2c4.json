{"ast":null,"code":"export const sendChatMessage = async (message, customerId, role = 'guest') => {\n  try {\n    // Ensure message is provided\n    if (!message) {\n      throw new Error('Message content is required');\n    }\n\n    // Prepare the data to send to the API\n    const data = {\n      message,\n      customer_id: customerId || 'guest',\n      // Use 'guest' if customerId is not provided\n      role // Pass the role to differentiate between user types\n    };\n\n    // Make the API request\n    const response = await fetch('http://localhost:5000/api/chat', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n\n    // Handle non-successful responses\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(`Failed to send message: ${errorData.error || response.statusText}`);\n    }\n\n    // Parse the JSON response\n    const responseData = await response.json();\n    const {\n      response: chatbotResponse,\n      properties,\n      customer_data,\n      role: backendRole\n    } = responseData;\n\n    // Return the parsed response\n    return {\n      response: chatbotResponse,\n      properties,\n      // Include any properties returned\n      customerData: customer_data,\n      role: backendRole // Include role to handle different user roles on the front-end\n    };\n  } catch (error) {\n    // Log error details\n    console.error('Error sending chat message:', error);\n    return {\n      error: error.message || 'An error occurred while processing the chat message'\n    };\n  }\n};","map":{"version":3,"names":["sendChatMessage","message","customerId","role","Error","data","customer_id","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","error","statusText","responseData","chatbotResponse","properties","customer_data","backendRole","customerData","console"],"sources":["C:/Users/Dell/OneDrive/Desktop/new/frontend/src/api/chatApi.js"],"sourcesContent":["export const sendChatMessage = async (message, customerId, role = 'guest') => {\r\n  try {\r\n    // Ensure message is provided\r\n    if (!message) {\r\n      throw new Error('Message content is required');\r\n    }\r\n\r\n    // Prepare the data to send to the API\r\n    const data = {\r\n      message,\r\n      customer_id: customerId || 'guest', // Use 'guest' if customerId is not provided\r\n      role, // Pass the role to differentiate between user types\r\n    };\r\n\r\n    // Make the API request\r\n    const response = await fetch('http://localhost:5000/api/chat', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    // Handle non-successful responses\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(`Failed to send message: ${errorData.error || response.statusText}`);\r\n    }\r\n\r\n    // Parse the JSON response\r\n    const responseData = await response.json();\r\n    const { response: chatbotResponse, properties, customer_data, role: backendRole } = responseData;\r\n\r\n    // Return the parsed response\r\n    return {\r\n      response: chatbotResponse,\r\n      properties, // Include any properties returned\r\n      customerData: customer_data,\r\n      role: backendRole, // Include role to handle different user roles on the front-end\r\n    };\r\n  } catch (error) {\r\n    // Log error details\r\n    console.error('Error sending chat message:', error);\r\n    return {\r\n      error: error.message || 'An error occurred while processing the chat message',\r\n    };\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,eAAe,GAAG,MAAAA,CAAOC,OAAO,EAAEC,UAAU,EAAEC,IAAI,GAAG,OAAO,KAAK;EAC5E,IAAI;IACF;IACA,IAAI,CAACF,OAAO,EAAE;MACZ,MAAM,IAAIG,KAAK,CAAC,6BAA6B,CAAC;IAChD;;IAEA;IACA,MAAMC,IAAI,GAAG;MACXJ,OAAO;MACPK,WAAW,EAAEJ,UAAU,IAAI,OAAO;MAAE;MACpCC,IAAI,CAAE;IACR,CAAC;;IAED;IACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,EAAE;MAC7DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,IAAI;IAC3B,CAAC,CAAC;;IAEF;IACA,IAAI,CAACE,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIZ,KAAK,CAAC,2BAA2BW,SAAS,CAACE,KAAK,IAAIV,QAAQ,CAACW,UAAU,EAAE,CAAC;IACtF;;IAEA;IACA,MAAMC,YAAY,GAAG,MAAMZ,QAAQ,CAACS,IAAI,CAAC,CAAC;IAC1C,MAAM;MAAET,QAAQ,EAAEa,eAAe;MAAEC,UAAU;MAAEC,aAAa;MAAEnB,IAAI,EAAEoB;IAAY,CAAC,GAAGJ,YAAY;;IAEhG;IACA,OAAO;MACLZ,QAAQ,EAAEa,eAAe;MACzBC,UAAU;MAAE;MACZG,YAAY,EAAEF,aAAa;MAC3BnB,IAAI,EAAEoB,WAAW,CAAE;IACrB,CAAC;EACH,CAAC,CAAC,OAAON,KAAK,EAAE;IACd;IACAQ,OAAO,CAACR,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO;MACLA,KAAK,EAAEA,KAAK,CAAChB,OAAO,IAAI;IAC1B,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}