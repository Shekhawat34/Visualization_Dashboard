{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\OneDrive\\\\Desktop\\\\new\\\\frontend\\\\src\\\\components\\\\charts\\\\CountryMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport * as topojson from 'topojson-client';\nimport api from '../../services/api';\nimport CardContainer from '../common/CardContainer';\nimport Loader from '../common/Loader';\nimport NoDataMessage from '../common/NoDataMessage';\nimport { formatNumber, createTooltip, debounce } from '../../utils/helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CountryMap = ({\n  metric = 'intensity',\n  fullSize = false\n}) => {\n  _s();\n  const [data, setData] = useState([]);\n  const [worldData, setWorldData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedMetric, setSelectedMetric] = useState(metric);\n  const [countries, setCountries] = useState([]);\n  const [pestleOptions, setPestleOptions] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState('all');\n  const [selectedPestle, setSelectedPestle] = useState('all');\n  const [regionData, setRegionData] = useState({});\n  const svgRef = useRef(null);\n  const containerRef = useRef(null);\n  const tooltipRef = useRef(null);\n\n  // Fetch filter options on initial load\n  useEffect(() => {\n    const fetchFilterOptions = async () => {\n      try {\n        const filters = await api.getFilters();\n        setCountries(['all', ...filters.countries.sort()]);\n        setPestleOptions(['all', ...filters.pestle.sort()]);\n      } catch (err) {\n        console.error('Error fetching filter options:', err);\n      }\n    };\n    fetchFilterOptions();\n  }, []);\n\n  // Fetch region data for tooltips\n  useEffect(() => {\n    const fetchRegionData = async () => {\n      try {\n        const regions = await api.getRegions();\n        // Create a mapping of country to region\n        const countryToRegion = {};\n\n        // Process all regions at once instead of separate API calls\n        const promises = regions.map(region => api.getData({\n          region: region.region\n        }).then(data => {\n          data.forEach(item => {\n            if (item.country && item.region) {\n              // Store both lowercase and original case versions\n              countryToRegion[item.country.toLowerCase()] = item.region;\n            }\n          });\n        }).catch(err => console.error('Error fetching country data for region:', err)));\n        await Promise.all(promises);\n        setRegionData(countryToRegion);\n      } catch (err) {\n        console.error('Error fetching region data:', err);\n      }\n    };\n    fetchRegionData();\n  }, []);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        // Create filter object with selected filters\n        const filters = {};\n        if (selectedCountry !== 'all') filters.country = selectedCountry;\n        if (selectedPestle !== 'all') filters.pestle = selectedPestle;\n        const [topNData, worldTopoJSON] = await Promise.all([api.getTopN(selectedMetric, 'country', 50, filters), fetch('https://unpkg.com/world-atlas@2.0.2/countries-110m.json').then(res => res.json())]);\n        setData(topNData);\n        setWorldData(worldTopoJSON);\n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching map data:', err);\n        setError('Failed to load map data');\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [selectedMetric, selectedCountry, selectedPestle]);\n  useEffect(() => {\n    if (data.length > 0 && worldData && !loading) {\n      drawMap();\n\n      // Add resize listener\n      const handleResize = debounce(() => {\n        drawMap();\n      }, 300);\n      window.addEventListener('resize', handleResize);\n      return () => window.removeEventListener('resize', handleResize);\n    }\n  }, [data, worldData, loading, regionData]);\n  const handleMetricChange = newMetric => {\n    setSelectedMetric(newMetric);\n  };\n  const handleCountryChange = e => {\n    setSelectedCountry(e.target.value);\n  };\n  const handlePestleChange = e => {\n    setSelectedPestle(e.target.value);\n  };\n  const drawMap = () => {\n    if (!svgRef.current || !containerRef.current || !worldData) return;\n\n    // Clear previous chart\n    d3.select(svgRef.current).selectAll('*').remove();\n\n    // Set dimensions\n    const containerWidth = containerRef.current.clientWidth;\n    const containerHeight = fullSize ? Math.min(600, containerWidth * 0.6) : Math.min(500, containerWidth * 0.6);\n    const margin = {\n      top: 20,\n      right: 20,\n      bottom: 20,\n      left: 20\n    };\n    const width = containerWidth - margin.left - margin.right;\n    const height = containerHeight - margin.top - margin.bottom;\n\n    // Create SVG\n    const svg = d3.select(svgRef.current).attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n\n    // Create tooltip if not already created\n    if (!tooltipRef.current) {\n      tooltipRef.current = createTooltip(d3);\n    }\n\n    // Create map projection\n    const projection = d3.geoNaturalEarth1().fitSize([width, height], topojson.feature(worldData, worldData.objects.countries));\n\n    // Create path generator\n    const path = d3.geoPath().projection(projection);\n\n    // Extract countries data\n    const countries = topojson.feature(worldData, worldData.objects.countries).features;\n\n    // Add a background rect for the ocean\n    svg.append(\"rect\").attr(\"width\", width).attr(\"height\", height).attr(\"fill\", \"#E6F2F5\").attr(\"class\", \"ocean-background\");\n\n    // Create color scale based on metric value\n    const colorScale = d3.scaleSequential(selectedMetric === 'intensity' ? d3.interpolateBlues : selectedMetric === 'likelihood' ? d3.interpolateGreens : d3.interpolateOranges).domain([0, d3.max(data, d => d.value) || 10]);\n\n    // Create a map for faster data lookup\n    const dataByCountry = {};\n    data.forEach(d => {\n      // Store data with both lowercase keys and original case keys for better matching\n      dataByCountry[d.name.toLowerCase()] = d;\n    });\n\n    // Create a mapping between TopoJSON country names and API country names\n    // This is crucial for matching countries between datasets\n    const countryNameMap = {};\n    countries.forEach(country => {\n      // For each country in the TopoJSON data, look for a matching country in our API data\n      const countryName = country.properties.name;\n      const countryNameLower = countryName.toLowerCase();\n\n      // Check if we have data for this country\n      for (const apiCountry of data) {\n        const apiCountryLower = apiCountry.name.toLowerCase();\n\n        // If names match exactly\n        if (apiCountryLower === countryNameLower) {\n          countryNameMap[countryName] = apiCountry.name;\n          break;\n        }\n\n        // Check for partial matches (e.g., \"United States\" vs \"United States of America\")\n        if (apiCountryLower.includes(countryNameLower) || countryNameLower.includes(apiCountryLower)) {\n          countryNameMap[countryName] = apiCountry.name;\n          break;\n        }\n      }\n    });\n\n    // Draw countries\n    svg.selectAll('.country').data(countries).enter().append('path').attr('class', 'country').attr('d', path).attr('fill', d => {\n      const countryName = d.properties.name;\n      const mappedName = countryNameMap[countryName] || countryName;\n      const countryData = dataByCountry[mappedName.toLowerCase()];\n      return countryData ? colorScale(countryData.value) : '#d0d0d0';\n    }).attr('stroke', '#fff').attr('stroke-width', 0.5).on('mouseover', function (event, d) {\n      const countryName = d.properties.name;\n      const mappedName = countryNameMap[countryName] || countryName;\n      const countryData = dataByCountry[mappedName.toLowerCase()];\n\n      // Get region information - try lowercase and multiple variants of the country name\n      const countryLower = countryName.toLowerCase();\n      const regionName = regionData[countryLower] || regionData[mappedName.toLowerCase()] || 'Unknown Region';\n      d3.select(this).transition().duration(200).attr('stroke', '#333').attr('stroke-width', 1.5).attr('filter', 'drop-shadow(0px 0px 5px rgba(0,0,0,0.3))');\n      tooltipRef.current.style('opacity', 1).html(`\n            <div class=\"tooltip-header\">${countryName}</div>\n            <div class=\"tooltip-region\">Region: ${regionName}</div>\n            ${countryData ? `<div class=\"tooltip-content\">\n                  <strong>${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)}:</strong> ${formatNumber(countryData.value)}<br>\n                  <strong>Count:</strong> ${countryData.count} records\n                </div>` : '<div class=\"tooltip-content\"><i>No data available</i></div>'}\n          `).style('left', event.pageX + 10 + 'px').style('top', event.pageY - 20 + 'px');\n    }).on('mouseout', function () {\n      d3.select(this).transition().duration(200).attr('stroke', '#fff').attr('stroke-width', 0.5).attr('filter', null);\n      tooltipRef.current.transition().duration(200).style('opacity', 0);\n    }).on('click', function (event, d) {\n      const countryName = d.properties.name;\n      const mappedName = countryNameMap[countryName] || countryName;\n\n      // Highlight selected country\n      svg.selectAll('.country').classed('selected', false);\n      d3.select(this).classed('selected', true);\n\n      // Find the country in our available countries list that best matches this country\n      // This is crucial for ensuring the filter works with the correct country name format\n      const matchedCountry = countries.find(c => {\n        const cLower = c.toLowerCase();\n        const mappedLower = mappedName.toLowerCase();\n        return cLower === mappedLower || cLower.includes(mappedLower) || mappedLower.includes(cLower);\n      });\n      if (matchedCountry) {\n        setSelectedCountry(matchedCountry);\n      }\n    });\n\n    // Add a gentle zoom effect to the map\n    const zoom = d3.zoom().scaleExtent([1, 8]).on('zoom', event => {\n      svg.selectAll('path').attr('transform', event.transform);\n    });\n    d3.select(svgRef.current).call(zoom);\n\n    // Add legend\n    const legendWidth = 200;\n    const legendHeight = 15;\n    const legendPosition = {\n      x: width - legendWidth - 10,\n      y: height - 40\n    };\n\n    // Create gradient for legend\n    const defs = svg.append('defs');\n    const linearGradient = defs.append('linearGradient').attr('id', `map-color-gradient-${selectedMetric}`).attr('x1', '0%').attr('y1', '0%').attr('x2', '100%').attr('y2', '0%');\n    linearGradient.selectAll('stop').data([{\n      offset: '0%',\n      color: colorScale(0)\n    }, {\n      offset: '100%',\n      color: colorScale(d3.max(data, d => d.value) || 10)\n    }]).enter().append('stop').attr('offset', d => d.offset).attr('stop-color', d => d.color);\n\n    // Draw legend rectangle with rounded corners\n    svg.append('rect').attr('x', legendPosition.x).attr('y', legendPosition.y).attr('width', legendWidth).attr('height', legendHeight).attr('rx', 4).attr('ry', 4).style('fill', `url(#map-color-gradient-${selectedMetric})`).style('stroke', '#ccc').style('stroke-width', 0.5);\n\n    // Add legend labels\n    svg.append('text').attr('x', legendPosition.x).attr('y', legendPosition.y - 5).attr('fill', 'var(--dark-text)').attr('text-anchor', 'start').attr('font-size', '10px').text('Low');\n    svg.append('text').attr('x', legendPosition.x + legendWidth).attr('y', legendPosition.y - 5).attr('fill', 'var(--dark-text)').attr('text-anchor', 'end').attr('font-size', '10px').text('High');\n    svg.append('text').attr('x', legendPosition.x + legendWidth / 2).attr('y', legendPosition.y + 30).attr('fill', 'var(--dark-text)').attr('text-anchor', 'middle').attr('font-size', '12px').text(`${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)} by Country`);\n\n    // Add a subtle pulsing animation to countries with highest values\n    const topCountries = data.sort((a, b) => b.value - a.value).slice(0, 5).map(d => d.name.toLowerCase());\n    svg.selectAll('.country').filter(function (d) {\n      const countryName = d.properties.name;\n      const mappedName = countryNameMap[countryName] || countryName;\n      return topCountries.includes(mappedName.toLowerCase());\n    }).each(function () {\n      const element = d3.select(this);\n\n      // Create pulsing effect\n      function repeat() {\n        element.transition().duration(1000).attr('stroke-width', 2).attr('stroke-opacity', 1).transition().duration(1000).attr('stroke-width', 0.5).attr('stroke-opacity', 0.7).on('end', repeat);\n      }\n      repeat();\n    });\n  };\n  const getColorClass = () => {\n    switch (selectedMetric) {\n      case 'intensity':\n        return 'intensity-theme';\n      case 'likelihood':\n        return 'likelihood-theme';\n      case 'relevance':\n        return 'relevance-theme';\n      default:\n        return 'intensity-theme';\n    }\n  };\n  const renderFilterControls = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"filter-controls\",\n    style: {\n      marginBottom: '15px',\n      display: 'flex',\n      gap: '15px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filter-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"country-filter\",\n        style: {\n          marginRight: '8px',\n          fontWeight: '500'\n        },\n        children: \"Country:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"country-filter\",\n        value: selectedCountry,\n        onChange: handleCountryChange,\n        style: {\n          padding: '6px 10px',\n          borderRadius: '4px',\n          border: '1px solid #ddd'\n        },\n        children: countries.map(country => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: country,\n          children: country === 'all' ? 'All Countries' : country\n        }, country, false, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filter-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"pestle-filter\",\n        style: {\n          marginRight: '8px',\n          fontWeight: '500'\n        },\n        children: \"PESTLE:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"pestle-filter\",\n        value: selectedPestle,\n        onChange: handlePestleChange,\n        style: {\n          padding: '6px 10px',\n          borderRadius: '4px',\n          border: '1px solid #ddd'\n        },\n        children: pestleOptions.map(pestle => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: pestle,\n          children: pestle === 'all' ? 'All Categories' : pestle\n        }, pestle, false, {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 406,\n    columnNumber: 5\n  }, this);\n  const renderActionButtons = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-actions\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: `chart-action-btn ${selectedMetric === 'intensity' ? 'active' : ''}`,\n      onClick: () => handleMetricChange('intensity'),\n      children: \"Intensity\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `chart-action-btn ${selectedMetric === 'likelihood' ? 'active' : ''}`,\n      onClick: () => handleMetricChange('likelihood'),\n      children: \"Likelihood\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `chart-action-btn ${selectedMetric === 'relevance' ? 'active' : ''}`,\n      onClick: () => handleMetricChange('relevance'),\n      children: \"Relevance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 446,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(CardContainer, {\n    title: `Global ${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)} Distribution`,\n    actionButtons: renderActionButtons(),\n    className: getColorClass(),\n    children: [renderFilterControls(), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: containerRef,\n      style: {\n        width: '100%',\n        minHeight: fullSize ? '600px' : '400px',\n        maxHeight: fullSize ? '800px' : '500px'\n      },\n      className: \"country-map-container\",\n      children: loading ? /*#__PURE__*/_jsxDEV(Loader, {\n        message: \"Loading map data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 11\n      }, this) : error ? /*#__PURE__*/_jsxDEV(NoDataMessage, {\n        message: error,\n        icon: \"\\u26A0\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 11\n      }, this) : data.length === 0 ? /*#__PURE__*/_jsxDEV(NoDataMessage, {\n        message: \"No country data available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        className: `chart-svg country-map-svg ${getColorClass()}`,\n        style: {\n          borderRadius: '10px',\n          boxShadow: '0 4px 12px rgba(0, 0, 0, 0.05)'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 7\n    }, this), !loading && data.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-instructions\",\n      children: /*#__PURE__*/_jsxDEV(\"small\", {\n        children: \"Tip: Scroll to zoom, drag to pan, and click on countries for details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 469,\n    columnNumber: 5\n  }, this);\n};\n_s(CountryMap, \"vwvEFYBkvKW7nSTH2LGXQjN4XFw=\");\n_c = CountryMap;\nexport default CountryMap;\nvar _c;\n$RefreshReg$(_c, \"CountryMap\");","map":{"version":3,"names":["React","useState","useEffect","useRef","d3","topojson","api","CardContainer","Loader","NoDataMessage","formatNumber","createTooltip","debounce","jsxDEV","_jsxDEV","CountryMap","metric","fullSize","_s","data","setData","worldData","setWorldData","loading","setLoading","error","setError","selectedMetric","setSelectedMetric","countries","setCountries","pestleOptions","setPestleOptions","selectedCountry","setSelectedCountry","selectedPestle","setSelectedPestle","regionData","setRegionData","svgRef","containerRef","tooltipRef","fetchFilterOptions","filters","getFilters","sort","pestle","err","console","fetchRegionData","regions","getRegions","countryToRegion","promises","map","region","getData","then","forEach","item","country","toLowerCase","catch","Promise","all","fetchData","topNData","worldTopoJSON","getTopN","fetch","res","json","length","drawMap","handleResize","window","addEventListener","removeEventListener","handleMetricChange","newMetric","handleCountryChange","e","target","value","handlePestleChange","current","select","selectAll","remove","containerWidth","clientWidth","containerHeight","Math","min","margin","top","right","bottom","left","width","height","svg","attr","append","projection","geoNaturalEarth1","fitSize","feature","objects","path","geoPath","features","colorScale","scaleSequential","interpolateBlues","interpolateGreens","interpolateOranges","domain","max","d","dataByCountry","name","countryNameMap","countryName","properties","countryNameLower","apiCountry","apiCountryLower","includes","enter","mappedName","countryData","on","event","countryLower","regionName","transition","duration","style","html","charAt","toUpperCase","slice","count","pageX","pageY","classed","matchedCountry","find","c","cLower","mappedLower","zoom","scaleExtent","transform","call","legendWidth","legendHeight","legendPosition","x","y","defs","linearGradient","offset","color","text","topCountries","a","b","filter","each","element","repeat","getColorClass","renderFilterControls","className","marginBottom","display","gap","children","htmlFor","marginRight","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","id","onChange","padding","borderRadius","border","renderActionButtons","onClick","title","actionButtons","ref","minHeight","maxHeight","message","icon","boxShadow","_c","$RefreshReg$"],"sources":["C:/Users/Dell/OneDrive/Desktop/new/frontend/src/components/charts/CountryMap.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport * as d3 from 'd3';\r\nimport * as topojson from 'topojson-client';\r\nimport api from '../../services/api';\r\nimport CardContainer from '../common/CardContainer';\r\nimport Loader from '../common/Loader';\r\nimport NoDataMessage from '../common/NoDataMessage';\r\nimport { formatNumber, createTooltip, debounce } from '../../utils/helpers';\r\n\r\nconst CountryMap = ({ metric = 'intensity', fullSize = false }) => {\r\n  const [data, setData] = useState([]);\r\n  const [worldData, setWorldData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [selectedMetric, setSelectedMetric] = useState(metric);\r\n  const [countries, setCountries] = useState([]);\r\n  const [pestleOptions, setPestleOptions] = useState([]);\r\n  const [selectedCountry, setSelectedCountry] = useState('all');\r\n  const [selectedPestle, setSelectedPestle] = useState('all');\r\n  const [regionData, setRegionData] = useState({});\r\n  const svgRef = useRef(null);\r\n  const containerRef = useRef(null);\r\n  const tooltipRef = useRef(null);\r\n  \r\n  // Fetch filter options on initial load\r\n  useEffect(() => {\r\n    const fetchFilterOptions = async () => {\r\n      try {\r\n        const filters = await api.getFilters();\r\n        setCountries(['all', ...filters.countries.sort()]);\r\n        setPestleOptions(['all', ...filters.pestle.sort()]);\r\n      } catch (err) {\r\n        console.error('Error fetching filter options:', err);\r\n      }\r\n    };\r\n    \r\n    fetchFilterOptions();\r\n  }, []);\r\n  \r\n  // Fetch region data for tooltips\r\n  useEffect(() => {\r\n    const fetchRegionData = async () => {\r\n      try {\r\n        const regions = await api.getRegions();\r\n        // Create a mapping of country to region\r\n        const countryToRegion = {};\r\n        \r\n        // Process all regions at once instead of separate API calls\r\n        const promises = regions.map(region => \r\n          api.getData({ region: region.region })\r\n            .then(data => {\r\n              data.forEach(item => {\r\n                if (item.country && item.region) {\r\n                  // Store both lowercase and original case versions\r\n                  countryToRegion[item.country.toLowerCase()] = item.region;\r\n                }\r\n              });\r\n            })\r\n            .catch(err => console.error('Error fetching country data for region:', err))\r\n        );\r\n        \r\n        await Promise.all(promises);\r\n        setRegionData(countryToRegion);\r\n      } catch (err) {\r\n        console.error('Error fetching region data:', err);\r\n      }\r\n    };\r\n    \r\n    fetchRegionData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        // Create filter object with selected filters\r\n        const filters = {};\r\n        if (selectedCountry !== 'all') filters.country = selectedCountry;\r\n        if (selectedPestle !== 'all') filters.pestle = selectedPestle;\r\n        \r\n        const [topNData, worldTopoJSON] = await Promise.all([\r\n          api.getTopN(selectedMetric, 'country', 50, filters),\r\n          fetch('https://unpkg.com/world-atlas@2.0.2/countries-110m.json').then(res => res.json())\r\n        ]);\r\n        \r\n        setData(topNData);\r\n        setWorldData(worldTopoJSON);\r\n        setLoading(false);\r\n      } catch (err) {\r\n        console.error('Error fetching map data:', err);\r\n        setError('Failed to load map data');\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [selectedMetric, selectedCountry, selectedPestle]);\r\n\r\n  useEffect(() => {\r\n    if (data.length > 0 && worldData && !loading) {\r\n      drawMap();\r\n      \r\n      // Add resize listener\r\n      const handleResize = debounce(() => {\r\n        drawMap();\r\n      }, 300);\r\n      \r\n      window.addEventListener('resize', handleResize);\r\n      return () => window.removeEventListener('resize', handleResize);\r\n    }\r\n  }, [data, worldData, loading, regionData]);\r\n\r\n  const handleMetricChange = (newMetric) => {\r\n    setSelectedMetric(newMetric);\r\n  };\r\n  \r\n  const handleCountryChange = (e) => {\r\n    setSelectedCountry(e.target.value);\r\n  };\r\n  \r\n  const handlePestleChange = (e) => {\r\n    setSelectedPestle(e.target.value);\r\n  };\r\n\r\n  const drawMap = () => {\r\n    if (!svgRef.current || !containerRef.current || !worldData) return;\r\n\r\n    // Clear previous chart\r\n    d3.select(svgRef.current).selectAll('*').remove();\r\n\r\n    // Set dimensions\r\n    const containerWidth = containerRef.current.clientWidth;\r\n    const containerHeight = fullSize ? Math.min(600, containerWidth * 0.6) : Math.min(500, containerWidth * 0.6);\r\n    const margin = { top: 20, right: 20, bottom: 20, left: 20 };\r\n    const width = containerWidth - margin.left - margin.right;\r\n    const height = containerHeight - margin.top - margin.bottom;\r\n\r\n    // Create SVG\r\n    const svg = d3.select(svgRef.current)\r\n      .attr('width', width + margin.left + margin.right)\r\n      .attr('height', height + margin.top + margin.bottom)\r\n      .append('g')\r\n      .attr('transform', `translate(${margin.left},${margin.top})`);\r\n\r\n    // Create tooltip if not already created\r\n    if (!tooltipRef.current) {\r\n      tooltipRef.current = createTooltip(d3);\r\n    }\r\n\r\n    // Create map projection\r\n    const projection = d3.geoNaturalEarth1()\r\n      .fitSize([width, height], topojson.feature(worldData, worldData.objects.countries));\r\n\r\n    // Create path generator\r\n    const path = d3.geoPath().projection(projection);\r\n\r\n    // Extract countries data\r\n    const countries = topojson.feature(worldData, worldData.objects.countries).features;\r\n\r\n    // Add a background rect for the ocean\r\n    svg.append(\"rect\")\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", height)\r\n      .attr(\"fill\", \"#E6F2F5\")\r\n      .attr(\"class\", \"ocean-background\");\r\n\r\n    // Create color scale based on metric value\r\n    const colorScale = d3.scaleSequential(\r\n      selectedMetric === 'intensity' ? d3.interpolateBlues :\r\n      selectedMetric === 'likelihood' ? d3.interpolateGreens :\r\n      d3.interpolateOranges\r\n    ).domain([0, d3.max(data, d => d.value) || 10]);\r\n\r\n    // Create a map for faster data lookup\r\n    const dataByCountry = {};\r\n    data.forEach(d => {\r\n      // Store data with both lowercase keys and original case keys for better matching\r\n      dataByCountry[d.name.toLowerCase()] = d;\r\n    });\r\n\r\n    // Create a mapping between TopoJSON country names and API country names\r\n    // This is crucial for matching countries between datasets\r\n    const countryNameMap = {};\r\n    countries.forEach(country => {\r\n      // For each country in the TopoJSON data, look for a matching country in our API data\r\n      const countryName = country.properties.name;\r\n      const countryNameLower = countryName.toLowerCase();\r\n      \r\n      // Check if we have data for this country\r\n      for (const apiCountry of data) {\r\n        const apiCountryLower = apiCountry.name.toLowerCase();\r\n        \r\n        // If names match exactly\r\n        if (apiCountryLower === countryNameLower) {\r\n          countryNameMap[countryName] = apiCountry.name;\r\n          break;\r\n        }\r\n        \r\n        // Check for partial matches (e.g., \"United States\" vs \"United States of America\")\r\n        if (apiCountryLower.includes(countryNameLower) || countryNameLower.includes(apiCountryLower)) {\r\n          countryNameMap[countryName] = apiCountry.name;\r\n          break;\r\n        }\r\n      }\r\n    });\r\n\r\n    // Draw countries\r\n    svg.selectAll('.country')\r\n      .data(countries)\r\n      .enter()\r\n      .append('path')\r\n      .attr('class', 'country')\r\n      .attr('d', path)\r\n      .attr('fill', d => {\r\n        const countryName = d.properties.name;\r\n        const mappedName = countryNameMap[countryName] || countryName;\r\n        const countryData = dataByCountry[mappedName.toLowerCase()];\r\n        return countryData ? colorScale(countryData.value) : '#d0d0d0';\r\n      })\r\n      .attr('stroke', '#fff')\r\n      .attr('stroke-width', 0.5)\r\n      .on('mouseover', function(event, d) {\r\n        const countryName = d.properties.name;\r\n        const mappedName = countryNameMap[countryName] || countryName;\r\n        const countryData = dataByCountry[mappedName.toLowerCase()];\r\n        \r\n        // Get region information - try lowercase and multiple variants of the country name\r\n        const countryLower = countryName.toLowerCase();\r\n        const regionName = regionData[countryLower] || \r\n                          regionData[mappedName.toLowerCase()] || \r\n                          'Unknown Region';\r\n        \r\n        d3.select(this)\r\n          .transition()\r\n          .duration(200)\r\n          .attr('stroke', '#333')\r\n          .attr('stroke-width', 1.5)\r\n          .attr('filter', 'drop-shadow(0px 0px 5px rgba(0,0,0,0.3))');\r\n        \r\n        tooltipRef.current\r\n          .style('opacity', 1)\r\n          .html(`\r\n            <div class=\"tooltip-header\">${countryName}</div>\r\n            <div class=\"tooltip-region\">Region: ${regionName}</div>\r\n            ${countryData \r\n              ? `<div class=\"tooltip-content\">\r\n                  <strong>${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)}:</strong> ${formatNumber(countryData.value)}<br>\r\n                  <strong>Count:</strong> ${countryData.count} records\r\n                </div>`\r\n              : '<div class=\"tooltip-content\"><i>No data available</i></div>'}\r\n          `)\r\n          .style('left', (event.pageX + 10) + 'px')\r\n          .style('top', (event.pageY - 20) + 'px');\r\n      })\r\n      .on('mouseout', function() {\r\n        d3.select(this)\r\n          .transition()\r\n          .duration(200)\r\n          .attr('stroke', '#fff')\r\n          .attr('stroke-width', 0.5)\r\n          .attr('filter', null);\r\n        \r\n        tooltipRef.current\r\n          .transition()\r\n          .duration(200)\r\n          .style('opacity', 0);\r\n      })\r\n      .on('click', function(event, d) {\r\n        const countryName = d.properties.name;\r\n        const mappedName = countryNameMap[countryName] || countryName;\r\n        \r\n        // Highlight selected country\r\n        svg.selectAll('.country').classed('selected', false);\r\n        d3.select(this).classed('selected', true);\r\n        \r\n        // Find the country in our available countries list that best matches this country\r\n        // This is crucial for ensuring the filter works with the correct country name format\r\n        const matchedCountry = countries.find(c => {\r\n          const cLower = c.toLowerCase();\r\n          const mappedLower = mappedName.toLowerCase();\r\n          return cLower === mappedLower || cLower.includes(mappedLower) || mappedLower.includes(cLower);\r\n        });\r\n        \r\n        if (matchedCountry) {\r\n          setSelectedCountry(matchedCountry);\r\n        }\r\n      });\r\n\r\n    // Add a gentle zoom effect to the map\r\n    const zoom = d3.zoom()\r\n      .scaleExtent([1, 8])\r\n      .on('zoom', (event) => {\r\n        svg.selectAll('path')\r\n          .attr('transform', event.transform);\r\n      });\r\n\r\n    d3.select(svgRef.current)\r\n      .call(zoom);\r\n\r\n    // Add legend\r\n    const legendWidth = 200;\r\n    const legendHeight = 15;\r\n    const legendPosition = {\r\n      x: width - legendWidth - 10,\r\n      y: height - 40\r\n    };\r\n\r\n    // Create gradient for legend\r\n    const defs = svg.append('defs');\r\n    const linearGradient = defs.append('linearGradient')\r\n      .attr('id', `map-color-gradient-${selectedMetric}`)\r\n      .attr('x1', '0%')\r\n      .attr('y1', '0%')\r\n      .attr('x2', '100%')\r\n      .attr('y2', '0%');\r\n\r\n    linearGradient.selectAll('stop')\r\n      .data([\r\n        {offset: '0%', color: colorScale(0)},\r\n        {offset: '100%', color: colorScale(d3.max(data, d => d.value) || 10)}\r\n      ])\r\n      .enter().append('stop')\r\n      .attr('offset', d => d.offset)\r\n      .attr('stop-color', d => d.color);\r\n\r\n    // Draw legend rectangle with rounded corners\r\n    svg.append('rect')\r\n      .attr('x', legendPosition.x)\r\n      .attr('y', legendPosition.y)\r\n      .attr('width', legendWidth)\r\n      .attr('height', legendHeight)\r\n      .attr('rx', 4)\r\n      .attr('ry', 4)\r\n      .style('fill', `url(#map-color-gradient-${selectedMetric})`)\r\n      .style('stroke', '#ccc')\r\n      .style('stroke-width', 0.5);\r\n\r\n    // Add legend labels\r\n    svg.append('text')\r\n      .attr('x', legendPosition.x)\r\n      .attr('y', legendPosition.y - 5)\r\n      .attr('fill', 'var(--dark-text)')\r\n      .attr('text-anchor', 'start')\r\n      .attr('font-size', '10px')\r\n      .text('Low');\r\n\r\n    svg.append('text')\r\n      .attr('x', legendPosition.x + legendWidth)\r\n      .attr('y', legendPosition.y - 5)\r\n      .attr('fill', 'var(--dark-text)')\r\n      .attr('text-anchor', 'end')\r\n      .attr('font-size', '10px')\r\n      .text('High');\r\n\r\n    svg.append('text')\r\n      .attr('x', legendPosition.x + legendWidth / 2)\r\n      .attr('y', legendPosition.y + 30)\r\n      .attr('fill', 'var(--dark-text)')\r\n      .attr('text-anchor', 'middle')\r\n      .attr('font-size', '12px')\r\n      .text(`${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)} by Country`);\r\n      \r\n    // Add a subtle pulsing animation to countries with highest values\r\n    const topCountries = data\r\n      .sort((a, b) => b.value - a.value)\r\n      .slice(0, 5)\r\n      .map(d => d.name.toLowerCase());\r\n      \r\n    svg.selectAll('.country')\r\n      .filter(function(d) {\r\n        const countryName = d.properties.name;\r\n        const mappedName = countryNameMap[countryName] || countryName;\r\n        return topCountries.includes(mappedName.toLowerCase());\r\n      })\r\n      .each(function() {\r\n        const element = d3.select(this);\r\n        \r\n        // Create pulsing effect\r\n        function repeat() {\r\n          element\r\n            .transition()\r\n            .duration(1000)\r\n            .attr('stroke-width', 2)\r\n            .attr('stroke-opacity', 1)\r\n            .transition()\r\n            .duration(1000)\r\n            .attr('stroke-width', 0.5)\r\n            .attr('stroke-opacity', 0.7)\r\n            .on('end', repeat);\r\n        }\r\n        \r\n        repeat();\r\n      });\r\n  };\r\n\r\n  const getColorClass = () => {\r\n    switch(selectedMetric) {\r\n      case 'intensity': return 'intensity-theme';\r\n      case 'likelihood': return 'likelihood-theme';\r\n      case 'relevance': return 'relevance-theme';\r\n      default: return 'intensity-theme';\r\n    }\r\n  };\r\n\r\n  const renderFilterControls = () => (\r\n    <div className=\"filter-controls\" style={{ marginBottom: '15px', display: 'flex', gap: '15px' }}>\r\n      <div className=\"filter-control\">\r\n        <label htmlFor=\"country-filter\" style={{ marginRight: '8px', fontWeight: '500' }}>Country:</label>\r\n        <select \r\n          id=\"country-filter\" \r\n          value={selectedCountry} \r\n          onChange={handleCountryChange}\r\n          style={{ \r\n            padding: '6px 10px', \r\n            borderRadius: '4px', \r\n            border: '1px solid #ddd' \r\n          }}\r\n        >\r\n          {countries.map(country => (\r\n            <option key={country} value={country}>{country === 'all' ? 'All Countries' : country}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      \r\n      <div className=\"filter-control\">\r\n        <label htmlFor=\"pestle-filter\" style={{ marginRight: '8px', fontWeight: '500' }}>PESTLE:</label>\r\n        <select \r\n          id=\"pestle-filter\" \r\n          value={selectedPestle} \r\n          onChange={handlePestleChange}\r\n          style={{ \r\n            padding: '6px 10px', \r\n            borderRadius: '4px', \r\n            border: '1px solid #ddd' \r\n          }}\r\n        >\r\n          {pestleOptions.map(pestle => (\r\n            <option key={pestle} value={pestle}>{pestle === 'all' ? 'All Categories' : pestle}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const renderActionButtons = () => (\r\n    <div className=\"chart-actions\">\r\n      <button \r\n        className={`chart-action-btn ${selectedMetric === 'intensity' ? 'active' : ''}`}\r\n        onClick={() => handleMetricChange('intensity')}\r\n      >\r\n        Intensity\r\n      </button>\r\n      <button \r\n        className={`chart-action-btn ${selectedMetric === 'likelihood' ? 'active' : ''}`}\r\n        onClick={() => handleMetricChange('likelihood')}\r\n      >\r\n        Likelihood\r\n      </button>\r\n      <button \r\n        className={`chart-action-btn ${selectedMetric === 'relevance' ? 'active' : ''}`}\r\n        onClick={() => handleMetricChange('relevance')}\r\n      >\r\n        Relevance\r\n      </button>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <CardContainer \r\n      title={`Global ${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)} Distribution`}\r\n      actionButtons={renderActionButtons()}\r\n      className={getColorClass()}\r\n    >\r\n      {renderFilterControls()}\r\n      \r\n      <div \r\n        ref={containerRef} \r\n        style={{ \r\n          width: '100%', \r\n          minHeight: fullSize ? '600px' : '400px',\r\n          maxHeight: fullSize ? '800px' : '500px'\r\n        }}\r\n        className=\"country-map-container\"\r\n      >\r\n        {loading ? (\r\n          <Loader message=\"Loading map data...\" />\r\n        ) : error ? (\r\n          <NoDataMessage message={error} icon=\"⚠️\" />\r\n        ) : data.length === 0 ? (\r\n          <NoDataMessage message=\"No country data available\" />\r\n        ) : (\r\n          <svg \r\n            ref={svgRef} \r\n            className={`chart-svg country-map-svg ${getColorClass()}`}\r\n            style={{\r\n              borderRadius: '10px',\r\n              boxShadow: '0 4px 12px rgba(0, 0, 0, 0.05)'\r\n            }}\r\n          ></svg>\r\n        )}\r\n      </div>\r\n      \r\n      {!loading && data.length > 0 && (\r\n        <div className=\"map-instructions\">\r\n          <small>Tip: Scroll to zoom, drag to pan, and click on countries for details</small>\r\n        </div>\r\n      )}\r\n    </CardContainer>\r\n  );\r\n};\r\n\r\nexport default CountryMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}