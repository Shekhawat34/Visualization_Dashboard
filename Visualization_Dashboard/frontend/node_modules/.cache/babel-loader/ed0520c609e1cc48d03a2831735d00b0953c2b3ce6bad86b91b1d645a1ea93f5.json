{"ast":null,"code":"const BASE_URL='http://localhost:5000/api/dashboard';/**\r\n * Get the summary of the dashboard, including customer-related data and role-based info\r\n * @param {string} customerId - The ID of the customer (optional, defaults to 'guest')\r\n * @param {string} role - The role of the customer (optional, defaults to 'guest')\r\n * @returns {Promise<Object>} - The dashboard summary data\r\n */export const getDashboardSummary=async function(){let customerId=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'guest';let role=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'guest';try{// Prepare the query parameters to send to the backend (passing customer ID and role)\nconst queryParams=new URLSearchParams({customer_id:customerId,role:role});const response=await fetch(\"\".concat(BASE_URL,\"/summary?\").concat(queryParams.toString()),{method:'GET',// Use GET to retrieve the dashboard summary\nheaders:{'Content-Type':'application/json'}});// Check if the response is OK (status code 200)\nif(!response.ok){throw new Error('Failed to fetch dashboard summary');}// Parse the response data as JSON\nconst summaryData=await response.json();// Return the summary data to be used in components\nreturn{summary:summaryData.summary,// Dashboard summary information\ncustomerData:summaryData.customer_data,// Customer-specific data (based on the ID and role)\nproperties:summaryData.properties,// Properties based on the customer or client role\nrole:summaryData.role// Customer's role for front-end context\n};}catch(error){console.error('Error fetching dashboard summary:',error);throw error;// Re-throw the error to be handled by the calling function\n}};","map":{"version":3,"names":["BASE_URL","getDashboardSummary","customerId","arguments","length","undefined","role","queryParams","URLSearchParams","customer_id","response","fetch","concat","toString","method","headers","ok","Error","summaryData","json","summary","customerData","customer_data","properties","error","console"],"sources":["C:/Users/Dell/OneDrive/Desktop/new/frontend/src/api/dashboardApi.js"],"sourcesContent":["const BASE_URL = 'http://localhost:5000/api/dashboard';\r\n\r\n/**\r\n * Get the summary of the dashboard, including customer-related data and role-based info\r\n * @param {string} customerId - The ID of the customer (optional, defaults to 'guest')\r\n * @param {string} role - The role of the customer (optional, defaults to 'guest')\r\n * @returns {Promise<Object>} - The dashboard summary data\r\n */\r\nexport const getDashboardSummary = async (customerId = 'guest', role = 'guest') => {\r\n  try {\r\n    // Prepare the query parameters to send to the backend (passing customer ID and role)\r\n    const queryParams = new URLSearchParams({\r\n      customer_id: customerId,\r\n      role: role,\r\n    });\r\n\r\n    const response = await fetch(`${BASE_URL}/summary?${queryParams.toString()}`, {\r\n      method: 'GET',  // Use GET to retrieve the dashboard summary\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    // Check if the response is OK (status code 200)\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch dashboard summary');\r\n    }\r\n\r\n    // Parse the response data as JSON\r\n    const summaryData = await response.json();\r\n\r\n    // Return the summary data to be used in components\r\n    return {\r\n      summary: summaryData.summary,  // Dashboard summary information\r\n      customerData: summaryData.customer_data,  // Customer-specific data (based on the ID and role)\r\n      properties: summaryData.properties,  // Properties based on the customer or client role\r\n      role: summaryData.role,  // Customer's role for front-end context\r\n    };\r\n  } catch (error) {\r\n    console.error('Error fetching dashboard summary:', error);\r\n    throw error;  // Re-throw the error to be handled by the calling function\r\n  }\r\n};\r\n"],"mappings":"AAAA,KAAM,CAAAA,QAAQ,CAAG,qCAAqC,CAEtD;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,mBAAmB,CAAG,cAAAA,CAAA,CAAgD,IAAzC,CAAAC,UAAU,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,OAAO,IAAE,CAAAG,IAAI,CAAAH,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,OAAO,CAC5E,GAAI,CACF;AACA,KAAM,CAAAI,WAAW,CAAG,GAAI,CAAAC,eAAe,CAAC,CACtCC,WAAW,CAAEP,UAAU,CACvBI,IAAI,CAAEA,IACR,CAAC,CAAC,CAEF,KAAM,CAAAI,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIZ,QAAQ,cAAAY,MAAA,CAAYL,WAAW,CAACM,QAAQ,CAAC,CAAC,EAAI,CAC5EC,MAAM,CAAE,KAAK,CAAG;AAChBC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CAEF;AACA,GAAI,CAACL,QAAQ,CAACM,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,mCAAmC,CAAC,CACtD,CAEA;AACA,KAAM,CAAAC,WAAW,CAAG,KAAM,CAAAR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAEzC;AACA,MAAO,CACLC,OAAO,CAAEF,WAAW,CAACE,OAAO,CAAG;AAC/BC,YAAY,CAAEH,WAAW,CAACI,aAAa,CAAG;AAC1CC,UAAU,CAAEL,WAAW,CAACK,UAAU,CAAG;AACrCjB,IAAI,CAAEY,WAAW,CAACZ,IAAO;AAC3B,CAAC,CACH,CAAE,MAAOkB,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,CAAEA,KAAK,CAAC,CACzD,KAAM,CAAAA,KAAK,CAAG;AAChB,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}