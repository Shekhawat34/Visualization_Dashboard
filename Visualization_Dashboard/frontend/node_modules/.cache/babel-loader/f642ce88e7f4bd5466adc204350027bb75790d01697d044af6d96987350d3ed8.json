{"ast":null,"code":"export const sendChatMessage = async (message, customerId, role = 'guest') => {\n  try {\n    if (!message) {\n      throw new Error('Message content is required');\n    }\n    const data = {\n      message,\n      customer_id: customerId || 'guest',\n      role\n    };\n    const response = await fetch('http://localhost:5000/api/chat', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(`Failed to send message: ${errorData.error || response.statusText}`);\n    }\n    const responseData = await response.json();\n    const {\n      response: chatbotResponse,\n      properties,\n      customer_data,\n      ticket,\n      role: backendRole\n    } = responseData;\n    return {\n      response: chatbotResponse,\n      properties,\n      customerData: customer_data,\n      ticket: ticket ? {\n        ...ticket,\n        isAutoCreated: true // Flag to indicate auto ticket creation\n      } : null,\n      role: backendRole,\n      responseQuality: (customer_data === null || customer_data === void 0 ? void 0 : customer_data.response_quality_score) || null\n    };\n  } catch (error) {\n    console.error('Error sending chat message:', error);\n    return {\n      error: error.message || 'An error occurred while processing the chat message'\n    };\n  }\n};","map":{"version":3,"names":["sendChatMessage","message","customerId","role","Error","data","customer_id","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","error","statusText","responseData","chatbotResponse","properties","customer_data","ticket","backendRole","customerData","isAutoCreated","responseQuality","response_quality_score","console"],"sources":["C:/Users/Dell/OneDrive/Desktop/new/frontend/src/api/chatApi.js"],"sourcesContent":["export const sendChatMessage = async (message, customerId, role = 'guest') => {\r\n  try {\r\n    if (!message) {\r\n      throw new Error('Message content is required');\r\n    }\r\n\r\n    const data = {\r\n      message,\r\n      customer_id: customerId || 'guest',\r\n      role,\r\n    };\r\n\r\n    const response = await fetch('http://localhost:5000/api/chat', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(`Failed to send message: ${errorData.error || response.statusText}`);\r\n    }\r\n\r\n    const responseData = await response.json();\r\n    const { \r\n      response: chatbotResponse, \r\n      properties, \r\n      customer_data, \r\n      ticket, \r\n      role: backendRole \r\n    } = responseData;\r\n\r\n    return {\r\n      response: chatbotResponse,\r\n      properties,\r\n      customerData: customer_data,\r\n      ticket: ticket ? {\r\n        ...ticket,\r\n        isAutoCreated: true  // Flag to indicate auto ticket creation\r\n      } : null,\r\n      role: backendRole,\r\n      responseQuality: customer_data?.response_quality_score || null\r\n    };\r\n  } catch (error) {\r\n    console.error('Error sending chat message:', error);\r\n    return {\r\n      error: error.message || 'An error occurred while processing the chat message',\r\n    };\r\n  }\r\n};"],"mappings":"AAAA,OAAO,MAAMA,eAAe,GAAG,MAAAA,CAAOC,OAAO,EAAEC,UAAU,EAAEC,IAAI,GAAG,OAAO,KAAK;EAC5E,IAAI;IACF,IAAI,CAACF,OAAO,EAAE;MACZ,MAAM,IAAIG,KAAK,CAAC,6BAA6B,CAAC;IAChD;IAEA,MAAMC,IAAI,GAAG;MACXJ,OAAO;MACPK,WAAW,EAAEJ,UAAU,IAAI,OAAO;MAClCC;IACF,CAAC;IAED,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,EAAE;MAC7DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,IAAI;IAC3B,CAAC,CAAC;IAEF,IAAI,CAACE,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIZ,KAAK,CAAC,2BAA2BW,SAAS,CAACE,KAAK,IAAIV,QAAQ,CAACW,UAAU,EAAE,CAAC;IACtF;IAEA,MAAMC,YAAY,GAAG,MAAMZ,QAAQ,CAACS,IAAI,CAAC,CAAC;IAC1C,MAAM;MACJT,QAAQ,EAAEa,eAAe;MACzBC,UAAU;MACVC,aAAa;MACbC,MAAM;MACNpB,IAAI,EAAEqB;IACR,CAAC,GAAGL,YAAY;IAEhB,OAAO;MACLZ,QAAQ,EAAEa,eAAe;MACzBC,UAAU;MACVI,YAAY,EAAEH,aAAa;MAC3BC,MAAM,EAAEA,MAAM,GAAG;QACf,GAAGA,MAAM;QACTG,aAAa,EAAE,IAAI,CAAE;MACvB,CAAC,GAAG,IAAI;MACRvB,IAAI,EAAEqB,WAAW;MACjBG,eAAe,EAAE,CAAAL,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEM,sBAAsB,KAAI;IAC5D,CAAC;EACH,CAAC,CAAC,OAAOX,KAAK,EAAE;IACdY,OAAO,CAACZ,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO;MACLA,KAAK,EAAEA,KAAK,CAAChB,OAAO,IAAI;IAC1B,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}