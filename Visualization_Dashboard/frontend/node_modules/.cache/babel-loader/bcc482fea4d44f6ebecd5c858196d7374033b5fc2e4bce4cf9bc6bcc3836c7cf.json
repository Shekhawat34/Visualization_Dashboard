{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\OneDrive\\\\Desktop\\\\new\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\n\n// Create a Context for Auth\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Provide the AuthContext to the components that need it\nconst AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [authState, setAuthState] = useState({\n    isAuthenticated: false,\n    customerId: null,\n    userType: 'guest',\n    // guest, customer, or client\n    userDetails: null\n  });\n\n  // This function will log the user in, either as a customer or a client\n  const login = (userType, customerId = null) => {\n    setAuthState({\n      isAuthenticated: true,\n      customerId: customerId,\n      userType: userType,\n      userDetails: null // Add any additional details here after authentication if necessary\n    });\n  };\n\n  // This function will log the user out\n  const logout = () => {\n    setAuthState({\n      isAuthenticated: false,\n      customerId: null,\n      userType: 'guest',\n      userDetails: null\n    });\n  };\n\n  // Load user state from local storage or session storage on initial load (if required)\n  useEffect(() => {\n    const storedUserData = localStorage.getItem('authState');\n    if (storedUserData) {\n      setAuthState(JSON.parse(storedUserData));\n    }\n  }, []);\n\n  // Store the authentication state in local storage whenever it changes (optional)\n  useEffect(() => {\n    if (authState.isAuthenticated) {\n      localStorage.setItem('authState', JSON.stringify(authState));\n    } else {\n      localStorage.removeItem('authState');\n    }\n  }, [authState]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      authState,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n// Export the AuthContext and AuthProvider\n_s(AuthProvider, \"AeYbyuzGwU4M0QErAV93Dv76diI=\");\n_c = AuthProvider;\nexport { AuthContext, AuthProvider };\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","authState","setAuthState","isAuthenticated","customerId","userType","userDetails","login","logout","storedUserData","localStorage","getItem","JSON","parse","setItem","stringify","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Dell/OneDrive/Desktop/new/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\n\r\n// Create a Context for Auth\r\nconst AuthContext = createContext();\r\n\r\n// Provide the AuthContext to the components that need it\r\nconst AuthProvider = ({ children }) => {\r\n  const [authState, setAuthState] = useState({\r\n    isAuthenticated: false,\r\n    customerId: null,\r\n    userType: 'guest', // guest, customer, or client\r\n    userDetails: null,\r\n  });\r\n\r\n  // This function will log the user in, either as a customer or a client\r\n  const login = (userType, customerId = null) => {\r\n    setAuthState({\r\n      isAuthenticated: true,\r\n      customerId: customerId,\r\n      userType: userType,\r\n      userDetails: null, // Add any additional details here after authentication if necessary\r\n    });\r\n  };\r\n\r\n  // This function will log the user out\r\n  const logout = () => {\r\n    setAuthState({\r\n      isAuthenticated: false,\r\n      customerId: null,\r\n      userType: 'guest',\r\n      userDetails: null,\r\n    });\r\n  };\r\n\r\n  // Load user state from local storage or session storage on initial load (if required)\r\n  useEffect(() => {\r\n    const storedUserData = localStorage.getItem('authState');\r\n    if (storedUserData) {\r\n      setAuthState(JSON.parse(storedUserData));\r\n    }\r\n  }, []);\r\n\r\n  // Store the authentication state in local storage whenever it changes (optional)\r\n  useEffect(() => {\r\n    if (authState.isAuthenticated) {\r\n      localStorage.setItem('authState', JSON.stringify(authState));\r\n    } else {\r\n      localStorage.removeItem('authState');\r\n    }\r\n  }, [authState]);\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ authState, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Export the AuthContext and AuthProvider\r\nexport { AuthContext, AuthProvider };\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAEjE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;;AAEnC;AACA,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC;IACzCU,eAAe,EAAE,KAAK;IACtBC,UAAU,EAAE,IAAI;IAChBC,QAAQ,EAAE,OAAO;IAAE;IACnBC,WAAW,EAAE;EACf,CAAC,CAAC;;EAEF;EACA,MAAMC,KAAK,GAAGA,CAACF,QAAQ,EAAED,UAAU,GAAG,IAAI,KAAK;IAC7CF,YAAY,CAAC;MACXC,eAAe,EAAE,IAAI;MACrBC,UAAU,EAAEA,UAAU;MACtBC,QAAQ,EAAEA,QAAQ;MAClBC,WAAW,EAAE,IAAI,CAAE;IACrB,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAME,MAAM,GAAGA,CAAA,KAAM;IACnBN,YAAY,CAAC;MACXC,eAAe,EAAE,KAAK;MACtBC,UAAU,EAAE,IAAI;MAChBC,QAAQ,EAAE,OAAO;MACjBC,WAAW,EAAE;IACf,CAAC,CAAC;EACJ,CAAC;;EAED;EACAZ,SAAS,CAAC,MAAM;IACd,MAAMe,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IACxD,IAAIF,cAAc,EAAE;MAClBP,YAAY,CAACU,IAAI,CAACC,KAAK,CAACJ,cAAc,CAAC,CAAC;IAC1C;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAf,SAAS,CAAC,MAAM;IACd,IAAIO,SAAS,CAACE,eAAe,EAAE;MAC7BO,YAAY,CAACI,OAAO,CAAC,WAAW,EAAEF,IAAI,CAACG,SAAS,CAACd,SAAS,CAAC,CAAC;IAC9D,CAAC,MAAM;MACLS,YAAY,CAACM,UAAU,CAAC,WAAW,CAAC;IACtC;EACF,CAAC,EAAE,CAACf,SAAS,CAAC,CAAC;EAEf,oBACEL,OAAA,CAACC,WAAW,CAACoB,QAAQ;IAACC,KAAK,EAAE;MAAEjB,SAAS;MAAEM,KAAK;MAAEC;IAAO,CAAE;IAAAT,QAAA,EACvDA;EAAQ;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAAtB,EAAA,CApDMF,YAAY;AAAAyB,EAAA,GAAZzB,YAAY;AAqDlB,SAASD,WAAW,EAAEC,YAAY;AAAG,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}