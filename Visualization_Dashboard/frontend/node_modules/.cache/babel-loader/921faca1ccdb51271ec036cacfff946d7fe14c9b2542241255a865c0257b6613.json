{"ast":null,"code":"const BASE_URL = 'http://localhost:5000/api/dashboard';\n\n/**\r\n * Get the summary of the dashboard, including customer-related data and role-based info\r\n * @param {string} customerId - The ID of the customer (optional, defaults to 'guest')\r\n * @param {string} role - The role of the customer (optional, defaults to 'guest')\r\n * @returns {Promise<Object>} - The dashboard summary data\r\n */\nexport const getDashboardSummary = async (customerId = 'guest', role = 'guest') => {\n  try {\n    // Prepare the query parameters to send to the backend (passing customer ID and role)\n    const queryParams = new URLSearchParams({\n      customer_id: customerId,\n      role: role\n    });\n    const response = await fetch(`${BASE_URL}/summary?${queryParams.toString()}`, {\n      method: 'GET',\n      // Use GET to retrieve the dashboard summary\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Check if the response is OK (status code 200)\n    if (!response.ok) {\n      throw new Error('Failed to fetch dashboard summary');\n    }\n\n    // Parse the response data as JSON\n    const summaryData = await response.json();\n\n    // Return the summary data to be used in components\n    return {\n      summary: summaryData.summary,\n      // Dashboard summary information\n      customerData: summaryData.customer_data,\n      // Customer-specific data (based on the ID and role)\n      properties: summaryData.properties,\n      // Properties based on the customer or client role\n      role: summaryData.role // Customer's role for front-end context\n    };\n  } catch (error) {\n    console.error('Error fetching dashboard summary:', error);\n    throw error; // Re-throw the error to be handled by the calling function\n  }\n};","map":{"version":3,"names":["BASE_URL","getDashboardSummary","customerId","role","queryParams","URLSearchParams","customer_id","response","fetch","toString","method","headers","ok","Error","summaryData","json","summary","customerData","customer_data","properties","error","console"],"sources":["C:/Users/Dell/OneDrive/Desktop/new/frontend/src/api/dashboardApi.js"],"sourcesContent":["const BASE_URL = 'http://localhost:5000/api/dashboard';\r\n\r\n/**\r\n * Get the summary of the dashboard, including customer-related data and role-based info\r\n * @param {string} customerId - The ID of the customer (optional, defaults to 'guest')\r\n * @param {string} role - The role of the customer (optional, defaults to 'guest')\r\n * @returns {Promise<Object>} - The dashboard summary data\r\n */\r\nexport const getDashboardSummary = async (customerId = 'guest', role = 'guest') => {\r\n  try {\r\n    // Prepare the query parameters to send to the backend (passing customer ID and role)\r\n    const queryParams = new URLSearchParams({\r\n      customer_id: customerId,\r\n      role: role,\r\n    });\r\n\r\n    const response = await fetch(`${BASE_URL}/summary?${queryParams.toString()}`, {\r\n      method: 'GET',  // Use GET to retrieve the dashboard summary\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    // Check if the response is OK (status code 200)\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch dashboard summary');\r\n    }\r\n\r\n    // Parse the response data as JSON\r\n    const summaryData = await response.json();\r\n\r\n    // Return the summary data to be used in components\r\n    return {\r\n      summary: summaryData.summary,  // Dashboard summary information\r\n      customerData: summaryData.customer_data,  // Customer-specific data (based on the ID and role)\r\n      properties: summaryData.properties,  // Properties based on the customer or client role\r\n      role: summaryData.role,  // Customer's role for front-end context\r\n    };\r\n  } catch (error) {\r\n    console.error('Error fetching dashboard summary:', error);\r\n    throw error;  // Re-throw the error to be handled by the calling function\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,qCAAqC;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,mBAAmB,GAAG,MAAAA,CAAOC,UAAU,GAAG,OAAO,EAAEC,IAAI,GAAG,OAAO,KAAK;EACjF,IAAI;IACF;IACA,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAAC;MACtCC,WAAW,EAAEJ,UAAU;MACvBC,IAAI,EAAEA;IACR,CAAC,CAAC;IAEF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,QAAQ,YAAYI,WAAW,CAACK,QAAQ,CAAC,CAAC,EAAE,EAAE;MAC5EC,MAAM,EAAE,KAAK;MAAG;MAChBC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;;IAEF;IACA,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,mCAAmC,CAAC;IACtD;;IAEA;IACA,MAAMC,WAAW,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;;IAEzC;IACA,OAAO;MACLC,OAAO,EAAEF,WAAW,CAACE,OAAO;MAAG;MAC/BC,YAAY,EAAEH,WAAW,CAACI,aAAa;MAAG;MAC1CC,UAAU,EAAEL,WAAW,CAACK,UAAU;MAAG;MACrChB,IAAI,EAAEW,WAAW,CAACX,IAAI,CAAG;IAC3B,CAAC;EACH,CAAC,CAAC,OAAOiB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzD,MAAMA,KAAK,CAAC,CAAE;EAChB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}