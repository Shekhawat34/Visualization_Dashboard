{"ast":null,"code":"export const sendChatMessage=async function(message,customerId){let role=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'guest';try{// Ensure message is provided\nif(!message){throw new Error('Message content is required');}// Prepare the data to send to the API\nconst data={message,customer_id:customerId||'guest',// Use 'guest' if customerId is not provided\nrole// Pass the role to differentiate between user types\n};// Make the API request\nconst response=await fetch('http://localhost:5000/api/chat',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(data)});// Handle non-successful responses\nif(!response.ok){const errorData=await response.json();throw new Error(\"Failed to send message: \".concat(errorData.error||response.statusText));}// Parse the JSON response\nconst responseData=await response.json();const{response:chatbotResponse,properties,customer_data,role:backendRole}=responseData;// Return the parsed response\nreturn{response:chatbotResponse,properties,// Include any properties returned\ncustomerData:customer_data,role:backendRole// Include role to handle different user roles on the front-end\n};}catch(error){// Log error details\nconsole.error('Error sending chat message:',error);return{error:error.message||'An error occurred while processing the chat message'};}};","map":{"version":3,"names":["sendChatMessage","message","customerId","role","arguments","length","undefined","Error","data","customer_id","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","concat","error","statusText","responseData","chatbotResponse","properties","customer_data","backendRole","customerData","console"],"sources":["C:/Users/Dell/OneDrive/Desktop/new/frontend/src/api/chatApi.js"],"sourcesContent":["export const sendChatMessage = async (message, customerId, role = 'guest') => {\r\n  try {\r\n    // Ensure message is provided\r\n    if (!message) {\r\n      throw new Error('Message content is required');\r\n    }\r\n\r\n    // Prepare the data to send to the API\r\n    const data = {\r\n      message,\r\n      customer_id: customerId || 'guest', // Use 'guest' if customerId is not provided\r\n      role, // Pass the role to differentiate between user types\r\n    };\r\n\r\n    // Make the API request\r\n    const response = await fetch('http://localhost:5000/api/chat', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    // Handle non-successful responses\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(`Failed to send message: ${errorData.error || response.statusText}`);\r\n    }\r\n\r\n    // Parse the JSON response\r\n    const responseData = await response.json();\r\n    const { response: chatbotResponse, properties, customer_data, role: backendRole } = responseData;\r\n\r\n    // Return the parsed response\r\n    return {\r\n      response: chatbotResponse,\r\n      properties, // Include any properties returned\r\n      customerData: customer_data,\r\n      role: backendRole, // Include role to handle different user roles on the front-end\r\n    };\r\n  } catch (error) {\r\n    // Log error details\r\n    console.error('Error sending chat message:', error);\r\n    return {\r\n      error: error.message || 'An error occurred while processing the chat message',\r\n    };\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAO,MAAM,CAAAA,eAAe,CAAG,cAAAA,CAAOC,OAAO,CAAEC,UAAU,CAAqB,IAAnB,CAAAC,IAAI,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,OAAO,CACvE,GAAI,CACF;AACA,GAAI,CAACH,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAM,KAAK,CAAC,6BAA6B,CAAC,CAChD,CAEA;AACA,KAAM,CAAAC,IAAI,CAAG,CACXP,OAAO,CACPQ,WAAW,CAAEP,UAAU,EAAI,OAAO,CAAE;AACpCC,IAAM;AACR,CAAC,CAED;AACA,KAAM,CAAAO,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,gCAAgC,CAAE,CAC7DC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACR,IAAI,CAC3B,CAAC,CAAC,CAEF;AACA,GAAI,CAACE,QAAQ,CAACO,EAAE,CAAE,CAChB,KAAM,CAAAC,SAAS,CAAG,KAAM,CAAAR,QAAQ,CAACS,IAAI,CAAC,CAAC,CACvC,KAAM,IAAI,CAAAZ,KAAK,4BAAAa,MAAA,CAA4BF,SAAS,CAACG,KAAK,EAAIX,QAAQ,CAACY,UAAU,CAAE,CAAC,CACtF,CAEA;AACA,KAAM,CAAAC,YAAY,CAAG,KAAM,CAAAb,QAAQ,CAACS,IAAI,CAAC,CAAC,CAC1C,KAAM,CAAET,QAAQ,CAAEc,eAAe,CAAEC,UAAU,CAAEC,aAAa,CAAEvB,IAAI,CAAEwB,WAAY,CAAC,CAAGJ,YAAY,CAEhG;AACA,MAAO,CACLb,QAAQ,CAAEc,eAAe,CACzBC,UAAU,CAAE;AACZG,YAAY,CAAEF,aAAa,CAC3BvB,IAAI,CAAEwB,WAAa;AACrB,CAAC,CACH,CAAE,MAAON,KAAK,CAAE,CACd;AACAQ,OAAO,CAACR,KAAK,CAAC,6BAA6B,CAAEA,KAAK,CAAC,CACnD,MAAO,CACLA,KAAK,CAAEA,KAAK,CAACpB,OAAO,EAAI,qDAC1B,CAAC,CACH,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}