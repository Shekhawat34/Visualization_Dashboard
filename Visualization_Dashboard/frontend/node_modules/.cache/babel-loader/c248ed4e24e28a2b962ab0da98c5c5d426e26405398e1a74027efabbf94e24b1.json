{"ast":null,"code":"export const sendChatMessage = async (message, customerId, role = 'guest') => {\n  try {\n    // Prepare the data to send to the API, including the role\n    const data = {\n      message,\n      customer_id: customerId || 'guest',\n      // Default to 'guest' if no customer ID\n      role // Include the role to differentiate between customers and clients\n    };\n\n    // Make the API request\n    const response = await fetch('http://localhost:5000/api/chat', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n\n    // Check if the response is successful\n    if (!response.ok) {\n      throw new Error(`Failed to send message: ${response.statusText}`);\n    }\n\n    // Parse the JSON response from the backend\n    const responseData = await response.json();\n\n    // Ensure the backend response structure is correct\n    const {\n      response: chatbotResponse,\n      properties,\n      customer_data,\n      role: backendRole\n    } = responseData;\n\n    // Return the response data containing the chatbot response, properties, and customer data\n    return {\n      response: chatbotResponse,\n      properties,\n      // Includes property images, prices, descriptions\n      customerData: customer_data,\n      role: backendRole // Include role to help front-end handle specific scenarios\n    };\n  } catch (error) {\n    console.error('Error sending chat message:', error);\n    return {\n      error: error.message || 'An error occurred while processing the chat message'\n    };\n  }\n};","map":{"version":3,"names":["sendChatMessage","message","customerId","role","data","customer_id","response","fetch","method","headers","body","JSON","stringify","ok","Error","statusText","responseData","json","chatbotResponse","properties","customer_data","backendRole","customerData","error","console"],"sources":["C:/Users/Dell/OneDrive/Desktop/new/frontend/src/api/chatApi.js"],"sourcesContent":["export const sendChatMessage = async (message, customerId, role = 'guest') => {\r\n  try {\r\n    // Prepare the data to send to the API, including the role\r\n    const data = {\r\n      message,\r\n      customer_id: customerId || 'guest', // Default to 'guest' if no customer ID\r\n      role, // Include the role to differentiate between customers and clients\r\n    };\r\n\r\n    // Make the API request\r\n    const response = await fetch('http://localhost:5000/api/chat', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    // Check if the response is successful\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to send message: ${response.statusText}`);\r\n    }\r\n\r\n    // Parse the JSON response from the backend\r\n    const responseData = await response.json();\r\n\r\n    // Ensure the backend response structure is correct\r\n    const { response: chatbotResponse, properties, customer_data, role: backendRole } = responseData;\r\n\r\n    // Return the response data containing the chatbot response, properties, and customer data\r\n    return {\r\n      response: chatbotResponse,\r\n      properties, // Includes property images, prices, descriptions\r\n      customerData: customer_data,\r\n      role: backendRole, // Include role to help front-end handle specific scenarios\r\n    };\r\n  } catch (error) {\r\n    console.error('Error sending chat message:', error);\r\n    return { error: error.message || 'An error occurred while processing the chat message' };\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,eAAe,GAAG,MAAAA,CAAOC,OAAO,EAAEC,UAAU,EAAEC,IAAI,GAAG,OAAO,KAAK;EAC5E,IAAI;IACF;IACA,MAAMC,IAAI,GAAG;MACXH,OAAO;MACPI,WAAW,EAAEH,UAAU,IAAI,OAAO;MAAE;MACpCC,IAAI,CAAE;IACR,CAAC;;IAED;IACA,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,EAAE;MAC7DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,IAAI;IAC3B,CAAC,CAAC;;IAEF;IACA,IAAI,CAACE,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2BR,QAAQ,CAACS,UAAU,EAAE,CAAC;IACnE;;IAEA;IACA,MAAMC,YAAY,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;;IAE1C;IACA,MAAM;MAAEX,QAAQ,EAAEY,eAAe;MAAEC,UAAU;MAAEC,aAAa;MAAEjB,IAAI,EAAEkB;IAAY,CAAC,GAAGL,YAAY;;IAEhG;IACA,OAAO;MACLV,QAAQ,EAAEY,eAAe;MACzBC,UAAU;MAAE;MACZG,YAAY,EAAEF,aAAa;MAC3BjB,IAAI,EAAEkB,WAAW,CAAE;IACrB,CAAC;EACH,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO;MAAEA,KAAK,EAAEA,KAAK,CAACtB,OAAO,IAAI;IAAsD,CAAC;EAC1F;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}