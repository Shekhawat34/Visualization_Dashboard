{"ast":null,"code":"// src/api/interactionApi.js\nconst API_URL = 'https://yourapi.com/api/interactions';\n\n// Fetch all interactions\nexport const getInteractions = async () => {\n  try {\n    const response = await fetch(API_URL);\n    if (!response.ok) {\n      throw new Error('Error fetching interactions');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching interactions:', error);\n    throw error;\n  }\n};\n\n// Fetch a single interaction by ID\nexport const getInteraction = async interactionId => {\n  try {\n    const response = await fetch(`${API_URL}/${interactionId}`);\n    if (!response.ok) {\n      throw new Error('Error fetching interaction details');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching interaction details:', error);\n    throw error;\n  }\n};\n\n// Create a new interaction\nexport const createInteraction = async interaction => {\n  try {\n    const response = await fetch(API_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(interaction)\n    });\n    if (!response.ok) {\n      throw new Error('Error creating interaction');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error creating interaction:', error);\n    throw error;\n  }\n};\n\n// Update an interaction by ID\nexport const updateInteraction = async (interactionId, interaction) => {\n  try {\n    const response = await fetch(`${API_URL}/${interactionId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(interaction)\n    });\n    if (!response.ok) {\n      throw new Error('Error updating interaction');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error updating interaction:', error);\n    throw error;\n  }\n};\n\n// Delete an interaction by ID\nexport const deleteInteraction = async interactionId => {\n  try {\n    const response = await fetch(`${API_URL}/${interactionId}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      throw new Error('Error deleting interaction');\n    }\n    return {\n      message: 'Interaction deleted successfully'\n    };\n  } catch (error) {\n    console.error('Error deleting interaction:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_URL","getInteractions","response","fetch","ok","Error","data","json","error","console","getInteraction","interactionId","createInteraction","interaction","method","headers","body","JSON","stringify","updateInteraction","deleteInteraction","message"],"sources":["C:/Users/Dell/OneDrive/Desktop/new/frontend/src/api/interactionsApi.js"],"sourcesContent":["// src/api/interactionApi.js\r\nconst API_URL = 'https://yourapi.com/api/interactions';\r\n\r\n// Fetch all interactions\r\nexport const getInteractions = async () => {\r\n    try {\r\n        const response = await fetch(API_URL);\r\n        if (!response.ok) {\r\n            throw new Error('Error fetching interactions');\r\n        }\r\n        const data = await response.json();\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Error fetching interactions:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Fetch a single interaction by ID\r\nexport const getInteraction = async (interactionId) => {\r\n    try {\r\n        const response = await fetch(`${API_URL}/${interactionId}`);\r\n        if (!response.ok) {\r\n            throw new Error('Error fetching interaction details');\r\n        }\r\n        const data = await response.json();\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Error fetching interaction details:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Create a new interaction\r\nexport const createInteraction = async (interaction) => {\r\n    try {\r\n        const response = await fetch(API_URL, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(interaction),\r\n        });\r\n        if (!response.ok) {\r\n            throw new Error('Error creating interaction');\r\n        }\r\n        const data = await response.json();\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Error creating interaction:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Update an interaction by ID\r\nexport const updateInteraction = async (interactionId, interaction) => {\r\n    try {\r\n        const response = await fetch(`${API_URL}/${interactionId}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(interaction),\r\n        });\r\n        if (!response.ok) {\r\n            throw new Error('Error updating interaction');\r\n        }\r\n        const data = await response.json();\r\n        return data;\r\n    } catch (error) {\r\n        console.error('Error updating interaction:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Delete an interaction by ID\r\nexport const deleteInteraction = async (interactionId) => {\r\n    try {\r\n        const response = await fetch(`${API_URL}/${interactionId}`, {\r\n            method: 'DELETE',\r\n        });\r\n        if (!response.ok) {\r\n            throw new Error('Error deleting interaction');\r\n        }\r\n        return { message: 'Interaction deleted successfully' };\r\n    } catch (error) {\r\n        console.error('Error deleting interaction:', error);\r\n        throw error;\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}