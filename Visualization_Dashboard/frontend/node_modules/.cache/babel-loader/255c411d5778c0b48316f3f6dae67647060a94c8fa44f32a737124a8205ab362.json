{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\OneDrive\\\\Desktop\\\\new\\\\frontend\\\\src\\\\components\\\\charts\\\\SectorChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from 'd3';\nimport api from '../../services/api';\nimport CardContainer from '../common/CardContainer';\nimport Loader from '../common/Loader';\nimport NoDataMessage from '../common/NoDataMessage';\nimport { createTooltip, cleanData, formatNumber, debounce } from '../../utils/helpers';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SectorChart = ({\n  fullSize = false\n}) => {\n  _s();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedMetric, setSelectedMetric] = useState('intensity');\n  const [metrics, setMetrics] = useState({\n    intensity: [],\n    likelihood: [],\n    relevance: []\n  });\n  const svgRef = useRef(null);\n  const containerRef = useRef(null);\n  const tooltipRef = useRef(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n\n        // Fetch sector data for the primary view\n        const sectorData = await api.getSectors();\n        setData(sectorData);\n\n        // Fetch metrics data for each metric type\n        const intensityData = await api.getMetrics('sector', 'intensity');\n        const likelihoodData = await api.getMetrics('sector', 'likelihood');\n        const relevanceData = await api.getMetrics('sector', 'relevance');\n        setMetrics({\n          intensity: intensityData,\n          likelihood: likelihoodData,\n          relevance: relevanceData\n        });\n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching sector data:', err);\n        setError('Failed to load sector data');\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  useEffect(() => {\n    if (metrics[selectedMetric] && metrics[selectedMetric].length > 0 && !loading) {\n      renderChart();\n    }\n  }, [metrics, selectedMetric, loading]);\n  useEffect(() => {\n    // Add resize listener\n    const handleResize = debounce(() => {\n      if (metrics[selectedMetric] && metrics[selectedMetric].length > 0 && !loading) {\n        renderChart();\n      }\n    }, 300);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [metrics, selectedMetric, loading]);\n  const prepareTreemapData = data => {\n    // Create a hierarchical structure for treemap\n    const root = {\n      name: 'Sectors',\n      children: []\n    };\n\n    // Process and filter data\n    const cleanedData = data.filter(d => d.sector && d.value !== undefined && !isNaN(d.value) && d.value > 0);\n\n    // Group by sector and calculate values\n    const sectorMap = new Map();\n    cleanedData.forEach(item => {\n      const sectorName = item.sector || 'Unknown';\n      if (!sectorMap.has(sectorName)) {\n        sectorMap.set(sectorName, {\n          name: sectorName,\n          value: item.value,\n          count: item.count || 1\n        });\n      } else {\n        const existing = sectorMap.get(sectorName);\n        existing.value += item.value;\n        existing.count += item.count || 1;\n      }\n    });\n\n    // Convert map to array and sort by value\n    const sortedSectors = Array.from(sectorMap.values()).sort((a, b) => b.value - a.value);\n\n    // Add to root\n    root.children = sortedSectors;\n    return root;\n  };\n  const renderChart = () => {\n    if (!svgRef.current || !containerRef.current) return;\n\n    // Clear previous chart\n    d3.select(svgRef.current).selectAll('*').remove();\n\n    // Set dimensions\n    const containerWidth = containerRef.current.clientWidth;\n    const margin = {\n      top: 10,\n      right: 10,\n      bottom: 10,\n      left: 10\n    };\n    const width = containerWidth - margin.left - margin.right;\n    const height = (fullSize ? 500 : 330) - margin.top - margin.bottom;\n\n    // Create SVG\n    const svg = d3.select(svgRef.current).attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n\n    // Create tooltip if not already created\n    if (!tooltipRef.current) {\n      tooltipRef.current = createTooltip(d3);\n    }\n\n    // Prepare data for treemap\n    const currentData = metrics[selectedMetric];\n    const hierarchicalData = prepareTreemapData(currentData);\n\n    // Create color scale\n    const colorScale = d3.scaleLinear().domain([0, d3.max(hierarchicalData.children, d => d.value)]).range(['#67c0e3', '#0d47a1']); // Light blue to dark blue\n\n    // Create treemap layout\n    const treemap = d3.treemap().size([width, height]).padding(3).round(true);\n\n    // Generate treemap hierarchy\n    const root = d3.hierarchy(hierarchicalData).sum(d => d.value).sort((a, b) => b.value - a.value);\n\n    // Compute the treemap layout\n    treemap(root);\n\n    // Create leaf groups with transition\n    const leaf = svg.selectAll('g').data(root.leaves()).enter().append('g').attr('transform', d => `translate(${d.x0},${d.y0})`);\n\n    // Add rectangles to each leaf with transition\n    leaf.append('rect').attr('width', 0).attr('height', 0).attr('fill', d => colorScale(d.data.value)).attr('stroke', '#fff').attr('stroke-width', 1).attr('rx', 3).attr('ry', 3).transition().duration(800).ease(d3.easeCubicOut).attr('width', d => d.x1 - d.x0).attr('height', d => d.y1 - d.y0).attr('opacity', 0.9);\n\n    // Add text labels for sectors\n    leaf.append('text').attr('class', 'sector-label').attr('dx', 4).attr('dy', 14).attr('font-size', '10px').attr('fill', 'white').attr('opacity', 0).text(d => {\n      const width = d.x1 - d.x0;\n      if (width < 50) return ''; // Don't show text for small boxes\n\n      const name = d.data.name;\n      // Truncate name if too long for the box\n      return name.length > 15 ? name.substring(0, 13) + '...' : name;\n    }).call(wrap, 80) // Wrap text for better visibility\n    .transition().delay(800).duration(400).attr('opacity', 1);\n\n    // Add value labels\n    leaf.append('text').attr('class', 'value-label').attr('dx', 4).attr('dy', 30).attr('font-size', '9px').attr('font-weight', 'bold').attr('fill', 'white').attr('opacity', 0).text(d => {\n      const width = d.x1 - d.x0;\n      if (width < 50) return ''; // Don't show value for small boxes\n      return formatNumber(d.data.value);\n    }).transition().delay(900).duration(400).attr('opacity', 1);\n\n    // Add hover interaction\n    leaf.on('mouseover', function (event, d) {\n      d3.select(this).select('rect').transition().duration(200).attr('opacity', 1).attr('stroke-width', 2);\n      tooltipRef.current.style('opacity', 1).html(`\n          <div style=\"background: ${colorScale(d.data.value)}; padding: 5px; border-radius: 4px;\">\n            <strong style=\"color: white;\">${d.data.name}</strong>\n          </div>\n          <div style=\"padding: 5px;\">\n            <strong>${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)}:</strong> ${formatNumber(d.data.value)}<br>\n            <strong>Count:</strong> ${formatNumber(d.data.count)} entries\n          </div>\n        `).style('left', event.pageX + 10 + 'px').style('top', event.pageY - 20 + 'px');\n    }).on('mouseout', function () {\n      d3.select(this).select('rect').transition().duration(200).attr('opacity', 0.9).attr('stroke-width', 1);\n      tooltipRef.current.transition().duration(500).style('opacity', 0);\n    });\n\n    // Add legend\n    const legendData = hierarchicalData.children.sort((a, b) => b.value - a.value).slice(0, 5); // Top 5 sectors\n\n    const legend = svg.append('g').attr('transform', `translate(${width - 180}, ${height - 130})`);\n    legend.append('rect').attr('width', 170).attr('height', 120).attr('fill', 'rgba(255, 255, 255, 0.7)').attr('rx', 5).attr('ry', 5);\n    legend.append('text').attr('x', 10).attr('y', 20).attr('font-weight', 'bold').text('Top Sectors');\n    legendData.forEach((d, i) => {\n      const g = legend.append('g').attr('transform', `translate(10, ${35 + i * 20})`);\n      g.append('rect').attr('width', 15).attr('height', 15).attr('fill', colorScale(d.value)).attr('rx', 2).attr('ry', 2);\n      g.append('text').attr('x', 20).attr('y', 12).attr('font-size', '9px').text(`${d.name.length > 15 ? d.name.substring(0, 12) + '...' : d.name} (${formatNumber(d.value)})`);\n    });\n\n    // Function to wrap text\n    function wrap(text, width) {\n      text.each(function () {\n        const text = d3.select(this);\n        const words = text.text().split(/\\s+/).reverse();\n        let word;\n        let line = [];\n        let lineNumber = 0;\n        const lineHeight = 1.1; // ems\n        const y = text.attr(\"y\");\n        const dy = parseFloat(text.attr(\"dy\"));\n        let tspan = text.text(null).append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", dy + \"em\");\n        while (word = words.pop()) {\n          line.push(word);\n          tspan.text(line.join(\" \"));\n          if (tspan.node().getComputedTextLength() > width) {\n            line.pop();\n            tspan.text(line.join(\" \"));\n            line = [word];\n            tspan = text.append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\").text(word);\n          }\n        }\n      });\n    }\n  };\n  const handleMetricChange = metric => {\n    // Save the currently selected metric\n    setSelectedMetric(metric);\n  };\n  const actionButtons = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-actions\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: `chart-action-btn ${selectedMetric === 'intensity' ? 'active' : ''}`,\n      onClick: () => handleMetricChange('intensity'),\n      children: \"Intensity\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `chart-action-btn ${selectedMetric === 'likelihood' ? 'active' : ''}`,\n      onClick: () => handleMetricChange('likelihood'),\n      children: \"Likelihood\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `chart-action-btn ${selectedMetric === 'relevance' ? 'active' : ''}`,\n      onClick: () => handleMetricChange('relevance'),\n      children: \"Relevance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"refresh-btn\",\n      onClick: () => {\n        setLoading(true);\n        Promise.all([api.getSectors(), api.getMetrics('sector', 'intensity'), api.getMetrics('sector', 'likelihood'), api.getMetrics('sector', 'relevance')]).then(([sectorData, intensityData, likelihoodData, relevanceData]) => {\n          setData(sectorData);\n          setMetrics({\n            intensity: intensityData,\n            likelihood: likelihoodData,\n            relevance: relevanceData\n          });\n          setLoading(false);\n        }).catch(err => {\n          setError('Failed to reload data');\n          setLoading(false);\n        });\n      },\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"refresh-icon\",\n        children: \"\\u21BB\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 330,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(CardContainer, {\n    title: \"Sector Analysis\",\n    actionButtons: actionButtons,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: containerRef,\n      className: \"chart-container\",\n      style: {\n        height: fullSize ? '500px' : '330px'\n      },\n      children: loading ? /*#__PURE__*/_jsxDEV(Loader, {\n        message: \"Loading sector data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 11\n      }, this) : error ? /*#__PURE__*/_jsxDEV(NoDataMessage, {\n        message: error,\n        icon: \"\\u26A0\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 11\n      }, this) : !metrics[selectedMetric] || metrics[selectedMetric].length === 0 ? /*#__PURE__*/_jsxDEV(NoDataMessage, {\n        message: \"No sector data available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          ref: svgRef,\n          style: {\n            width: '100%',\n            height: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"metric-title\",\n          children: [selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1), \" by Sector\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 378,\n    columnNumber: 5\n  }, this);\n};\n_s(SectorChart, \"iO9jjq2P5YJ9HAOFXBX8sB2FMBA=\");\n_c = SectorChart;\nexport default SectorChart;\nvar _c;\n$RefreshReg$(_c, \"SectorChart\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","api","CardContainer","Loader","NoDataMessage","createTooltip","cleanData","formatNumber","debounce","jsxDEV","_jsxDEV","Fragment","_Fragment","SectorChart","fullSize","_s","data","setData","loading","setLoading","error","setError","selectedMetric","setSelectedMetric","metrics","setMetrics","intensity","likelihood","relevance","svgRef","containerRef","tooltipRef","fetchData","sectorData","getSectors","intensityData","getMetrics","likelihoodData","relevanceData","err","console","length","renderChart","handleResize","window","addEventListener","removeEventListener","prepareTreemapData","root","name","children","cleanedData","filter","d","sector","value","undefined","isNaN","sectorMap","Map","forEach","item","sectorName","has","set","count","existing","get","sortedSectors","Array","from","values","sort","a","b","current","select","selectAll","remove","containerWidth","clientWidth","margin","top","right","bottom","left","width","height","svg","attr","append","currentData","hierarchicalData","colorScale","scaleLinear","domain","max","range","treemap","size","padding","round","hierarchy","sum","leaf","leaves","enter","x0","y0","transition","duration","ease","easeCubicOut","x1","y1","text","substring","call","wrap","delay","on","event","style","html","charAt","toUpperCase","slice","pageX","pageY","legendData","legend","i","g","each","words","split","reverse","word","line","lineNumber","lineHeight","y","dy","parseFloat","tspan","pop","push","join","node","getComputedTextLength","handleMetricChange","metric","actionButtons","className","onClick","fileName","_jsxFileName","columnNumber","Promise","all","then","catch","title","ref","message","icon","_c","$RefreshReg$"],"sources":["C:/Users/Dell/OneDrive/Desktop/new/frontend/src/components/charts/SectorChart.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport * as d3 from 'd3';\r\nimport api from '../../services/api';\r\nimport CardContainer from '../common/CardContainer';\r\nimport Loader from '../common/Loader';\r\nimport NoDataMessage from '../common/NoDataMessage';\r\nimport { createTooltip, cleanData, formatNumber, debounce } from '../../utils/helpers';\r\n\r\nconst SectorChart = ({ fullSize = false }) => {\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [selectedMetric, setSelectedMetric] = useState('intensity');\r\n  const [metrics, setMetrics] = useState({\r\n    intensity: [],\r\n    likelihood: [],\r\n    relevance: []\r\n  });\r\n  \r\n  const svgRef = useRef(null);\r\n  const containerRef = useRef(null);\r\n  const tooltipRef = useRef(null);\r\n  \r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        \r\n        // Fetch sector data for the primary view\r\n        const sectorData = await api.getSectors();\r\n        setData(sectorData);\r\n        \r\n        // Fetch metrics data for each metric type\r\n        const intensityData = await api.getMetrics('sector', 'intensity');\r\n        const likelihoodData = await api.getMetrics('sector', 'likelihood');\r\n        const relevanceData = await api.getMetrics('sector', 'relevance');\r\n        \r\n        setMetrics({\r\n          intensity: intensityData,\r\n          likelihood: likelihoodData,\r\n          relevance: relevanceData\r\n        });\r\n        \r\n        setLoading(false);\r\n      } catch (err) {\r\n        console.error('Error fetching sector data:', err);\r\n        setError('Failed to load sector data');\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchData();\r\n  }, []);\r\n  \r\n  useEffect(() => {\r\n    if (metrics[selectedMetric] && metrics[selectedMetric].length > 0 && !loading) {\r\n      renderChart();\r\n    }\r\n  }, [metrics, selectedMetric, loading]);\r\n  \r\n  useEffect(() => {\r\n    // Add resize listener\r\n    const handleResize = debounce(() => {\r\n      if (metrics[selectedMetric] && metrics[selectedMetric].length > 0 && !loading) {\r\n        renderChart();\r\n      }\r\n    }, 300);\r\n    \r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, [metrics, selectedMetric, loading]);\r\n  \r\n  const prepareTreemapData = (data) => {\r\n    // Create a hierarchical structure for treemap\r\n    const root = {\r\n      name: 'Sectors',\r\n      children: []\r\n    };\r\n    \r\n    // Process and filter data\r\n    const cleanedData = data.filter(d => \r\n      d.sector && d.value !== undefined && !isNaN(d.value) && d.value > 0\r\n    );\r\n    \r\n    // Group by sector and calculate values\r\n    const sectorMap = new Map();\r\n    cleanedData.forEach(item => {\r\n      const sectorName = item.sector || 'Unknown';\r\n      if (!sectorMap.has(sectorName)) {\r\n        sectorMap.set(sectorName, {\r\n          name: sectorName,\r\n          value: item.value,\r\n          count: item.count || 1\r\n        });\r\n      } else {\r\n        const existing = sectorMap.get(sectorName);\r\n        existing.value += item.value;\r\n        existing.count += item.count || 1;\r\n      }\r\n    });\r\n    \r\n    // Convert map to array and sort by value\r\n    const sortedSectors = Array.from(sectorMap.values())\r\n      .sort((a, b) => b.value - a.value);\r\n    \r\n    // Add to root\r\n    root.children = sortedSectors;\r\n    \r\n    return root;\r\n  };\r\n  \r\n  const renderChart = () => {\r\n    if (!svgRef.current || !containerRef.current) return;\r\n    \r\n    // Clear previous chart\r\n    d3.select(svgRef.current).selectAll('*').remove();\r\n    \r\n    // Set dimensions\r\n    const containerWidth = containerRef.current.clientWidth;\r\n    const margin = { top: 10, right: 10, bottom: 10, left: 10 };\r\n    const width = containerWidth - margin.left - margin.right;\r\n    const height = (fullSize ? 500 : 330) - margin.top - margin.bottom;\r\n    \r\n    // Create SVG\r\n    const svg = d3.select(svgRef.current)\r\n      .attr('width', width + margin.left + margin.right)\r\n      .attr('height', height + margin.top + margin.bottom)\r\n      .append('g')\r\n      .attr('transform', `translate(${margin.left},${margin.top})`);\r\n    \r\n    // Create tooltip if not already created\r\n    if (!tooltipRef.current) {\r\n      tooltipRef.current = createTooltip(d3);\r\n    }\r\n    \r\n    // Prepare data for treemap\r\n    const currentData = metrics[selectedMetric];\r\n    const hierarchicalData = prepareTreemapData(currentData);\r\n    \r\n    // Create color scale\r\n    const colorScale = d3.scaleLinear()\r\n      .domain([0, d3.max(hierarchicalData.children, d => d.value)])\r\n      .range(['#67c0e3', '#0d47a1']); // Light blue to dark blue\r\n    \r\n    // Create treemap layout\r\n    const treemap = d3.treemap()\r\n      .size([width, height])\r\n      .padding(3)\r\n      .round(true);\r\n    \r\n    // Generate treemap hierarchy\r\n    const root = d3.hierarchy(hierarchicalData)\r\n      .sum(d => d.value)\r\n      .sort((a, b) => b.value - a.value);\r\n    \r\n    // Compute the treemap layout\r\n    treemap(root);\r\n    \r\n    // Create leaf groups with transition\r\n    const leaf = svg.selectAll('g')\r\n      .data(root.leaves())\r\n      .enter()\r\n      .append('g')\r\n      .attr('transform', d => `translate(${d.x0},${d.y0})`);\r\n    \r\n    // Add rectangles to each leaf with transition\r\n    leaf.append('rect')\r\n      .attr('width', 0)\r\n      .attr('height', 0)\r\n      .attr('fill', d => colorScale(d.data.value))\r\n      .attr('stroke', '#fff')\r\n      .attr('stroke-width', 1)\r\n      .attr('rx', 3)\r\n      .attr('ry', 3)\r\n      .transition()\r\n      .duration(800)\r\n      .ease(d3.easeCubicOut)\r\n      .attr('width', d => d.x1 - d.x0)\r\n      .attr('height', d => d.y1 - d.y0)\r\n      .attr('opacity', 0.9);\r\n    \r\n    // Add text labels for sectors\r\n    leaf.append('text')\r\n      .attr('class', 'sector-label')\r\n      .attr('dx', 4)\r\n      .attr('dy', 14)\r\n      .attr('font-size', '10px')\r\n      .attr('fill', 'white')\r\n      .attr('opacity', 0)\r\n      .text(d => {\r\n        const width = d.x1 - d.x0;\r\n        if (width < 50) return ''; // Don't show text for small boxes\r\n        \r\n        const name = d.data.name;\r\n        // Truncate name if too long for the box\r\n        return name.length > 15 ? name.substring(0, 13) + '...' : name;\r\n      })\r\n      .call(wrap, 80) // Wrap text for better visibility\r\n      .transition()\r\n      .delay(800)\r\n      .duration(400)\r\n      .attr('opacity', 1);\r\n    \r\n    // Add value labels\r\n    leaf.append('text')\r\n      .attr('class', 'value-label')\r\n      .attr('dx', 4)\r\n      .attr('dy', 30)\r\n      .attr('font-size', '9px')\r\n      .attr('font-weight', 'bold')\r\n      .attr('fill', 'white')\r\n      .attr('opacity', 0)\r\n      .text(d => {\r\n        const width = d.x1 - d.x0;\r\n        if (width < 50) return ''; // Don't show value for small boxes\r\n        return formatNumber(d.data.value);\r\n      })\r\n      .transition()\r\n      .delay(900)\r\n      .duration(400)\r\n      .attr('opacity', 1);\r\n    \r\n    // Add hover interaction\r\n    leaf.on('mouseover', function(event, d) {\r\n      d3.select(this).select('rect')\r\n        .transition()\r\n        .duration(200)\r\n        .attr('opacity', 1)\r\n        .attr('stroke-width', 2);\r\n      \r\n      tooltipRef.current\r\n        .style('opacity', 1)\r\n        .html(`\r\n          <div style=\"background: ${colorScale(d.data.value)}; padding: 5px; border-radius: 4px;\">\r\n            <strong style=\"color: white;\">${d.data.name}</strong>\r\n          </div>\r\n          <div style=\"padding: 5px;\">\r\n            <strong>${selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)}:</strong> ${formatNumber(d.data.value)}<br>\r\n            <strong>Count:</strong> ${formatNumber(d.data.count)} entries\r\n          </div>\r\n        `)\r\n        .style('left', (event.pageX + 10) + 'px')\r\n        .style('top', (event.pageY - 20) + 'px');\r\n    })\r\n    .on('mouseout', function() {\r\n      d3.select(this).select('rect')\r\n        .transition()\r\n        .duration(200)\r\n        .attr('opacity', 0.9)\r\n        .attr('stroke-width', 1);\r\n      \r\n      tooltipRef.current\r\n        .transition()\r\n        .duration(500)\r\n        .style('opacity', 0);\r\n    });\r\n    \r\n    // Add legend\r\n    const legendData = hierarchicalData.children\r\n      .sort((a, b) => b.value - a.value)\r\n      .slice(0, 5); // Top 5 sectors\r\n    \r\n    const legend = svg.append('g')\r\n      .attr('transform', `translate(${width - 180}, ${height - 130})`);\r\n    \r\n    legend.append('rect')\r\n      .attr('width', 170)\r\n      .attr('height', 120)\r\n      .attr('fill', 'rgba(255, 255, 255, 0.7)')\r\n      .attr('rx', 5)\r\n      .attr('ry', 5);\r\n    \r\n    legend.append('text')\r\n      .attr('x', 10)\r\n      .attr('y', 20)\r\n      .attr('font-weight', 'bold')\r\n      .text('Top Sectors');\r\n    \r\n    legendData.forEach((d, i) => {\r\n      const g = legend.append('g')\r\n        .attr('transform', `translate(10, ${35 + i * 20})`);\r\n      \r\n      g.append('rect')\r\n        .attr('width', 15)\r\n        .attr('height', 15)\r\n        .attr('fill', colorScale(d.value))\r\n        .attr('rx', 2)\r\n        .attr('ry', 2);\r\n      \r\n      g.append('text')\r\n        .attr('x', 20)\r\n        .attr('y', 12)\r\n        .attr('font-size', '9px')\r\n        .text(`${d.name.length > 15 ? d.name.substring(0, 12) + '...' : d.name} (${formatNumber(d.value)})`);\r\n    });\r\n    \r\n    // Function to wrap text\r\n    function wrap(text, width) {\r\n      text.each(function() {\r\n        const text = d3.select(this);\r\n        const words = text.text().split(/\\s+/).reverse();\r\n        let word;\r\n        let line = [];\r\n        let lineNumber = 0;\r\n        const lineHeight = 1.1; // ems\r\n        const y = text.attr(\"y\");\r\n        const dy = parseFloat(text.attr(\"dy\"));\r\n        let tspan = text.text(null).append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", dy + \"em\");\r\n        \r\n        while (word = words.pop()) {\r\n          line.push(word);\r\n          tspan.text(line.join(\" \"));\r\n          if (tspan.node().getComputedTextLength() > width) {\r\n            line.pop();\r\n            tspan.text(line.join(\" \"));\r\n            line = [word];\r\n            tspan = text.append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\").text(word);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  };\r\n  \r\n  const handleMetricChange = (metric) => {\r\n    // Save the currently selected metric\r\n    setSelectedMetric(metric);\r\n  };\r\n  \r\n  const actionButtons = (\r\n    <div className=\"chart-actions\">\r\n      <button \r\n        className={`chart-action-btn ${selectedMetric === 'intensity' ? 'active' : ''}`}\r\n        onClick={() => handleMetricChange('intensity')}\r\n      >\r\n        Intensity\r\n      </button>\r\n      <button \r\n        className={`chart-action-btn ${selectedMetric === 'likelihood' ? 'active' : ''}`}\r\n        onClick={() => handleMetricChange('likelihood')}\r\n      >\r\n        Likelihood\r\n      </button>\r\n      <button \r\n        className={`chart-action-btn ${selectedMetric === 'relevance' ? 'active' : ''}`}\r\n        onClick={() => handleMetricChange('relevance')}\r\n      >\r\n        Relevance\r\n      </button>\r\n      <button \r\n        className=\"refresh-btn\" \r\n        onClick={() => {\r\n          setLoading(true);\r\n          Promise.all([\r\n            api.getSectors(),\r\n            api.getMetrics('sector', 'intensity'),\r\n            api.getMetrics('sector', 'likelihood'),\r\n            api.getMetrics('sector', 'relevance')\r\n          ]).then(([sectorData, intensityData, likelihoodData, relevanceData]) => {\r\n            setData(sectorData);\r\n            setMetrics({\r\n              intensity: intensityData,\r\n              likelihood: likelihoodData,\r\n              relevance: relevanceData\r\n            });\r\n            setLoading(false);\r\n          }).catch(err => {\r\n            setError('Failed to reload data');\r\n            setLoading(false);\r\n          });\r\n        }}\r\n      >\r\n        <span className=\"refresh-icon\">↻</span>\r\n      </button>\r\n    </div>\r\n  );\r\n  \r\n  return (\r\n    <CardContainer title=\"Sector Analysis\" actionButtons={actionButtons}>\r\n      <div ref={containerRef} className=\"chart-container\" style={{ height: fullSize ? '500px' : '330px' }}>\r\n        {loading ? (\r\n          <Loader message=\"Loading sector data...\" />\r\n        ) : error ? (\r\n          <NoDataMessage message={error} icon=\"⚠️\" />\r\n        ) : !metrics[selectedMetric] || metrics[selectedMetric].length === 0 ? (\r\n          <NoDataMessage message=\"No sector data available\" />\r\n        ) : (\r\n          <>\r\n            <svg ref={svgRef} style={{ width: '100%', height: '100%' }}></svg>\r\n            <div className=\"metric-title\">\r\n              {selectedMetric.charAt(0).toUpperCase() + selectedMetric.slice(1)} by Sector\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </CardContainer>\r\n  );\r\n};\r\n\r\nexport default SectorChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}